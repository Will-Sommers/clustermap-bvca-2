var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__33845__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__33845 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__33845__delegate.call(this, args);
    };
    G__33845.cljs$lang$maxFixedArity = 0;
    G__33845.cljs$lang$applyTo = function(arglist__33846) {
      var args = cljs.core.seq(arglist__33846);
      return G__33845__delegate(args);
    };
    G__33845.cljs$core$IFn$_invoke$arity$variadic = G__33845__delegate;
    return G__33845;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3394__auto__ = ty;
    if (cljs.core.truth_(and__3394__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3394__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4248__auto___33847 = len;
  var i_33848 = 0;
  while (true) {
    if (i_33848 < n__4248__auto___33847) {
      new_arr[i_33848] = arr[i_33848];
      var G__33849 = i_33848 + 1;
      i_33848 = G__33849;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__33850__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__33850 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__33850__delegate.call(this, array, i, idxs);
    };
    G__33850.cljs$lang$maxFixedArity = 2;
    G__33850.cljs$lang$applyTo = function(arglist__33851) {
      var array = cljs.core.first(arglist__33851);
      arglist__33851 = cljs.core.next(arglist__33851);
      var i = cljs.core.first(arglist__33851);
      var idxs = cljs.core.rest(arglist__33851);
      return G__33850__delegate(array, i, idxs);
    };
    G__33850.cljs$core$IFn$_invoke$arity$variadic = G__33850__delegate;
    return G__33850;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__33852__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__33852 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__33852__delegate.call(this, array, idx, idx2, idxv);
    };
    G__33852.cljs$lang$maxFixedArity = 3;
    G__33852.cljs$lang$applyTo = function(arglist__33853) {
      var array = cljs.core.first(arglist__33853);
      arglist__33853 = cljs.core.next(arglist__33853);
      var idx = cljs.core.first(arglist__33853);
      arglist__33853 = cljs.core.next(arglist__33853);
      var idx2 = cljs.core.first(arglist__33853);
      var idxv = cljs.core.rest(arglist__33853);
      return G__33852__delegate(array, idx, idx2, idxv);
    };
    G__33852.cljs$core$IFn$_invoke$arity$variadic = G__33852__delegate;
    return G__33852;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj33855 = {};
  return obj33855;
}();
cljs.core.IFn = function() {
  var obj33857 = {};
  return obj33857;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = cljs.core._invoke[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._invoke["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj33859 = {};
  return obj33859;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3394__auto__ = value;
    if (and__3394__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4027__auto__ = value == null ? null : value;
    return function() {
      var or__3406__auto__ = cljs.core._clone[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._clone["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj33861 = {};
  return obj33861;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._count[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._count["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj33863 = {};
  return obj33863;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._empty[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._empty["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj33865 = {};
  return obj33865;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._conj[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._conj["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj33867 = {};
  return obj33867;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3394__auto__ = coll;
      if (and__3394__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4027__auto__ = coll == null ? null : coll;
      return function() {
        var or__3406__auto__ = cljs.core._nth[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._nth["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3394__auto__ = coll;
      if (and__3394__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4027__auto__ = coll == null ? null : coll;
      return function() {
        var or__3406__auto__ = cljs.core._nth[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._nth["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj33869 = {};
  return obj33869;
}();
cljs.core.ISeq = function() {
  var obj33871 = {};
  return obj33871;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._first[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._first["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._rest[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._rest["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj33873 = {};
  return obj33873;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._next[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._next["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj33875 = {};
  return obj33875;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3394__auto__ = o;
      if (and__3394__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4027__auto__ = o == null ? null : o;
      return function() {
        var or__3406__auto__ = cljs.core._lookup[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._lookup["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3394__auto__ = o;
      if (and__3394__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4027__auto__ = o == null ? null : o;
      return function() {
        var or__3406__auto__ = cljs.core._lookup[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._lookup["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj33877 = {};
  return obj33877;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._assoc[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._assoc["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj33879 = {};
  return obj33879;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._dissoc[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._dissoc["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj33881 = {};
  return obj33881;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._key[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._key["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._val[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._val["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj33883 = {};
  return obj33883;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._disjoin[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._disjoin["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj33885 = {};
  return obj33885;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._peek[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._peek["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._pop[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._pop["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj33887 = {};
  return obj33887;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._assoc_n[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj33889 = {};
  return obj33889;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._deref[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._deref["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj33891 = {};
  return obj33891;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj33893 = {};
  return obj33893;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._meta[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._meta["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj33895 = {};
  return obj33895;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._with_meta[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._with_meta["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj33897 = {};
  return obj33897;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3394__auto__ = coll;
      if (and__3394__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4027__auto__ = coll == null ? null : coll;
      return function() {
        var or__3406__auto__ = cljs.core._reduce[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._reduce["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3394__auto__ = coll;
      if (and__3394__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4027__auto__ = coll == null ? null : coll;
      return function() {
        var or__3406__auto__ = cljs.core._reduce[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core._reduce["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj33899 = {};
  return obj33899;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj33901 = {};
  return obj33901;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._equiv[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._equiv["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj33903 = {};
  return obj33903;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._hash[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._hash["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj33905 = {};
  return obj33905;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._seq[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._seq["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj33907 = {};
  return obj33907;
}();
cljs.core.IList = function() {
  var obj33909 = {};
  return obj33909;
}();
cljs.core.IRecord = function() {
  var obj33911 = {};
  return obj33911;
}();
cljs.core.IReversible = function() {
  var obj33913 = {};
  return obj33913;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._rseq[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._rseq["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj33915 = {};
  return obj33915;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._entry_key[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._entry_key["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._comparator[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._comparator["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj33917 = {};
  return obj33917;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3394__auto__ = writer;
    if (and__3394__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4027__auto__ = writer == null ? null : writer;
    return function() {
      var or__3406__auto__ = cljs.core._write[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._write["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3394__auto__ = writer;
    if (and__3394__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4027__auto__ = writer == null ? null : writer;
    return function() {
      var or__3406__auto__ = cljs.core._flush[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._flush["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj33919 = {};
  return obj33919;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3394__auto__ = o;
    if (and__3394__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4027__auto__ = o == null ? null : o;
    return function() {
      var or__3406__auto__ = cljs.core._pr_writer[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj33921 = {};
  return obj33921;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3394__auto__ = d;
    if (and__3394__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4027__auto__ = d == null ? null : d;
    return function() {
      var or__3406__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj33923 = {};
  return obj33923;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = cljs.core._notify_watches[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = cljs.core._add_watch[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._add_watch["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = cljs.core._remove_watch[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj33925 = {};
  return obj33925;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._as_transient[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._as_transient["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj33927 = {};
  return obj33927;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj33929 = {};
  return obj33929;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj33931 = {};
  return obj33931;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj33933 = {};
  return obj33933;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj33935 = {};
  return obj33935;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3394__auto__ = tcoll;
    if (and__3394__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4027__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3406__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj33937 = {};
  return obj33937;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._compare[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._compare["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj33939 = {};
  return obj33939;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._drop_first[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._drop_first["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj33941 = {};
  return obj33941;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._chunked_first[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj33943 = {};
  return obj33943;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3394__auto__ = coll;
    if (and__3394__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4027__auto__ = coll == null ? null : coll;
    return function() {
      var or__3406__auto__ = cljs.core._chunked_next[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj33945 = {};
  return obj33945;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._name[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._name["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._namespace[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._namespace["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3394__auto__) {
        return b.ns;
      } else {
        return and__3394__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3817__auto__ = self__._hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__33947 = null;
  var G__33947__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__33947__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__33947 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33947__2.call(this, self__, coll);
      case 3:
        return G__33947__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__33947;
}();
cljs.core.Symbol.prototype.apply = function(self__, args33946) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args33946)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__33949 = coll;
      if (G__33949) {
        var bit__4043__auto__ = G__33949.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4043__auto__ || G__33949.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__33951 = coll;
      if (G__33951) {
        var bit__4043__auto__ = G__33951.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4043__auto__ || G__33951.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__33953 = coll;
      if (G__33953) {
        var bit__4043__auto__ = G__33953.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4043__auto__ || G__33953.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__33955 = coll;
      if (G__33955) {
        var bit__4043__auto__ = G__33955.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4043__auto__ || G__33955.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__33956__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__33957 = y;
            var G__33958 = cljs.core.first.call(null, more);
            var G__33959 = cljs.core.next.call(null, more);
            x = G__33957;
            y = G__33958;
            more = G__33959;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__33956 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__33956__delegate.call(this, x, y, more);
    };
    G__33956.cljs$lang$maxFixedArity = 2;
    G__33956.cljs$lang$applyTo = function(arglist__33960) {
      var x = cljs.core.first(arglist__33960);
      arglist__33960 = cljs.core.next(arglist__33960);
      var y = cljs.core.first(arglist__33960);
      var more = cljs.core.rest(arglist__33960);
      return G__33956__delegate(x, y, more);
    };
    G__33956.cljs$core$IFn$_invoke$arity$variadic = G__33956__delegate;
    return G__33956;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__33961 = nval;
            var G__33962 = n + 1;
            val = G__33961;
            n = G__33962;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__33963 = nval;
          var G__33964 = n + 1;
          val__$1 = G__33963;
          n = G__33964;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__33965 = nval;
          var G__33966 = n + 1;
          val__$1 = G__33965;
          n = G__33966;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__33967 = nval;
            var G__33968 = n + 1;
            val = G__33967;
            n = G__33968;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__33969 = nval;
          var G__33970 = n + 1;
          val__$1 = G__33969;
          n = G__33970;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__33971 = nval;
          var G__33972 = n + 1;
          val__$1 = G__33971;
          n = G__33972;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__33974 = x;
  if (G__33974) {
    var bit__4050__auto__ = G__33974.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4050__auto__ || G__33974.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__33974.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__33974);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__33974);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__33976 = x;
  if (G__33976) {
    var bit__4050__auto__ = G__33976.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4050__auto__ || G__33976.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__33976.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__33976);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__33976);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__33977 = sn;
      s = G__33977;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__33978__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__33979 = conj.call(null, coll, x);
          var G__33980 = cljs.core.first.call(null, xs);
          var G__33981 = cljs.core.next.call(null, xs);
          coll = G__33979;
          x = G__33980;
          xs = G__33981;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__33978 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__33978__delegate.call(this, coll, x, xs);
    };
    G__33978.cljs$lang$maxFixedArity = 2;
    G__33978.cljs$lang$applyTo = function(arglist__33982) {
      var coll = cljs.core.first(arglist__33982);
      arglist__33982 = cljs.core.next(arglist__33982);
      var x = cljs.core.first(arglist__33982);
      var xs = cljs.core.rest(arglist__33982);
      return G__33978__delegate(coll, x, xs);
    };
    G__33978.cljs$core$IFn$_invoke$arity$variadic = G__33978__delegate;
    return G__33978;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__33983 = cljs.core.next.call(null, s);
      var G__33984 = acc + 1;
      s = G__33983;
      acc = G__33984;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__33986 = coll;
      if (G__33986) {
        var bit__4043__auto__ = G__33986.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4043__auto__ || G__33986.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__33987 = cljs.core.next.call(null, coll);
              var G__33988 = n - 1;
              coll = G__33987;
              n = G__33988;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__33989 = cljs.core.next.call(null, coll);
              var G__33990 = n - 1;
              var G__33991 = not_found;
              coll = G__33989;
              n = G__33990;
              not_found = G__33991;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__33996 = coll;
        if (G__33996) {
          var bit__4043__auto__ = G__33996.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4043__auto__ || G__33996.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__33997 = coll;
                  if (G__33997) {
                    var bit__4050__auto__ = G__33997.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4050__auto__ || G__33997.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__33997.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__33997);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__33997);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__33998 = coll;
        if (G__33998) {
          var bit__4043__auto__ = G__33998.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4043__auto__ || G__33998.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__33999 = coll;
                  if (G__33999) {
                    var bit__4050__auto__ = G__33999.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4050__auto__ || G__33999.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__33999.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__33999);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__33999);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__34002 = o;
        if (G__34002) {
          var bit__4043__auto__ = G__34002.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4043__auto__ || G__34002.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__34003 = o;
        if (G__34003) {
          var bit__4043__auto__ = G__34003.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4043__auto__ || G__34003.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__34004__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__34005 = ret;
          var G__34006 = cljs.core.first.call(null, kvs);
          var G__34007 = cljs.core.second.call(null, kvs);
          var G__34008 = cljs.core.nnext.call(null, kvs);
          coll = G__34005;
          k = G__34006;
          v = G__34007;
          kvs = G__34008;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__34004 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34004__delegate.call(this, coll, k, v, kvs);
    };
    G__34004.cljs$lang$maxFixedArity = 3;
    G__34004.cljs$lang$applyTo = function(arglist__34009) {
      var coll = cljs.core.first(arglist__34009);
      arglist__34009 = cljs.core.next(arglist__34009);
      var k = cljs.core.first(arglist__34009);
      arglist__34009 = cljs.core.next(arglist__34009);
      var v = cljs.core.first(arglist__34009);
      var kvs = cljs.core.rest(arglist__34009);
      return G__34004__delegate(coll, k, v, kvs);
    };
    G__34004.cljs$core$IFn$_invoke$arity$variadic = G__34004__delegate;
    return G__34004;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__34010__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__34011 = ret;
            var G__34012 = cljs.core.first.call(null, ks);
            var G__34013 = cljs.core.next.call(null, ks);
            coll = G__34011;
            k = G__34012;
            ks = G__34013;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__34010 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34010__delegate.call(this, coll, k, ks);
    };
    G__34010.cljs$lang$maxFixedArity = 2;
    G__34010.cljs$lang$applyTo = function(arglist__34014) {
      var coll = cljs.core.first(arglist__34014);
      arglist__34014 = cljs.core.next(arglist__34014);
      var k = cljs.core.first(arglist__34014);
      var ks = cljs.core.rest(arglist__34014);
      return G__34010__delegate(coll, k, ks);
    };
    G__34010.cljs$core$IFn$_invoke$arity$variadic = G__34010__delegate;
    return G__34010;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3406__auto__ = goog.isFunction(f);
  if (or__3406__auto__) {
    return or__3406__auto__;
  } else {
    var G__34018 = f;
    if (G__34018) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto____$1 = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto____$1)) {
          return or__3406__auto____$1;
        } else {
          return G__34018.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__34018.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__34018);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__34018);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__34026 = o;
    if (G__34026) {
      var bit__4050__auto__ = G__34026.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4050__auto__ || G__34026.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__34026.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__34026);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__34026);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t34027 !== "undefined") {
      } else {
        cljs.core.t34027 = function(meta, o, with_meta, meta34028) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta34028 = meta34028;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t34027.cljs$lang$type = true;
        cljs.core.t34027.cljs$lang$ctorStr = "cljs.core/t34027";
        cljs.core.t34027.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
          return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/t34027");
        };
        cljs.core.t34027.prototype.call = function() {
          var G__34031__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__34031 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__34031__delegate.call(this, self__, args);
          };
          G__34031.cljs$lang$maxFixedArity = 1;
          G__34031.cljs$lang$applyTo = function(arglist__34032) {
            var self__ = cljs.core.first(arglist__34032);
            var args = cljs.core.rest(arglist__34032);
            return G__34031__delegate(self__, args);
          };
          G__34031.cljs$core$IFn$_invoke$arity$variadic = G__34031__delegate;
          return G__34031;
        }();
        cljs.core.t34027.prototype.apply = function(self__, args34030) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34030)));
        };
        cljs.core.t34027.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__34033__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__34033 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__34033__delegate.call(this, args);
          };
          G__34033.cljs$lang$maxFixedArity = 0;
          G__34033.cljs$lang$applyTo = function(arglist__34034) {
            var args = cljs.core.seq(arglist__34034);
            return G__34033__delegate(args);
          };
          G__34033.cljs$core$IFn$_invoke$arity$variadic = G__34033__delegate;
          return G__34033;
        }();
        cljs.core.t34027.prototype.cljs$core$Fn$ = true;
        cljs.core.t34027.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34029) {
          var self__ = this;
          var _34029__$1 = this;
          return self__.meta34028;
        };
        cljs.core.t34027.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34029, meta34028__$1) {
          var self__ = this;
          var _34029__$1 = this;
          return new cljs.core.t34027(self__.meta, self__.o, self__.with_meta, meta34028__$1);
        };
        cljs.core.__GT_t34027 = function __GT_t34027(meta__$1, o__$1, with_meta__$1, meta34028) {
          return new cljs.core.t34027(meta__$1, o__$1, with_meta__$1, meta34028);
        };
      }
      return new cljs.core.t34027(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3394__auto__ = !(o == null);
    if (and__3394__auto__) {
      var G__34038 = o;
      if (G__34038) {
        var bit__4050__auto__ = G__34038.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4050__auto__ || G__34038.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__34038.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__34038);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__34038);
      }
    } else {
      return and__3394__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__34039__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__34040 = ret;
            var G__34041 = cljs.core.first.call(null, ks);
            var G__34042 = cljs.core.next.call(null, ks);
            coll = G__34040;
            k = G__34041;
            ks = G__34042;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__34039 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34039__delegate.call(this, coll, k, ks);
    };
    G__34039.cljs$lang$maxFixedArity = 2;
    G__34039.cljs$lang$applyTo = function(arglist__34043) {
      var coll = cljs.core.first(arglist__34043);
      arglist__34043 = cljs.core.next(arglist__34043);
      var k = cljs.core.first(arglist__34043);
      var ks = cljs.core.rest(arglist__34043);
      return G__34039__delegate(coll, k, ks);
    };
    G__34039.cljs$core$IFn$_invoke$arity$variadic = G__34039__delegate;
    return G__34039;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj34045 = {};
  return obj34045;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj34049 = {};
      return obj34049;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__34051 = o;
    if (G__34051) {
      var bit__4043__auto__ = G__34051.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4043__auto__ || G__34051.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__34053 = x;
    if (G__34053) {
      var bit__4050__auto__ = G__34053.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4050__auto__ || G__34053.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__34053.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__34053);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__34053);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__34055 = x;
    if (G__34055) {
      var bit__4050__auto__ = G__34055.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4050__auto__ || G__34055.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__34055.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__34055);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__34055);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__34057 = x;
  if (G__34057) {
    var bit__4050__auto__ = G__34057.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4050__auto__ || G__34057.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__34057.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__34057);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__34057);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__34059 = x;
  if (G__34059) {
    var bit__4050__auto__ = G__34059.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4050__auto__ || G__34059.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__34059.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__34059);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__34059);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__34061 = x;
  if (G__34061) {
    var bit__4050__auto__ = G__34061.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4050__auto__ || G__34061.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__34061.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__34061);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__34061);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__34063 = x;
  if (G__34063) {
    var bit__4050__auto__ = G__34063.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4050__auto__ || G__34063.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__34063.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__34063);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__34063);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__34065 = x;
    if (G__34065) {
      var bit__4050__auto__ = G__34065.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4050__auto__ || G__34065.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__34065.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__34065);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__34065);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__34067 = x;
  if (G__34067) {
    var bit__4050__auto__ = G__34067.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4050__auto__ || G__34067.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__34067.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__34067);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__34067);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__34069 = x;
  if (G__34069) {
    var bit__4043__auto__ = G__34069.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4043__auto__ || G__34069.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj34073 = {};
    return obj34073;
  };
  var js_obj__1 = function() {
    var G__34074__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__34074 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__34074__delegate.call(this, keyvals);
    };
    G__34074.cljs$lang$maxFixedArity = 0;
    G__34074.cljs$lang$applyTo = function(arglist__34075) {
      var keyvals = cljs.core.seq(arglist__34075);
      return G__34074__delegate(keyvals);
    };
    G__34074.cljs$core$IFn$_invoke$arity$variadic = G__34074__delegate;
    return G__34074;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__34076 = i__$1 + 1;
      var G__34077 = j__$1 + 1;
      var G__34078 = len__$1 - 1;
      i__$1 = G__34076;
      j__$1 = G__34077;
      len__$1 = G__34078;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__34079 = i__$1 - 1;
      var G__34080 = j__$1 - 1;
      var G__34081 = len__$1 - 1;
      i__$1 = G__34079;
      j__$1 = G__34080;
      len__$1 = G__34081;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj34083 = {};
  return obj34083;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__34085 = s;
    if (G__34085) {
      var bit__4050__auto__ = G__34085.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4050__auto__ || G__34085.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__34085.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__34085);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__34085);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__34087 = s;
  if (G__34087) {
    var bit__4050__auto__ = G__34087.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4050__auto__ || G__34087.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__34087.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__34087);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__34087);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3406__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3406__auto__) {
    return or__3406__auto__;
  } else {
    var G__34091 = f;
    if (G__34091) {
      var bit__4050__auto__ = G__34091.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4050__auto__ || G__34091.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__34091.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__34091);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__34091);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__34092__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__34093 = cljs.core.conj.call(null, s, x__$1);
              var G__34094 = etc;
              s = G__34093;
              xs = G__34094;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__34092 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34092__delegate.call(this, x, y, more);
    };
    G__34092.cljs$lang$maxFixedArity = 2;
    G__34092.cljs$lang$applyTo = function(arglist__34095) {
      var x = cljs.core.first(arglist__34095);
      arglist__34095 = cljs.core.next(arglist__34095);
      var y = cljs.core.first(arglist__34095);
      var more = cljs.core.rest(arglist__34095);
      return G__34092__delegate(x, y, more);
    };
    G__34092.cljs$core$IFn$_invoke$arity$variadic = G__34092__delegate;
    return G__34092;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3406__auto__ = cljs.core.seq.call(null, coll);
    if (or__3406__auto__) {
      return or__3406__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__34097 = x;
            if (G__34097) {
              var bit__4043__auto__ = G__34097.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4043__auto__ || G__34097.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__34098 = xs;
        var G__34099 = ys;
        var G__34100 = len;
        var G__34101 = n + 1;
        xs = G__34098;
        ys = G__34099;
        len = G__34100;
        n = G__34101;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__34102 = nval;
          var G__34103 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__34102;
          coll__$1 = G__34103;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__34106 = coll;
      if (G__34106) {
        var bit__4043__auto__ = G__34106.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4043__auto__ || G__34106.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__34107 = coll;
      if (G__34107) {
        var bit__4043__auto__ = G__34107.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4043__auto__ || G__34107.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__34108__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__34108 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34108__delegate.call(this, x, y, more);
    };
    G__34108.cljs$lang$maxFixedArity = 2;
    G__34108.cljs$lang$applyTo = function(arglist__34109) {
      var x = cljs.core.first(arglist__34109);
      arglist__34109 = cljs.core.next(arglist__34109);
      var y = cljs.core.first(arglist__34109);
      var more = cljs.core.rest(arglist__34109);
      return G__34108__delegate(x, y, more);
    };
    G__34108.cljs$core$IFn$_invoke$arity$variadic = G__34108__delegate;
    return G__34108;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__34110__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__34110 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34110__delegate.call(this, x, y, more);
    };
    G__34110.cljs$lang$maxFixedArity = 2;
    G__34110.cljs$lang$applyTo = function(arglist__34111) {
      var x = cljs.core.first(arglist__34111);
      arglist__34111 = cljs.core.next(arglist__34111);
      var y = cljs.core.first(arglist__34111);
      var more = cljs.core.rest(arglist__34111);
      return G__34110__delegate(x, y, more);
    };
    G__34110.cljs$core$IFn$_invoke$arity$variadic = G__34110__delegate;
    return G__34110;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__34112__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__34112 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34112__delegate.call(this, x, y, more);
    };
    G__34112.cljs$lang$maxFixedArity = 2;
    G__34112.cljs$lang$applyTo = function(arglist__34113) {
      var x = cljs.core.first(arglist__34113);
      arglist__34113 = cljs.core.next(arglist__34113);
      var y = cljs.core.first(arglist__34113);
      var more = cljs.core.rest(arglist__34113);
      return G__34112__delegate(x, y, more);
    };
    G__34112.cljs$core$IFn$_invoke$arity$variadic = G__34112__delegate;
    return G__34112;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__34114__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__34114 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34114__delegate.call(this, x, y, more);
    };
    G__34114.cljs$lang$maxFixedArity = 2;
    G__34114.cljs$lang$applyTo = function(arglist__34115) {
      var x = cljs.core.first(arglist__34115);
      arglist__34115 = cljs.core.next(arglist__34115);
      var y = cljs.core.first(arglist__34115);
      var more = cljs.core.rest(arglist__34115);
      return G__34114__delegate(x, y, more);
    };
    G__34114.cljs$core$IFn$_invoke$arity$variadic = G__34114__delegate;
    return G__34114;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__34116__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__34117 = y;
            var G__34118 = cljs.core.first.call(null, more);
            var G__34119 = cljs.core.next.call(null, more);
            x = G__34117;
            y = G__34118;
            more = G__34119;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__34116 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34116__delegate.call(this, x, y, more);
    };
    G__34116.cljs$lang$maxFixedArity = 2;
    G__34116.cljs$lang$applyTo = function(arglist__34120) {
      var x = cljs.core.first(arglist__34120);
      arglist__34120 = cljs.core.next(arglist__34120);
      var y = cljs.core.first(arglist__34120);
      var more = cljs.core.rest(arglist__34120);
      return G__34116__delegate(x, y, more);
    };
    G__34116.cljs$core$IFn$_invoke$arity$variadic = G__34116__delegate;
    return G__34116;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__34121__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__34122 = y;
            var G__34123 = cljs.core.first.call(null, more);
            var G__34124 = cljs.core.next.call(null, more);
            x = G__34122;
            y = G__34123;
            more = G__34124;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__34121 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34121__delegate.call(this, x, y, more);
    };
    G__34121.cljs$lang$maxFixedArity = 2;
    G__34121.cljs$lang$applyTo = function(arglist__34125) {
      var x = cljs.core.first(arglist__34125);
      arglist__34125 = cljs.core.next(arglist__34125);
      var y = cljs.core.first(arglist__34125);
      var more = cljs.core.rest(arglist__34125);
      return G__34121__delegate(x, y, more);
    };
    G__34121.cljs$core$IFn$_invoke$arity$variadic = G__34121__delegate;
    return G__34121;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__34126__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__34127 = y;
            var G__34128 = cljs.core.first.call(null, more);
            var G__34129 = cljs.core.next.call(null, more);
            x = G__34127;
            y = G__34128;
            more = G__34129;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__34126 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34126__delegate.call(this, x, y, more);
    };
    G__34126.cljs$lang$maxFixedArity = 2;
    G__34126.cljs$lang$applyTo = function(arglist__34130) {
      var x = cljs.core.first(arglist__34130);
      arglist__34130 = cljs.core.next(arglist__34130);
      var y = cljs.core.first(arglist__34130);
      var more = cljs.core.rest(arglist__34130);
      return G__34126__delegate(x, y, more);
    };
    G__34126.cljs$core$IFn$_invoke$arity$variadic = G__34126__delegate;
    return G__34126;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__34131__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__34132 = y;
            var G__34133 = cljs.core.first.call(null, more);
            var G__34134 = cljs.core.next.call(null, more);
            x = G__34132;
            y = G__34133;
            more = G__34134;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__34131 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34131__delegate.call(this, x, y, more);
    };
    G__34131.cljs$lang$maxFixedArity = 2;
    G__34131.cljs$lang$applyTo = function(arglist__34135) {
      var x = cljs.core.first(arglist__34135);
      arglist__34135 = cljs.core.next(arglist__34135);
      var y = cljs.core.first(arglist__34135);
      var more = cljs.core.rest(arglist__34135);
      return G__34131__delegate(x, y, more);
    };
    G__34131.cljs$core$IFn$_invoke$arity$variadic = G__34131__delegate;
    return G__34131;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3713__auto__ = x;
    var y__3714__auto__ = y;
    return x__3713__auto__ > y__3714__auto__ ? x__3713__auto__ : y__3714__auto__;
  };
  var max__3 = function() {
    var G__34136__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3713__auto__ = x;
        var y__3714__auto__ = y;
        return x__3713__auto__ > y__3714__auto__ ? x__3713__auto__ : y__3714__auto__;
      }(), more);
    };
    var G__34136 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34136__delegate.call(this, x, y, more);
    };
    G__34136.cljs$lang$maxFixedArity = 2;
    G__34136.cljs$lang$applyTo = function(arglist__34137) {
      var x = cljs.core.first(arglist__34137);
      arglist__34137 = cljs.core.next(arglist__34137);
      var y = cljs.core.first(arglist__34137);
      var more = cljs.core.rest(arglist__34137);
      return G__34136__delegate(x, y, more);
    };
    G__34136.cljs$core$IFn$_invoke$arity$variadic = G__34136__delegate;
    return G__34136;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3720__auto__ = x;
    var y__3721__auto__ = y;
    return x__3720__auto__ < y__3721__auto__ ? x__3720__auto__ : y__3721__auto__;
  };
  var min__3 = function() {
    var G__34138__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3720__auto__ = x;
        var y__3721__auto__ = y;
        return x__3720__auto__ < y__3721__auto__ ? x__3720__auto__ : y__3721__auto__;
      }(), more);
    };
    var G__34138 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34138__delegate.call(this, x, y, more);
    };
    G__34138.cljs$lang$maxFixedArity = 2;
    G__34138.cljs$lang$applyTo = function(arglist__34139) {
      var x = cljs.core.first(arglist__34139);
      arglist__34139 = cljs.core.next(arglist__34139);
      var y = cljs.core.first(arglist__34139);
      var more = cljs.core.rest(arglist__34139);
      return G__34138__delegate(x, y, more);
    };
    G__34138.cljs$core$IFn$_invoke$arity$variadic = G__34138__delegate;
    return G__34138;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__34140__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__34140 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34140__delegate.call(this, x, y, more);
    };
    G__34140.cljs$lang$maxFixedArity = 2;
    G__34140.cljs$lang$applyTo = function(arglist__34141) {
      var x = cljs.core.first(arglist__34141);
      arglist__34141 = cljs.core.next(arglist__34141);
      var y = cljs.core.first(arglist__34141);
      var more = cljs.core.rest(arglist__34141);
      return G__34140__delegate(x, y, more);
    };
    G__34140.cljs$core$IFn$_invoke$arity$variadic = G__34140__delegate;
    return G__34140;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__34142__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__34142 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34142__delegate.call(this, x, y, more);
    };
    G__34142.cljs$lang$maxFixedArity = 2;
    G__34142.cljs$lang$applyTo = function(arglist__34143) {
      var x = cljs.core.first(arglist__34143);
      arglist__34143 = cljs.core.next(arglist__34143);
      var y = cljs.core.first(arglist__34143);
      var more = cljs.core.rest(arglist__34143);
      return G__34142__delegate(x, y, more);
    };
    G__34142.cljs$core$IFn$_invoke$arity$variadic = G__34142__delegate;
    return G__34142;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__34144__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__34144 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34144__delegate.call(this, x, y, more);
    };
    G__34144.cljs$lang$maxFixedArity = 2;
    G__34144.cljs$lang$applyTo = function(arglist__34145) {
      var x = cljs.core.first(arglist__34145);
      arglist__34145 = cljs.core.next(arglist__34145);
      var y = cljs.core.first(arglist__34145);
      var more = cljs.core.rest(arglist__34145);
      return G__34144__delegate(x, y, more);
    };
    G__34144.cljs$core$IFn$_invoke$arity$variadic = G__34144__delegate;
    return G__34144;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__34146__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__34146 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34146__delegate.call(this, x, y, more);
    };
    G__34146.cljs$lang$maxFixedArity = 2;
    G__34146.cljs$lang$applyTo = function(arglist__34147) {
      var x = cljs.core.first(arglist__34147);
      arglist__34147 = cljs.core.next(arglist__34147);
      var y = cljs.core.first(arglist__34147);
      var more = cljs.core.rest(arglist__34147);
      return G__34146__delegate(x, y, more);
    };
    G__34146.cljs$core$IFn$_invoke$arity$variadic = G__34146__delegate;
    return G__34146;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__34148__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__34148 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34148__delegate.call(this, x, y, more);
    };
    G__34148.cljs$lang$maxFixedArity = 2;
    G__34148.cljs$lang$applyTo = function(arglist__34149) {
      var x = cljs.core.first(arglist__34149);
      arglist__34149 = cljs.core.next(arglist__34149);
      var y = cljs.core.first(arglist__34149);
      var more = cljs.core.rest(arglist__34149);
      return G__34148__delegate(x, y, more);
    };
    G__34148.cljs$core$IFn$_invoke$arity$variadic = G__34148__delegate;
    return G__34148;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__34150__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__34150 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34150__delegate.call(this, x, y, more);
    };
    G__34150.cljs$lang$maxFixedArity = 2;
    G__34150.cljs$lang$applyTo = function(arglist__34151) {
      var x = cljs.core.first(arglist__34151);
      arglist__34151 = cljs.core.next(arglist__34151);
      var y = cljs.core.first(arglist__34151);
      var more = cljs.core.rest(arglist__34151);
      return G__34150__delegate(x, y, more);
    };
    G__34150.cljs$core$IFn$_invoke$arity$variadic = G__34150__delegate;
    return G__34150;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__34152__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__34152 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34152__delegate.call(this, x, y, more);
    };
    G__34152.cljs$lang$maxFixedArity = 2;
    G__34152.cljs$lang$applyTo = function(arglist__34153) {
      var x = cljs.core.first(arglist__34153);
      arglist__34153 = cljs.core.next(arglist__34153);
      var y = cljs.core.first(arglist__34153);
      var more = cljs.core.rest(arglist__34153);
      return G__34152__delegate(x, y, more);
    };
    G__34152.cljs$core$IFn$_invoke$arity$variadic = G__34152__delegate;
    return G__34152;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__34154__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__34155 = y;
            var G__34156 = cljs.core.first.call(null, more);
            var G__34157 = cljs.core.next.call(null, more);
            x = G__34155;
            y = G__34156;
            more = G__34157;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__34154 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34154__delegate.call(this, x, y, more);
    };
    G__34154.cljs$lang$maxFixedArity = 2;
    G__34154.cljs$lang$applyTo = function(arglist__34158) {
      var x = cljs.core.first(arglist__34158);
      arglist__34158 = cljs.core.next(arglist__34158);
      var y = cljs.core.first(arglist__34158);
      var more = cljs.core.rest(arglist__34158);
      return G__34154__delegate(x, y, more);
    };
    G__34154.cljs$core$IFn$_invoke$arity$variadic = G__34154__delegate;
    return G__34154;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__34159 = n__$1 - 1;
      var G__34160 = cljs.core.next.call(null, xs);
      n__$1 = G__34159;
      xs = G__34160;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__34161__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__34162 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__34163 = cljs.core.next.call(null, more);
          sb = G__34162;
          more = G__34163;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__34161 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__34161__delegate.call(this, x, ys);
    };
    G__34161.cljs$lang$maxFixedArity = 1;
    G__34161.cljs$lang$applyTo = function(arglist__34164) {
      var x = cljs.core.first(arglist__34164);
      var ys = cljs.core.rest(arglist__34164);
      return G__34161__delegate(x, ys);
    };
    G__34161.cljs$core$IFn$_invoke$arity$variadic = G__34161__delegate;
    return G__34161;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__34165 = cljs.core.next.call(null, xs);
            var G__34166 = cljs.core.next.call(null, ys);
            xs = G__34165;
            ys = G__34166;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__34167 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__34168 = cljs.core.next.call(null, s);
        res = G__34167;
        s = G__34168;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__34169 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__34170 = cljs.core.next.call(null, s);
      h = G__34169;
      s = G__34170;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__34171 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__34172 = cljs.core.next.call(null, s__$1);
      h = G__34171;
      s__$1 = G__34172;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__34179_34185 = cljs.core.seq.call(null, fn_map);
  var chunk__34180_34186 = null;
  var count__34181_34187 = 0;
  var i__34182_34188 = 0;
  while (true) {
    if (i__34182_34188 < count__34181_34187) {
      var vec__34183_34189 = cljs.core._nth.call(null, chunk__34180_34186, i__34182_34188);
      var key_name_34190 = cljs.core.nth.call(null, vec__34183_34189, 0, null);
      var f_34191 = cljs.core.nth.call(null, vec__34183_34189, 1, null);
      var str_name_34192 = cljs.core.name.call(null, key_name_34190);
      obj[str_name_34192] = f_34191;
      var G__34193 = seq__34179_34185;
      var G__34194 = chunk__34180_34186;
      var G__34195 = count__34181_34187;
      var G__34196 = i__34182_34188 + 1;
      seq__34179_34185 = G__34193;
      chunk__34180_34186 = G__34194;
      count__34181_34187 = G__34195;
      i__34182_34188 = G__34196;
      continue;
    } else {
      var temp__4092__auto___34197 = cljs.core.seq.call(null, seq__34179_34185);
      if (temp__4092__auto___34197) {
        var seq__34179_34198__$1 = temp__4092__auto___34197;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__34179_34198__$1)) {
          var c__4148__auto___34199 = cljs.core.chunk_first.call(null, seq__34179_34198__$1);
          var G__34200 = cljs.core.chunk_rest.call(null, seq__34179_34198__$1);
          var G__34201 = c__4148__auto___34199;
          var G__34202 = cljs.core.count.call(null, c__4148__auto___34199);
          var G__34203 = 0;
          seq__34179_34185 = G__34200;
          chunk__34180_34186 = G__34201;
          count__34181_34187 = G__34202;
          i__34182_34188 = G__34203;
          continue;
        } else {
          var vec__34184_34204 = cljs.core.first.call(null, seq__34179_34198__$1);
          var key_name_34205 = cljs.core.nth.call(null, vec__34184_34204, 0, null);
          var f_34206 = cljs.core.nth.call(null, vec__34184_34204, 1, null);
          var str_name_34207 = cljs.core.name.call(null, key_name_34205);
          obj[str_name_34207] = f_34206;
          var G__34208 = cljs.core.next.call(null, seq__34179_34198__$1);
          var G__34209 = null;
          var G__34210 = 0;
          var G__34211 = 0;
          seq__34179_34185 = G__34208;
          chunk__34180_34186 = G__34209;
          count__34181_34187 = G__34210;
          i__34182_34188 = G__34211;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__34213 = coll;
  if (G__34213) {
    var bit__4050__auto__ = G__34213.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4050__auto__ || G__34213.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__34213.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__34213);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__34213);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__34214 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__34214;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__34215 = i - 1;
        var G__34216 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__34215;
        r = G__34216;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__34217) {
    var xs = cljs.core.seq(arglist__34217);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3406__auto__ = coll == null;
    if (or__3406__auto__) {
      return or__3406__auto__;
    } else {
      var G__34221 = coll;
      if (G__34221) {
        var bit__4043__auto__ = G__34221.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4043__auto__ || G__34221.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__34223 = x;
  if (G__34223) {
    var bit__4050__auto__ = G__34223.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4050__auto__ || G__34223.cljs$core$IList$) {
      return true;
    } else {
      if (!G__34223.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__34223);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__34223);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__34225 = null;
  var G__34225__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__34225__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__34225 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34225__2.call(this, self__, coll);
      case 3:
        return G__34225__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34225;
}();
cljs.core.Keyword.prototype.apply = function(self__, args34224) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34224)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__34227 = x;
    if (G__34227) {
      var bit__4043__auto__ = G__34227.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4043__auto__ || G__34227.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__34228 = ls.sval();
        ls = G__34228;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__34230 = s;
    if (G__34230) {
      var bit__4043__auto__ = G__34230.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4043__auto__ || G__34230.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__34231 = cljs.core.next.call(null, s__$1);
      s__$1 = G__34231;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_34232 = 0;
  var xs_34233 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_34233) {
      ret[i_34232] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_34233));
      var G__34234 = i_34232 + 1;
      var G__34235 = cljs.core.next.call(null, xs_34233);
      i_34232 = G__34234;
      xs_34233 = G__34235;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__34236 = i + 1;
          var G__34237 = cljs.core.next.call(null, s__$1);
          i = G__34236;
          s__$1 = G__34237;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4248__auto___34238 = size;
      var i_34239 = 0;
      while (true) {
        if (i_34239 < n__4248__auto___34238) {
          a[i_34239] = init_val_or_seq;
          var G__34240 = i_34239 + 1;
          i_34239 = G__34240;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__34241 = i + 1;
          var G__34242 = cljs.core.next.call(null, s__$1);
          i = G__34241;
          s__$1 = G__34242;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4248__auto___34243 = size;
      var i_34244 = 0;
      while (true) {
        if (i_34244 < n__4248__auto___34243) {
          a[i_34244] = init_val_or_seq;
          var G__34245 = i_34244 + 1;
          i_34244 = G__34245;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__34246 = i + 1;
          var G__34247 = cljs.core.next.call(null, s__$1);
          i = G__34246;
          s__$1 = G__34247;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4248__auto___34248 = size;
      var i_34249 = 0;
      while (true) {
        if (i_34249 < n__4248__auto___34248) {
          a[i_34249] = init_val_or_seq;
          var G__34250 = i_34249 + 1;
          i_34249 = G__34250;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__34251 = i + 1;
          var G__34252 = cljs.core.next.call(null, s__$1);
          i = G__34251;
          s__$1 = G__34252;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4248__auto___34253 = size;
      var i_34254 = 0;
      while (true) {
        if (i_34254 < n__4248__auto___34253) {
          a[i_34254] = init_val_or_seq;
          var G__34255 = i_34254 + 1;
          i_34254 = G__34255;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__34256 = cljs.core.next.call(null, s__$1);
        var G__34257 = i - 1;
        var G__34258 = sum + 1;
        s__$1 = G__34256;
        i = G__34257;
        sum = G__34258;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__34259__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__34259 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34259__delegate.call(this, x, y, zs);
    };
    G__34259.cljs$lang$maxFixedArity = 2;
    G__34259.cljs$lang$applyTo = function(arglist__34260) {
      var x = cljs.core.first(arglist__34260);
      arglist__34260 = cljs.core.next(arglist__34260);
      var y = cljs.core.first(arglist__34260);
      var zs = cljs.core.rest(arglist__34260);
      return G__34259__delegate(x, y, zs);
    };
    G__34259.cljs$core$IFn$_invoke$arity$variadic = G__34259__delegate;
    return G__34259;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__34261__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__34261 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__34261__delegate.call(this, a, b, c, d, more);
    };
    G__34261.cljs$lang$maxFixedArity = 4;
    G__34261.cljs$lang$applyTo = function(arglist__34262) {
      var a = cljs.core.first(arglist__34262);
      arglist__34262 = cljs.core.next(arglist__34262);
      var b = cljs.core.first(arglist__34262);
      arglist__34262 = cljs.core.next(arglist__34262);
      var c = cljs.core.first(arglist__34262);
      arglist__34262 = cljs.core.next(arglist__34262);
      var d = cljs.core.first(arglist__34262);
      var more = cljs.core.rest(arglist__34262);
      return G__34261__delegate(a, b, c, d, more);
    };
    G__34261.cljs$core$IFn$_invoke$arity$variadic = G__34261__delegate;
    return G__34261;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__34263__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__34263 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__34263__delegate.call(this, f, a, b, c, d, args);
    };
    G__34263.cljs$lang$maxFixedArity = 5;
    G__34263.cljs$lang$applyTo = function(arglist__34264) {
      var f = cljs.core.first(arglist__34264);
      arglist__34264 = cljs.core.next(arglist__34264);
      var a = cljs.core.first(arglist__34264);
      arglist__34264 = cljs.core.next(arglist__34264);
      var b = cljs.core.first(arglist__34264);
      arglist__34264 = cljs.core.next(arglist__34264);
      var c = cljs.core.first(arglist__34264);
      arglist__34264 = cljs.core.next(arglist__34264);
      var d = cljs.core.first(arglist__34264);
      var args = cljs.core.rest(arglist__34264);
      return G__34263__delegate(f, a, b, c, d, args);
    };
    G__34263.cljs$core$IFn$_invoke$arity$variadic = G__34263__delegate;
    return G__34263;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__34265__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__34265 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__34265__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__34265.cljs$lang$maxFixedArity = 6;
    G__34265.cljs$lang$applyTo = function(arglist__34266) {
      var obj = cljs.core.first(arglist__34266);
      arglist__34266 = cljs.core.next(arglist__34266);
      var f = cljs.core.first(arglist__34266);
      arglist__34266 = cljs.core.next(arglist__34266);
      var a = cljs.core.first(arglist__34266);
      arglist__34266 = cljs.core.next(arglist__34266);
      var b = cljs.core.first(arglist__34266);
      arglist__34266 = cljs.core.next(arglist__34266);
      var c = cljs.core.first(arglist__34266);
      arglist__34266 = cljs.core.next(arglist__34266);
      var d = cljs.core.first(arglist__34266);
      var args = cljs.core.rest(arglist__34266);
      return G__34265__delegate(obj, f, a, b, c, d, args);
    };
    G__34265.cljs$core$IFn$_invoke$arity$variadic = G__34265__delegate;
    return G__34265;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__34267__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__34267 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34267__delegate.call(this, x, y, more);
    };
    G__34267.cljs$lang$maxFixedArity = 2;
    G__34267.cljs$lang$applyTo = function(arglist__34268) {
      var x = cljs.core.first(arglist__34268);
      arglist__34268 = cljs.core.next(arglist__34268);
      var y = cljs.core.first(arglist__34268);
      var more = cljs.core.rest(arglist__34268);
      return G__34267__delegate(x, y, more);
    };
    G__34267.cljs$core$IFn$_invoke$arity$variadic = G__34267__delegate;
    return G__34267;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__34269 = pred;
        var G__34270 = cljs.core.next.call(null, coll);
        pred = G__34269;
        coll = G__34270;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3406__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        var G__34271 = pred;
        var G__34272 = cljs.core.next.call(null, coll);
        pred = G__34271;
        coll = G__34272;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__34273 = null;
    var G__34273__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__34273__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__34273__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__34273__3 = function() {
      var G__34274__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__34274 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__34274__delegate.call(this, x, y, zs);
      };
      G__34274.cljs$lang$maxFixedArity = 2;
      G__34274.cljs$lang$applyTo = function(arglist__34275) {
        var x = cljs.core.first(arglist__34275);
        arglist__34275 = cljs.core.next(arglist__34275);
        var y = cljs.core.first(arglist__34275);
        var zs = cljs.core.rest(arglist__34275);
        return G__34274__delegate(x, y, zs);
      };
      G__34274.cljs$core$IFn$_invoke$arity$variadic = G__34274__delegate;
      return G__34274;
    }();
    G__34273 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__34273__0.call(this);
        case 1:
          return G__34273__1.call(this, x);
        case 2:
          return G__34273__2.call(this, x, y);
        default:
          return G__34273__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__34273.cljs$lang$maxFixedArity = 2;
    G__34273.cljs$lang$applyTo = G__34273__3.cljs$lang$applyTo;
    return G__34273;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__34276__delegate = function(args) {
      return x;
    };
    var G__34276 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__34276__delegate.call(this, args);
    };
    G__34276.cljs$lang$maxFixedArity = 0;
    G__34276.cljs$lang$applyTo = function(arglist__34277) {
      var args = cljs.core.seq(arglist__34277);
      return G__34276__delegate(args);
    };
    G__34276.cljs$core$IFn$_invoke$arity$variadic = G__34276__delegate;
    return G__34276;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__34278 = null;
      var G__34278__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__34278__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__34278__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__34278__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__34278__4 = function() {
        var G__34279__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__34279 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34279__delegate.call(this, x, y, z, args);
        };
        G__34279.cljs$lang$maxFixedArity = 3;
        G__34279.cljs$lang$applyTo = function(arglist__34280) {
          var x = cljs.core.first(arglist__34280);
          arglist__34280 = cljs.core.next(arglist__34280);
          var y = cljs.core.first(arglist__34280);
          arglist__34280 = cljs.core.next(arglist__34280);
          var z = cljs.core.first(arglist__34280);
          var args = cljs.core.rest(arglist__34280);
          return G__34279__delegate(x, y, z, args);
        };
        G__34279.cljs$core$IFn$_invoke$arity$variadic = G__34279__delegate;
        return G__34279;
      }();
      G__34278 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34278__0.call(this);
          case 1:
            return G__34278__1.call(this, x);
          case 2:
            return G__34278__2.call(this, x, y);
          case 3:
            return G__34278__3.call(this, x, y, z);
          default:
            return G__34278__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34278.cljs$lang$maxFixedArity = 3;
      G__34278.cljs$lang$applyTo = G__34278__4.cljs$lang$applyTo;
      return G__34278;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__34281 = null;
      var G__34281__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__34281__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__34281__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__34281__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__34281__4 = function() {
        var G__34282__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__34282 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34282__delegate.call(this, x, y, z, args);
        };
        G__34282.cljs$lang$maxFixedArity = 3;
        G__34282.cljs$lang$applyTo = function(arglist__34283) {
          var x = cljs.core.first(arglist__34283);
          arglist__34283 = cljs.core.next(arglist__34283);
          var y = cljs.core.first(arglist__34283);
          arglist__34283 = cljs.core.next(arglist__34283);
          var z = cljs.core.first(arglist__34283);
          var args = cljs.core.rest(arglist__34283);
          return G__34282__delegate(x, y, z, args);
        };
        G__34282.cljs$core$IFn$_invoke$arity$variadic = G__34282__delegate;
        return G__34282;
      }();
      G__34281 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34281__0.call(this);
          case 1:
            return G__34281__1.call(this, x);
          case 2:
            return G__34281__2.call(this, x, y);
          case 3:
            return G__34281__3.call(this, x, y, z);
          default:
            return G__34281__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34281.cljs$lang$maxFixedArity = 3;
      G__34281.cljs$lang$applyTo = G__34281__4.cljs$lang$applyTo;
      return G__34281;
    }();
  };
  var comp__4 = function() {
    var G__34284__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__34285__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__34286 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__34287 = cljs.core.next.call(null, fs__$2);
              ret = G__34286;
              fs__$2 = G__34287;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__34285 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__34285__delegate.call(this, args);
        };
        G__34285.cljs$lang$maxFixedArity = 0;
        G__34285.cljs$lang$applyTo = function(arglist__34288) {
          var args = cljs.core.seq(arglist__34288);
          return G__34285__delegate(args);
        };
        G__34285.cljs$core$IFn$_invoke$arity$variadic = G__34285__delegate;
        return G__34285;
      }();
    };
    var G__34284 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34284__delegate.call(this, f1, f2, f3, fs);
    };
    G__34284.cljs$lang$maxFixedArity = 3;
    G__34284.cljs$lang$applyTo = function(arglist__34289) {
      var f1 = cljs.core.first(arglist__34289);
      arglist__34289 = cljs.core.next(arglist__34289);
      var f2 = cljs.core.first(arglist__34289);
      arglist__34289 = cljs.core.next(arglist__34289);
      var f3 = cljs.core.first(arglist__34289);
      var fs = cljs.core.rest(arglist__34289);
      return G__34284__delegate(f1, f2, f3, fs);
    };
    G__34284.cljs$core$IFn$_invoke$arity$variadic = G__34284__delegate;
    return G__34284;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__34290__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__34290 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__34290__delegate.call(this, args);
      };
      G__34290.cljs$lang$maxFixedArity = 0;
      G__34290.cljs$lang$applyTo = function(arglist__34291) {
        var args = cljs.core.seq(arglist__34291);
        return G__34290__delegate(args);
      };
      G__34290.cljs$core$IFn$_invoke$arity$variadic = G__34290__delegate;
      return G__34290;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__34292__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__34292 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__34292__delegate.call(this, args);
      };
      G__34292.cljs$lang$maxFixedArity = 0;
      G__34292.cljs$lang$applyTo = function(arglist__34293) {
        var args = cljs.core.seq(arglist__34293);
        return G__34292__delegate(args);
      };
      G__34292.cljs$core$IFn$_invoke$arity$variadic = G__34292__delegate;
      return G__34292;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__34294__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__34294 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__34294__delegate.call(this, args);
      };
      G__34294.cljs$lang$maxFixedArity = 0;
      G__34294.cljs$lang$applyTo = function(arglist__34295) {
        var args = cljs.core.seq(arglist__34295);
        return G__34294__delegate(args);
      };
      G__34294.cljs$core$IFn$_invoke$arity$variadic = G__34294__delegate;
      return G__34294;
    }();
  };
  var partial__5 = function() {
    var G__34296__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__34297__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__34297 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__34297__delegate.call(this, args);
        };
        G__34297.cljs$lang$maxFixedArity = 0;
        G__34297.cljs$lang$applyTo = function(arglist__34298) {
          var args = cljs.core.seq(arglist__34298);
          return G__34297__delegate(args);
        };
        G__34297.cljs$core$IFn$_invoke$arity$variadic = G__34297__delegate;
        return G__34297;
      }();
    };
    var G__34296 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__34296__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__34296.cljs$lang$maxFixedArity = 4;
    G__34296.cljs$lang$applyTo = function(arglist__34299) {
      var f = cljs.core.first(arglist__34299);
      arglist__34299 = cljs.core.next(arglist__34299);
      var arg1 = cljs.core.first(arglist__34299);
      arglist__34299 = cljs.core.next(arglist__34299);
      var arg2 = cljs.core.first(arglist__34299);
      arglist__34299 = cljs.core.next(arglist__34299);
      var arg3 = cljs.core.first(arglist__34299);
      var more = cljs.core.rest(arglist__34299);
      return G__34296__delegate(f, arg1, arg2, arg3, more);
    };
    G__34296.cljs$core$IFn$_invoke$arity$variadic = G__34296__delegate;
    return G__34296;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__34300 = null;
      var G__34300__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__34300__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__34300__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__34300__4 = function() {
        var G__34301__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__34301 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34301__delegate.call(this, a, b, c, ds);
        };
        G__34301.cljs$lang$maxFixedArity = 3;
        G__34301.cljs$lang$applyTo = function(arglist__34302) {
          var a = cljs.core.first(arglist__34302);
          arglist__34302 = cljs.core.next(arglist__34302);
          var b = cljs.core.first(arglist__34302);
          arglist__34302 = cljs.core.next(arglist__34302);
          var c = cljs.core.first(arglist__34302);
          var ds = cljs.core.rest(arglist__34302);
          return G__34301__delegate(a, b, c, ds);
        };
        G__34301.cljs$core$IFn$_invoke$arity$variadic = G__34301__delegate;
        return G__34301;
      }();
      G__34300 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__34300__1.call(this, a);
          case 2:
            return G__34300__2.call(this, a, b);
          case 3:
            return G__34300__3.call(this, a, b, c);
          default:
            return G__34300__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34300.cljs$lang$maxFixedArity = 3;
      G__34300.cljs$lang$applyTo = G__34300__4.cljs$lang$applyTo;
      return G__34300;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__34303 = null;
      var G__34303__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__34303__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__34303__4 = function() {
        var G__34304__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__34304 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34304__delegate.call(this, a, b, c, ds);
        };
        G__34304.cljs$lang$maxFixedArity = 3;
        G__34304.cljs$lang$applyTo = function(arglist__34305) {
          var a = cljs.core.first(arglist__34305);
          arglist__34305 = cljs.core.next(arglist__34305);
          var b = cljs.core.first(arglist__34305);
          arglist__34305 = cljs.core.next(arglist__34305);
          var c = cljs.core.first(arglist__34305);
          var ds = cljs.core.rest(arglist__34305);
          return G__34304__delegate(a, b, c, ds);
        };
        G__34304.cljs$core$IFn$_invoke$arity$variadic = G__34304__delegate;
        return G__34304;
      }();
      G__34303 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__34303__2.call(this, a, b);
          case 3:
            return G__34303__3.call(this, a, b, c);
          default:
            return G__34303__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34303.cljs$lang$maxFixedArity = 3;
      G__34303.cljs$lang$applyTo = G__34303__4.cljs$lang$applyTo;
      return G__34303;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__34306 = null;
      var G__34306__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__34306__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__34306__4 = function() {
        var G__34307__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__34307 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34307__delegate.call(this, a, b, c, ds);
        };
        G__34307.cljs$lang$maxFixedArity = 3;
        G__34307.cljs$lang$applyTo = function(arglist__34308) {
          var a = cljs.core.first(arglist__34308);
          arglist__34308 = cljs.core.next(arglist__34308);
          var b = cljs.core.first(arglist__34308);
          arglist__34308 = cljs.core.next(arglist__34308);
          var c = cljs.core.first(arglist__34308);
          var ds = cljs.core.rest(arglist__34308);
          return G__34307__delegate(a, b, c, ds);
        };
        G__34307.cljs$core$IFn$_invoke$arity$variadic = G__34307__delegate;
        return G__34307;
      }();
      G__34306 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__34306__2.call(this, a, b);
          case 3:
            return G__34306__3.call(this, a, b, c);
          default:
            return G__34306__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34306.cljs$lang$maxFixedArity = 3;
      G__34306.cljs$lang$applyTo = G__34306__4.cljs$lang$applyTo;
      return G__34306;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4248__auto___34309 = size;
          var i_34310 = 0;
          while (true) {
            if (i_34310 < n__4248__auto___34309) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_34310, cljs.core._nth.call(null, c, i_34310)));
              var G__34311 = i_34310 + 1;
              i_34310 = G__34311;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4248__auto___34312 = size;
        var i_34313 = 0;
        while (true) {
          if (i_34313 < n__4248__auto___34312) {
            var x_34314 = f.call(null, cljs.core._nth.call(null, c, i_34313));
            if (x_34314 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_34314);
            }
            var G__34315 = i_34313 + 1;
            i_34313 = G__34315;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4248__auto___34316 = size;
          var i_34317 = 0;
          while (true) {
            if (i_34317 < n__4248__auto___34316) {
              var x_34318 = f.call(null, idx + i_34317, cljs.core._nth.call(null, c, i_34317));
              if (x_34318 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_34318);
              }
              var G__34319 = i_34317 + 1;
              i_34317 = G__34319;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            return p.call(null, y);
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__34326__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__34326 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34326__delegate.call(this, x, y, z, args);
        };
        G__34326.cljs$lang$maxFixedArity = 3;
        G__34326.cljs$lang$applyTo = function(arglist__34327) {
          var x = cljs.core.first(arglist__34327);
          arglist__34327 = cljs.core.next(arglist__34327);
          var y = cljs.core.first(arglist__34327);
          arglist__34327 = cljs.core.next(arglist__34327);
          var z = cljs.core.first(arglist__34327);
          var args = cljs.core.rest(arglist__34327);
          return G__34326__delegate(x, y, z, args);
        };
        G__34326.cljs$core$IFn$_invoke$arity$variadic = G__34326__delegate;
        return G__34326;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              var and__3394__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3394__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3394__auto____$2;
              }
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              var and__3394__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3394__auto____$2)) {
                var and__3394__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3394__auto____$3)) {
                  var and__3394__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3394__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3394__auto____$4;
                  }
                } else {
                  return and__3394__auto____$3;
                }
              } else {
                return and__3394__auto____$2;
              }
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__34328__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__34320_SHARP_) {
            var and__3394__auto__ = p1.call(null, p1__34320_SHARP_);
            if (cljs.core.truth_(and__3394__auto__)) {
              return p2.call(null, p1__34320_SHARP_);
            } else {
              return and__3394__auto__;
            }
          }, args));
        };
        var G__34328 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34328__delegate.call(this, x, y, z, args);
        };
        G__34328.cljs$lang$maxFixedArity = 3;
        G__34328.cljs$lang$applyTo = function(arglist__34329) {
          var x = cljs.core.first(arglist__34329);
          arglist__34329 = cljs.core.next(arglist__34329);
          var y = cljs.core.first(arglist__34329);
          arglist__34329 = cljs.core.next(arglist__34329);
          var z = cljs.core.first(arglist__34329);
          var args = cljs.core.rest(arglist__34329);
          return G__34328__delegate(x, y, z, args);
        };
        G__34328.cljs$core$IFn$_invoke$arity$variadic = G__34328__delegate;
        return G__34328;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              var and__3394__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3394__auto____$2)) {
                var and__3394__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3394__auto____$3)) {
                  var and__3394__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3394__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3394__auto____$4;
                  }
                } else {
                  return and__3394__auto____$3;
                }
              } else {
                return and__3394__auto____$2;
              }
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3394__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3394__auto____$1)) {
              var and__3394__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3394__auto____$2)) {
                var and__3394__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3394__auto____$3)) {
                  var and__3394__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3394__auto____$4)) {
                    var and__3394__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3394__auto____$5)) {
                      var and__3394__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3394__auto____$6)) {
                        var and__3394__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3394__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3394__auto____$7;
                        }
                      } else {
                        return and__3394__auto____$6;
                      }
                    } else {
                      return and__3394__auto____$5;
                    }
                  } else {
                    return and__3394__auto____$4;
                  }
                } else {
                  return and__3394__auto____$3;
                }
              } else {
                return and__3394__auto____$2;
              }
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__34330__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__34321_SHARP_) {
            var and__3394__auto__ = p1.call(null, p1__34321_SHARP_);
            if (cljs.core.truth_(and__3394__auto__)) {
              var and__3394__auto____$1 = p2.call(null, p1__34321_SHARP_);
              if (cljs.core.truth_(and__3394__auto____$1)) {
                return p3.call(null, p1__34321_SHARP_);
              } else {
                return and__3394__auto____$1;
              }
            } else {
              return and__3394__auto__;
            }
          }, args));
        };
        var G__34330 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34330__delegate.call(this, x, y, z, args);
        };
        G__34330.cljs$lang$maxFixedArity = 3;
        G__34330.cljs$lang$applyTo = function(arglist__34331) {
          var x = cljs.core.first(arglist__34331);
          arglist__34331 = cljs.core.next(arglist__34331);
          var y = cljs.core.first(arglist__34331);
          arglist__34331 = cljs.core.next(arglist__34331);
          var z = cljs.core.first(arglist__34331);
          var args = cljs.core.rest(arglist__34331);
          return G__34330__delegate(x, y, z, args);
        };
        G__34330.cljs$core$IFn$_invoke$arity$variadic = G__34330__delegate;
        return G__34330;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__34332__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__34322_SHARP_) {
            return p1__34322_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__34323_SHARP_) {
            var and__3394__auto__ = p1__34323_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3394__auto__)) {
              return p1__34323_SHARP_.call(null, y);
            } else {
              return and__3394__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__34324_SHARP_) {
            var and__3394__auto__ = p1__34324_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3394__auto__)) {
              var and__3394__auto____$1 = p1__34324_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3394__auto____$1)) {
                return p1__34324_SHARP_.call(null, z);
              } else {
                return and__3394__auto____$1;
              }
            } else {
              return and__3394__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__34333__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__34325_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__34325_SHARP_, args);
            }, ps__$1));
          };
          var G__34333 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__34333__delegate.call(this, x, y, z, args);
          };
          G__34333.cljs$lang$maxFixedArity = 3;
          G__34333.cljs$lang$applyTo = function(arglist__34334) {
            var x = cljs.core.first(arglist__34334);
            arglist__34334 = cljs.core.next(arglist__34334);
            var y = cljs.core.first(arglist__34334);
            arglist__34334 = cljs.core.next(arglist__34334);
            var z = cljs.core.first(arglist__34334);
            var args = cljs.core.rest(arglist__34334);
            return G__34333__delegate(x, y, z, args);
          };
          G__34333.cljs$core$IFn$_invoke$arity$variadic = G__34333__delegate;
          return G__34333;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__34332 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34332__delegate.call(this, p1, p2, p3, ps);
    };
    G__34332.cljs$lang$maxFixedArity = 3;
    G__34332.cljs$lang$applyTo = function(arglist__34335) {
      var p1 = cljs.core.first(arglist__34335);
      arglist__34335 = cljs.core.next(arglist__34335);
      var p2 = cljs.core.first(arglist__34335);
      arglist__34335 = cljs.core.next(arglist__34335);
      var p3 = cljs.core.first(arglist__34335);
      var ps = cljs.core.rest(arglist__34335);
      return G__34332__delegate(p1, p2, p3, ps);
    };
    G__34332.cljs$core$IFn$_invoke$arity$variadic = G__34332__delegate;
    return G__34332;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3406__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3406__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__34342__delegate = function(x, y, z, args) {
          var or__3406__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__34342 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34342__delegate.call(this, x, y, z, args);
        };
        G__34342.cljs$lang$maxFixedArity = 3;
        G__34342.cljs$lang$applyTo = function(arglist__34343) {
          var x = cljs.core.first(arglist__34343);
          arglist__34343 = cljs.core.next(arglist__34343);
          var y = cljs.core.first(arglist__34343);
          arglist__34343 = cljs.core.next(arglist__34343);
          var z = cljs.core.first(arglist__34343);
          var args = cljs.core.rest(arglist__34343);
          return G__34342__delegate(x, y, z, args);
        };
        G__34342.cljs$core$IFn$_invoke$arity$variadic = G__34342__delegate;
        return G__34342;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            var or__3406__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3406__auto____$2)) {
              return or__3406__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            var or__3406__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3406__auto____$2)) {
              return or__3406__auto____$2;
            } else {
              var or__3406__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3406__auto____$3)) {
                return or__3406__auto____$3;
              } else {
                var or__3406__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3406__auto____$4)) {
                  return or__3406__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__34344__delegate = function(x, y, z, args) {
          var or__3406__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__34336_SHARP_) {
              var or__3406__auto____$1 = p1.call(null, p1__34336_SHARP_);
              if (cljs.core.truth_(or__3406__auto____$1)) {
                return or__3406__auto____$1;
              } else {
                return p2.call(null, p1__34336_SHARP_);
              }
            }, args);
          }
        };
        var G__34344 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34344__delegate.call(this, x, y, z, args);
        };
        G__34344.cljs$lang$maxFixedArity = 3;
        G__34344.cljs$lang$applyTo = function(arglist__34345) {
          var x = cljs.core.first(arglist__34345);
          arglist__34345 = cljs.core.next(arglist__34345);
          var y = cljs.core.first(arglist__34345);
          arglist__34345 = cljs.core.next(arglist__34345);
          var z = cljs.core.first(arglist__34345);
          var args = cljs.core.rest(arglist__34345);
          return G__34344__delegate(x, y, z, args);
        };
        G__34344.cljs$core$IFn$_invoke$arity$variadic = G__34344__delegate;
        return G__34344;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            var or__3406__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3406__auto____$2)) {
              return or__3406__auto____$2;
            } else {
              var or__3406__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3406__auto____$3)) {
                return or__3406__auto____$3;
              } else {
                var or__3406__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3406__auto____$4)) {
                  return or__3406__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3406__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            var or__3406__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3406__auto____$2)) {
              return or__3406__auto____$2;
            } else {
              var or__3406__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3406__auto____$3)) {
                return or__3406__auto____$3;
              } else {
                var or__3406__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3406__auto____$4)) {
                  return or__3406__auto____$4;
                } else {
                  var or__3406__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3406__auto____$5)) {
                    return or__3406__auto____$5;
                  } else {
                    var or__3406__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3406__auto____$6)) {
                      return or__3406__auto____$6;
                    } else {
                      var or__3406__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3406__auto____$7)) {
                        return or__3406__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__34346__delegate = function(x, y, z, args) {
          var or__3406__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__34337_SHARP_) {
              var or__3406__auto____$1 = p1.call(null, p1__34337_SHARP_);
              if (cljs.core.truth_(or__3406__auto____$1)) {
                return or__3406__auto____$1;
              } else {
                var or__3406__auto____$2 = p2.call(null, p1__34337_SHARP_);
                if (cljs.core.truth_(or__3406__auto____$2)) {
                  return or__3406__auto____$2;
                } else {
                  return p3.call(null, p1__34337_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__34346 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34346__delegate.call(this, x, y, z, args);
        };
        G__34346.cljs$lang$maxFixedArity = 3;
        G__34346.cljs$lang$applyTo = function(arglist__34347) {
          var x = cljs.core.first(arglist__34347);
          arglist__34347 = cljs.core.next(arglist__34347);
          var y = cljs.core.first(arglist__34347);
          arglist__34347 = cljs.core.next(arglist__34347);
          var z = cljs.core.first(arglist__34347);
          var args = cljs.core.rest(arglist__34347);
          return G__34346__delegate(x, y, z, args);
        };
        G__34346.cljs$core$IFn$_invoke$arity$variadic = G__34346__delegate;
        return G__34346;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__34348__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__34338_SHARP_) {
            return p1__34338_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__34339_SHARP_) {
            var or__3406__auto__ = p1__34339_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return p1__34339_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__34340_SHARP_) {
            var or__3406__auto__ = p1__34340_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              var or__3406__auto____$1 = p1__34340_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3406__auto____$1)) {
                return or__3406__auto____$1;
              } else {
                return p1__34340_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__34349__delegate = function(x, y, z, args) {
            var or__3406__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__34341_SHARP_) {
                return cljs.core.some.call(null, p1__34341_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__34349 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__34349__delegate.call(this, x, y, z, args);
          };
          G__34349.cljs$lang$maxFixedArity = 3;
          G__34349.cljs$lang$applyTo = function(arglist__34350) {
            var x = cljs.core.first(arglist__34350);
            arglist__34350 = cljs.core.next(arglist__34350);
            var y = cljs.core.first(arglist__34350);
            arglist__34350 = cljs.core.next(arglist__34350);
            var z = cljs.core.first(arglist__34350);
            var args = cljs.core.rest(arglist__34350);
            return G__34349__delegate(x, y, z, args);
          };
          G__34349.cljs$core$IFn$_invoke$arity$variadic = G__34349__delegate;
          return G__34349;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__34348 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34348__delegate.call(this, p1, p2, p3, ps);
    };
    G__34348.cljs$lang$maxFixedArity = 3;
    G__34348.cljs$lang$applyTo = function(arglist__34351) {
      var p1 = cljs.core.first(arglist__34351);
      arglist__34351 = cljs.core.next(arglist__34351);
      var p2 = cljs.core.first(arglist__34351);
      arglist__34351 = cljs.core.next(arglist__34351);
      var p3 = cljs.core.first(arglist__34351);
      var ps = cljs.core.rest(arglist__34351);
      return G__34348__delegate(p1, p2, p3, ps);
    };
    G__34348.cljs$core$IFn$_invoke$arity$variadic = G__34348__delegate;
    return G__34348;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4248__auto___34353 = size;
          var i_34354 = 0;
          while (true) {
            if (i_34354 < n__4248__auto___34353) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_34354)));
              var G__34355 = i_34354 + 1;
              i_34354 = G__34355;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__34356__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__34352_SHARP_) {
        return cljs.core.apply.call(null, f, p1__34352_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__34356 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__34356__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__34356.cljs$lang$maxFixedArity = 4;
    G__34356.cljs$lang$applyTo = function(arglist__34357) {
      var f = cljs.core.first(arglist__34357);
      arglist__34357 = cljs.core.next(arglist__34357);
      var c1 = cljs.core.first(arglist__34357);
      arglist__34357 = cljs.core.next(arglist__34357);
      var c2 = cljs.core.first(arglist__34357);
      arglist__34357 = cljs.core.next(arglist__34357);
      var c3 = cljs.core.first(arglist__34357);
      var colls = cljs.core.rest(arglist__34357);
      return G__34356__delegate(f, c1, c2, c3, colls);
    };
    G__34356.cljs$core$IFn$_invoke$arity$variadic = G__34356__delegate;
    return G__34356;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__34358 = n__$1 - 1;
        var G__34359 = cljs.core.rest.call(null, s);
        n__$1 = G__34358;
        coll__$1 = G__34359;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__34360 = cljs.core.next.call(null, s);
      var G__34361 = cljs.core.next.call(null, lead);
      s = G__34360;
      lead = G__34361;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3394__auto__ = s;
        if (and__3394__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3394__auto__;
        }
      }())) {
        var G__34362 = pred__$1;
        var G__34363 = cljs.core.rest.call(null, s);
        pred__$1 = G__34362;
        coll__$1 = G__34363;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__34364__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__34364 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34364__delegate.call(this, c1, c2, colls);
    };
    G__34364.cljs$lang$maxFixedArity = 2;
    G__34364.cljs$lang$applyTo = function(arglist__34365) {
      var c1 = cljs.core.first(arglist__34365);
      arglist__34365 = cljs.core.next(arglist__34365);
      var c2 = cljs.core.first(arglist__34365);
      var colls = cljs.core.rest(arglist__34365);
      return G__34364__delegate(c1, c2, colls);
    };
    G__34364.cljs$core$IFn$_invoke$arity$variadic = G__34364__delegate;
    return G__34364;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__34366__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__34366 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__34366__delegate.call(this, f, coll, colls);
    };
    G__34366.cljs$lang$maxFixedArity = 2;
    G__34366.cljs$lang$applyTo = function(arglist__34367) {
      var f = cljs.core.first(arglist__34367);
      arglist__34367 = cljs.core.next(arglist__34367);
      var coll = cljs.core.first(arglist__34367);
      var colls = cljs.core.rest(arglist__34367);
      return G__34366__delegate(f, coll, colls);
    };
    G__34366.cljs$core$IFn$_invoke$arity$variadic = G__34366__delegate;
    return G__34366;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4248__auto___34368 = size;
        var i_34369 = 0;
        while (true) {
          if (i_34369 < n__4248__auto___34368) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_34369)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_34369));
            } else {
            }
            var G__34370 = i_34369 + 1;
            i_34369 = G__34370;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__34371_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__34371_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__34373 = to;
      if (G__34373) {
        var bit__4043__auto__ = G__34373.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4043__auto__ || G__34373.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__34374__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__34374 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__34374__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__34374.cljs$lang$maxFixedArity = 4;
    G__34374.cljs$lang$applyTo = function(arglist__34375) {
      var f = cljs.core.first(arglist__34375);
      arglist__34375 = cljs.core.next(arglist__34375);
      var c1 = cljs.core.first(arglist__34375);
      arglist__34375 = cljs.core.next(arglist__34375);
      var c2 = cljs.core.first(arglist__34375);
      arglist__34375 = cljs.core.next(arglist__34375);
      var c3 = cljs.core.first(arglist__34375);
      var colls = cljs.core.rest(arglist__34375);
      return G__34374__delegate(f, c1, c2, c3, colls);
    };
    G__34374.cljs$core$IFn$_invoke$arity$variadic = G__34374__delegate;
    return G__34374;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__34377 = m__$1;
          if (G__34377) {
            var bit__4050__auto__ = G__34377.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4050__auto__ || G__34377.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__34377.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__34377);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__34377);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__34378 = sentinel;
            var G__34379 = m__$2;
            var G__34380 = cljs.core.next.call(null, ks__$1);
            sentinel = G__34378;
            m__$1 = G__34379;
            ks__$1 = G__34380;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__34381, v) {
  var vec__34383 = p__34381;
  var k = cljs.core.nth.call(null, vec__34383, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__34383, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__34384, f) {
    var vec__34394 = p__34384;
    var k = cljs.core.nth.call(null, vec__34394, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__34394, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__34385, f, a) {
    var vec__34395 = p__34385;
    var k = cljs.core.nth.call(null, vec__34395, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__34395, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__34386, f, a, b) {
    var vec__34396 = p__34386;
    var k = cljs.core.nth.call(null, vec__34396, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__34396, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__34387, f, a, b, c) {
    var vec__34397 = p__34387;
    var k = cljs.core.nth.call(null, vec__34397, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__34397, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__34399__delegate = function(m, p__34388, f, a, b, c, args) {
      var vec__34398 = p__34388;
      var k = cljs.core.nth.call(null, vec__34398, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__34398, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__34399 = function(m, p__34388, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__34399__delegate.call(this, m, p__34388, f, a, b, c, args);
    };
    G__34399.cljs$lang$maxFixedArity = 6;
    G__34399.cljs$lang$applyTo = function(arglist__34400) {
      var m = cljs.core.first(arglist__34400);
      arglist__34400 = cljs.core.next(arglist__34400);
      var p__34388 = cljs.core.first(arglist__34400);
      arglist__34400 = cljs.core.next(arglist__34400);
      var f = cljs.core.first(arglist__34400);
      arglist__34400 = cljs.core.next(arglist__34400);
      var a = cljs.core.first(arglist__34400);
      arglist__34400 = cljs.core.next(arglist__34400);
      var b = cljs.core.first(arglist__34400);
      arglist__34400 = cljs.core.next(arglist__34400);
      var c = cljs.core.first(arglist__34400);
      var args = cljs.core.rest(arglist__34400);
      return G__34399__delegate(m, p__34388, f, a, b, c, args);
    };
    G__34399.cljs$core$IFn$_invoke$arity$variadic = G__34399__delegate;
    return G__34399;
  }();
  update_in = function(m, p__34388, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__34388, f);
      case 4:
        return update_in__4.call(this, m, p__34388, f, a);
      case 5:
        return update_in__5.call(this, m, p__34388, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__34388, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__34388, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3971__auto__, writer__3972__auto__, opts__3973__auto__) {
  return cljs.core._write.call(null, writer__3972__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__34401 = ll - 5;
      var G__34402 = r;
      ll = G__34401;
      ret = G__34402;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__34403 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__34404 = level - 5;
          node = G__34403;
          level = G__34404;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__34406 = null;
  var G__34406__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__34406__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__34406 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34406__2.call(this, self__, k);
      case 3:
        return G__34406__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34406;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args34405) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34405)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__34407 = j + 1;
              var G__34408 = init__$2;
              j = G__34407;
              init__$1 = G__34408;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__34409 = i + step_init[0];
        i = G__34409;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4248__auto___34410 = len;
    var i_34411 = 0;
    while (true) {
      if (i_34411 < n__4248__auto___34410) {
        new_tail[i_34411] = self__.tail[i_34411];
        var G__34412 = i_34411 + 1;
        i_34411 = G__34412;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__34413 = i + 1;
        var G__34414 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__34413;
        out = G__34414;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__34415) {
    var args = cljs.core.seq(arglist__34415);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3713__auto__ = self__.end;
    var y__3714__auto__ = v_pos + 1;
    return x__3713__auto__ > y__3714__auto__ ? x__3713__auto__ : y__3714__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__34417 = null;
  var G__34417__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__34417__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__34417 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34417__2.call(this, self__, k);
      case 3:
        return G__34417__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34417;
}();
cljs.core.Subvec.prototype.apply = function(self__, args34416) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34416)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__34418 = meta;
      var G__34419 = v.v;
      var G__34420 = v.start + start;
      var G__34421 = v.start + end;
      var G__34422 = __hash;
      meta = G__34418;
      v = G__34419;
      start = G__34420;
      end = G__34421;
      __hash = G__34422;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj34426 = {};
    return obj34426;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__34427 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__34428 = level - 5;
          node = G__34427;
          level = G__34428;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__34430 = null;
  var G__34430__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34430__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34430 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34430__2.call(this, self__, k);
      case 3:
        return G__34430__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34430;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args34429) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34429)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3406__auto__ = self__.rear;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3406__auto__ = self__.front;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__34431 = i + incr;
        i = G__34431;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__34432 = i + 1;
      var G__34433 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__34432;
      out = G__34433;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj34437 = {};
    return obj34437;
  }();
  var l = ks.length;
  var i_34438 = 0;
  while (true) {
    if (i_34438 < l) {
      var k_34439 = ks[i_34438];
      new_obj[k_34439] = obj[k_34439];
      var G__34440 = i_34438 + 1;
      i_34438 = G__34440;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__34443 = null;
  var G__34443__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34443__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34443 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34443__2.call(this, self__, k);
      case 3:
        return G__34443__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34443;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args34442) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34442)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__34444 = cljs.core.rest.call(null, keys__$1);
        var G__34445 = init__$2;
        keys__$1 = G__34444;
        init__$1 = G__34445;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__34441_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__34441_SHARP_, self__.strobj[p1__34441_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj34447 = {};
  return obj34447;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__34448 = i + 2;
          i = G__34448;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__34449 = i + 2;
          i = G__34449;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__34450 = i + 2;
          i = G__34450;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__34451 = i + 2;
          i = G__34451;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__34452 = i + 2;
          i = G__34452;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_34453 = 0;
  while (true) {
    if (i_34453 < l) {
      narr[i_34453] = arr[i_34453];
      var G__34454 = i_34453 + 1;
      i_34453 = G__34454;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj34457 = {};
    return obj34457;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__34458 = cljs.core.aclone.call(null, self__.arr);
          G__34458[idx + 1] = v;
          return G__34458;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__34459 = null;
  var G__34459__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34459__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34459 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34459__2.call(this, self__, k);
      case 3:
        return G__34459__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34459;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args34455) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34455)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__34460 = i + 2;
        var G__34461 = init__$2;
        i = G__34460;
        init__$1 = G__34461;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__34462 = s + 2;
            var G__34463 = d;
            s = G__34462;
            d = G__34463;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__34464 = s + 2;
              var G__34465 = d + 2;
              s = G__34464;
              d = G__34465;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__34466 = i + 2;
        var G__34467 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__34466;
        ret = G__34467;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__34468_34470 = self__.arr;
      G__34468_34470.pop();
      G__34468_34470.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__34469 = o;
      if (G__34469) {
        var bit__4050__auto__ = G__34469.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4050__auto__ || G__34469.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__34469.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__34469);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__34469);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__34471 = cljs.core.next.call(null, es);
          var G__34472 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__34471;
          tcoll__$2 = G__34472;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__34473 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__34474 = i + 2;
      out = G__34473;
      i = G__34474;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3971__auto__, writer__3972__auto__, opts__3973__auto__) {
  return cljs.core._write.call(null, writer__3972__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__34477 = cljs.core.aclone.call(null, arr);
    G__34477[i] = a;
    return G__34477;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__34478 = cljs.core.aclone.call(null, arr);
    G__34478[i] = a;
    G__34478[j] = b;
    return G__34478;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__34479 = i + 2;
        var G__34480 = init__$2;
        i = G__34479;
        init__$1 = G__34480;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_34481 = 0;
        var j_34482 = 0;
        while (true) {
          if (i_34481 < 32) {
            if ((self__.bitmap >>> i_34481 & 1) === 0) {
              var G__34483 = i_34481 + 1;
              var G__34484 = j_34482;
              i_34481 = G__34483;
              j_34482 = G__34484;
              continue;
            } else {
              nodes[i_34481] = !(self__.arr[j_34482] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_34482]), self__.arr[j_34482], self__.arr[j_34482 + 1], added_leaf_QMARK_) : self__.arr[j_34482 + 1];
              var G__34485 = i_34481 + 1;
              var G__34486 = j_34482 + 2;
              i_34481 = G__34485;
              j_34482 = G__34486;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_34487 = 0;
      var j_34488 = 0;
      while (true) {
        if (i_34487 < 32) {
          if ((self__.bitmap >>> i_34487 & 1) === 0) {
            var G__34489 = i_34487 + 1;
            var G__34490 = j_34488;
            i_34487 = G__34489;
            j_34488 = G__34490;
            continue;
          } else {
            nodes[i_34487] = !(self__.arr[j_34488] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_34488]), self__.arr[j_34488], self__.arr[j_34488 + 1], added_leaf_QMARK_) : self__.arr[j_34488 + 1];
            var G__34491 = i_34487 + 1;
            var G__34492 = j_34488 + 2;
            i_34487 = G__34491;
            j_34488 = G__34492;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__34493 = i + 1;
        var G__34494 = j + 2;
        var G__34495 = bitmap | 1 << i;
        i = G__34493;
        j = G__34494;
        bitmap = G__34495;
        continue;
      } else {
        var G__34496 = i + 1;
        var G__34497 = j;
        var G__34498 = bitmap;
        i = G__34496;
        j = G__34497;
        bitmap = G__34498;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__34499 = i + 1;
          var G__34500 = init__$2;
          i = G__34499;
          init__$1 = G__34500;
          continue;
        }
      } else {
        var G__34501 = i + 1;
        var G__34502 = init__$1;
        i = G__34501;
        init__$1 = G__34502;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__34503 = i + 2;
        i = G__34503;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__34504 = j + 2;
                j = G__34504;
                continue;
              }
            } else {
              var G__34505 = j + 2;
              j = G__34505;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__34506 = j + 1;
              j = G__34506;
              continue;
            }
          } else {
            var G__34507 = j + 1;
            j = G__34507;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj34510 = {};
    return obj34510;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__34511 = null;
  var G__34511__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34511__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34511 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34511__2.call(this, self__, k);
      case 3:
        return G__34511__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34511;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args34508) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34508)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__34512 = i + 1;
      var G__34513 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__34512;
      out = G__34513;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__34514 = o;
      if (G__34514) {
        var bit__4050__auto__ = G__34514.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4050__auto__ || G__34514.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__34514.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__34514);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__34514);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__34515 = cljs.core.next.call(null, es);
          var G__34516 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__34515;
          tcoll__$1 = G__34516;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__34517 = ascending_QMARK_ ? t.left : t.right;
      var G__34518 = cljs.core.conj.call(null, stack__$1, t);
      t = G__34517;
      stack__$1 = G__34518;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__34520 = null;
  var G__34520__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34520__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34520 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34520__2.call(this, self__, k);
      case 3:
        return G__34520__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34520;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args34519) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34519)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__34522 = null;
  var G__34522__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34522__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34522 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34522__2.call(this, self__, k);
      case 3:
        return G__34522__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34522;
}();
cljs.core.RedNode.prototype.apply = function(self__, args34521) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34521)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__34524 = null;
  var G__34524__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34524__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34524 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34524__2.call(this, self__, k);
      case 3:
        return G__34524__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34524;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args34523) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34523)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__34525 = t.left;
          t = G__34525;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__34526 = t.right;
            t = G__34526;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__34527 = cljs.core.conj.call(null, stack, t);
              var G__34528 = t.left;
              stack = G__34527;
              t = G__34528;
              continue;
            } else {
              var G__34529 = stack;
              var G__34530 = t.right;
              stack = G__34529;
              t = G__34530;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__34531 = cljs.core.conj.call(null, stack, t);
                var G__34532 = t.right;
                stack = G__34531;
                t = G__34532;
                continue;
              } else {
                var G__34533 = stack;
                var G__34534 = t.left;
                stack = G__34533;
                t = G__34534;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__34535 = cljs.core.nnext.call(null, in$);
        var G__34536 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__34535;
        out = G__34536;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__34537) {
    var keyvals = cljs.core.seq(arglist__34537);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__34538) {
    var keyvals = cljs.core.seq(arglist__34538);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj34542 = {};
      return obj34542;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__34543 = cljs.core.nnext.call(null, kvs);
        kvs = G__34543;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__34544) {
    var keyvals = cljs.core.seq(arglist__34544);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__34545 = cljs.core.nnext.call(null, in$);
        var G__34546 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__34545;
        out = G__34546;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__34547) {
    var keyvals = cljs.core.seq(arglist__34547);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__34548 = cljs.core.nnext.call(null, in$);
        var G__34549 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__34548;
        out = G__34549;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__34550) {
    var comparator = cljs.core.first(arglist__34550);
    var keyvals = cljs.core.rest(arglist__34550);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__34551 = self__.mseq;
    if (G__34551) {
      var bit__4050__auto__ = G__34551.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4050__auto__ || G__34551.cljs$core$INext$) {
        return true;
      } else {
        if (!G__34551.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34551);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34551);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__34552 = self__.mseq;
    if (G__34552) {
      var bit__4050__auto__ = G__34552.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4050__auto__ || G__34552.cljs$core$INext$) {
        return true;
      } else {
        if (!G__34552.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34552);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34552);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__34553 = self__.mseq;
    if (G__34553) {
      var bit__4050__auto__ = G__34553.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4050__auto__ || G__34553.cljs$core$INext$) {
        return true;
      } else {
        if (!G__34553.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34553);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34553);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__34554 = self__.mseq;
    if (G__34554) {
      var bit__4050__auto__ = G__34554.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4050__auto__ || G__34554.cljs$core$INext$) {
        return true;
      } else {
        if (!G__34554.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34554);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__34554);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__34555_SHARP_, p2__34556_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3406__auto__ = p1__34555_SHARP_;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__34556_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__34557) {
    var maps = cljs.core.seq(arglist__34557);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3406__auto__ = m1;
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__34558) {
    var f = cljs.core.first(arglist__34558);
    var maps = cljs.core.rest(arglist__34558);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__34559 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__34560 = cljs.core.next.call(null, keys);
      ret = G__34559;
      keys = G__34560;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__34563 = null;
  var G__34563__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34563__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34563 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34563__2.call(this, self__, k);
      case 3:
        return G__34563__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34563;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args34562) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34562)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__34561_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__34561_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__34564 = i + 1;
        var G__34565 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__34564;
        out = G__34565;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__34566 = i + 1;
        var G__34567 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__34566;
        out = G__34567;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__34569 = null;
  var G__34569__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__34569__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__34569 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34569__2.call(this, self__, k);
      case 3:
        return G__34569__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34569;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args34568) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34568)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__34572 = null;
  var G__34572__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34572__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34572 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34572__2.call(this, self__, k);
      case 3:
        return G__34572__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__34572;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args34571) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34571)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__34570_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__34570_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4242__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4242__auto__.length) {
        var G__34573 = i + 1;
        var G__34574 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__34573;
        res = G__34574;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__34575 = cljs.core._next.call(null, in$__$1);
            var G__34576 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__34575;
            out = G__34576;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__34577__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__34577 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__34577__delegate.call(this, keys);
    };
    G__34577.cljs$lang$maxFixedArity = 0;
    G__34577.cljs$lang$applyTo = function(arglist__34578) {
      var keys = cljs.core.seq(arglist__34578);
      return G__34577__delegate(keys);
    };
    G__34577.cljs$core$IFn$_invoke$arity$variadic = G__34577__delegate;
    return G__34577;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__34579) {
    var keys = cljs.core.seq(arglist__34579);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__34580) {
    var comparator = cljs.core.first(arglist__34580);
    var keys = cljs.core.rest(arglist__34580);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__34581_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__34581_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__34581_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__34588, seen__$1) {
        while (true) {
          var vec__34589 = p__34588;
          var f = cljs.core.nth.call(null, vec__34589, 0, null);
          var xs__$1 = vec__34589;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__34590 = cljs.core.rest.call(null, s);
              var G__34591 = seen__$1;
              p__34588 = G__34590;
              seen__$1 = G__34591;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__34592 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__34593 = cljs.core.next.call(null, s__$1);
      ret = G__34592;
      s__$1 = G__34593;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__34595 = x;
    if (G__34595) {
      var bit__4043__auto__ = G__34595.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4043__auto__ || G__34595.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__34596 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__34597 = cljs.core.next.call(null, ks);
      var G__34598 = cljs.core.next.call(null, vs);
      map = G__34596;
      ks = G__34597;
      vs = G__34598;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__34601__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__34599_SHARP_, p2__34600_SHARP_) {
        return max_key.call(null, k, p1__34599_SHARP_, p2__34600_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__34601 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34601__delegate.call(this, k, x, y, more);
    };
    G__34601.cljs$lang$maxFixedArity = 3;
    G__34601.cljs$lang$applyTo = function(arglist__34602) {
      var k = cljs.core.first(arglist__34602);
      arglist__34602 = cljs.core.next(arglist__34602);
      var x = cljs.core.first(arglist__34602);
      arglist__34602 = cljs.core.next(arglist__34602);
      var y = cljs.core.first(arglist__34602);
      var more = cljs.core.rest(arglist__34602);
      return G__34601__delegate(k, x, y, more);
    };
    G__34601.cljs$core$IFn$_invoke$arity$variadic = G__34601__delegate;
    return G__34601;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__34605__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__34603_SHARP_, p2__34604_SHARP_) {
        return min_key.call(null, k, p1__34603_SHARP_, p2__34604_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__34605 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34605__delegate.call(this, k, x, y, more);
    };
    G__34605.cljs$lang$maxFixedArity = 3;
    G__34605.cljs$lang$applyTo = function(arglist__34606) {
      var k = cljs.core.first(arglist__34606);
      arglist__34606 = cljs.core.next(arglist__34606);
      var x = cljs.core.first(arglist__34606);
      arglist__34606 = cljs.core.next(arglist__34606);
      var y = cljs.core.first(arglist__34606);
      var more = cljs.core.rest(arglist__34606);
      return G__34605__delegate(k, x, y, more);
    };
    G__34605.cljs$core$IFn$_invoke$arity$variadic = G__34605__delegate;
    return G__34605;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__34609 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__34609, 0, null);
        var s = vec__34609;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__34610 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__34610, 0, null);
      var s = vec__34610;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__34613 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__34613, 0, null);
        var s = vec__34613;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__34614 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__34614, 0, null);
      var s = vec__34614;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__34615_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__34615_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__34626 = null;
      var G__34626__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__34626__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__34626__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__34626__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__34626__4 = function() {
        var G__34627__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__34627 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34627__delegate.call(this, x, y, z, args);
        };
        G__34627.cljs$lang$maxFixedArity = 3;
        G__34627.cljs$lang$applyTo = function(arglist__34628) {
          var x = cljs.core.first(arglist__34628);
          arglist__34628 = cljs.core.next(arglist__34628);
          var y = cljs.core.first(arglist__34628);
          arglist__34628 = cljs.core.next(arglist__34628);
          var z = cljs.core.first(arglist__34628);
          var args = cljs.core.rest(arglist__34628);
          return G__34627__delegate(x, y, z, args);
        };
        G__34627.cljs$core$IFn$_invoke$arity$variadic = G__34627__delegate;
        return G__34627;
      }();
      G__34626 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34626__0.call(this);
          case 1:
            return G__34626__1.call(this, x);
          case 2:
            return G__34626__2.call(this, x, y);
          case 3:
            return G__34626__3.call(this, x, y, z);
          default:
            return G__34626__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34626.cljs$lang$maxFixedArity = 3;
      G__34626.cljs$lang$applyTo = G__34626__4.cljs$lang$applyTo;
      return G__34626;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__34629 = null;
      var G__34629__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__34629__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__34629__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__34629__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__34629__4 = function() {
        var G__34630__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__34630 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34630__delegate.call(this, x, y, z, args);
        };
        G__34630.cljs$lang$maxFixedArity = 3;
        G__34630.cljs$lang$applyTo = function(arglist__34631) {
          var x = cljs.core.first(arglist__34631);
          arglist__34631 = cljs.core.next(arglist__34631);
          var y = cljs.core.first(arglist__34631);
          arglist__34631 = cljs.core.next(arglist__34631);
          var z = cljs.core.first(arglist__34631);
          var args = cljs.core.rest(arglist__34631);
          return G__34630__delegate(x, y, z, args);
        };
        G__34630.cljs$core$IFn$_invoke$arity$variadic = G__34630__delegate;
        return G__34630;
      }();
      G__34629 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34629__0.call(this);
          case 1:
            return G__34629__1.call(this, x);
          case 2:
            return G__34629__2.call(this, x, y);
          case 3:
            return G__34629__3.call(this, x, y, z);
          default:
            return G__34629__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34629.cljs$lang$maxFixedArity = 3;
      G__34629.cljs$lang$applyTo = G__34629__4.cljs$lang$applyTo;
      return G__34629;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__34632 = null;
      var G__34632__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__34632__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__34632__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__34632__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__34632__4 = function() {
        var G__34633__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__34633 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__34633__delegate.call(this, x, y, z, args);
        };
        G__34633.cljs$lang$maxFixedArity = 3;
        G__34633.cljs$lang$applyTo = function(arglist__34634) {
          var x = cljs.core.first(arglist__34634);
          arglist__34634 = cljs.core.next(arglist__34634);
          var y = cljs.core.first(arglist__34634);
          arglist__34634 = cljs.core.next(arglist__34634);
          var z = cljs.core.first(arglist__34634);
          var args = cljs.core.rest(arglist__34634);
          return G__34633__delegate(x, y, z, args);
        };
        G__34633.cljs$core$IFn$_invoke$arity$variadic = G__34633__delegate;
        return G__34633;
      }();
      G__34632 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34632__0.call(this);
          case 1:
            return G__34632__1.call(this, x);
          case 2:
            return G__34632__2.call(this, x, y);
          case 3:
            return G__34632__3.call(this, x, y, z);
          default:
            return G__34632__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34632.cljs$lang$maxFixedArity = 3;
      G__34632.cljs$lang$applyTo = G__34632__4.cljs$lang$applyTo;
      return G__34632;
    }();
  };
  var juxt__4 = function() {
    var G__34635__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__34636 = null;
        var G__34636__0 = function() {
          return cljs.core.reduce.call(null, function(p1__34616_SHARP_, p2__34617_SHARP_) {
            return cljs.core.conj.call(null, p1__34616_SHARP_, p2__34617_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__34636__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__34618_SHARP_, p2__34619_SHARP_) {
            return cljs.core.conj.call(null, p1__34618_SHARP_, p2__34619_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__34636__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__34620_SHARP_, p2__34621_SHARP_) {
            return cljs.core.conj.call(null, p1__34620_SHARP_, p2__34621_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__34636__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__34622_SHARP_, p2__34623_SHARP_) {
            return cljs.core.conj.call(null, p1__34622_SHARP_, p2__34623_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__34636__4 = function() {
          var G__34637__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__34624_SHARP_, p2__34625_SHARP_) {
              return cljs.core.conj.call(null, p1__34624_SHARP_, cljs.core.apply.call(null, p2__34625_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__34637 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__34637__delegate.call(this, x, y, z, args);
          };
          G__34637.cljs$lang$maxFixedArity = 3;
          G__34637.cljs$lang$applyTo = function(arglist__34638) {
            var x = cljs.core.first(arglist__34638);
            arglist__34638 = cljs.core.next(arglist__34638);
            var y = cljs.core.first(arglist__34638);
            arglist__34638 = cljs.core.next(arglist__34638);
            var z = cljs.core.first(arglist__34638);
            var args = cljs.core.rest(arglist__34638);
            return G__34637__delegate(x, y, z, args);
          };
          G__34637.cljs$core$IFn$_invoke$arity$variadic = G__34637__delegate;
          return G__34637;
        }();
        G__34636 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__34636__0.call(this);
            case 1:
              return G__34636__1.call(this, x);
            case 2:
              return G__34636__2.call(this, x, y);
            case 3:
              return G__34636__3.call(this, x, y, z);
            default:
              return G__34636__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34636.cljs$lang$maxFixedArity = 3;
        G__34636.cljs$lang$applyTo = G__34636__4.cljs$lang$applyTo;
        return G__34636;
      }();
    };
    var G__34635 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__34635__delegate.call(this, f, g, h, fs);
    };
    G__34635.cljs$lang$maxFixedArity = 3;
    G__34635.cljs$lang$applyTo = function(arglist__34639) {
      var f = cljs.core.first(arglist__34639);
      arglist__34639 = cljs.core.next(arglist__34639);
      var g = cljs.core.first(arglist__34639);
      arglist__34639 = cljs.core.next(arglist__34639);
      var h = cljs.core.first(arglist__34639);
      var fs = cljs.core.rest(arglist__34639);
      return G__34635__delegate(f, g, h, fs);
    };
    G__34635.cljs$core$IFn$_invoke$arity$variadic = G__34635__delegate;
    return G__34635;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__34640 = cljs.core.next.call(null, coll);
        coll = G__34640;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__34641 = n - 1;
        var G__34642 = cljs.core.next.call(null, coll);
        n = G__34641;
        coll = G__34642;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__34644 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__34644, 0, null);
  var flags = cljs.core.nth.call(null, vec__34644, 1, null);
  var pattern = cljs.core.nth.call(null, vec__34644, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_34646 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_34647__$1 = cljs.core.next.call(null, coll);
      var n_34648 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_34647__$1 && (n_34648 == null || !(n_34648 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_34647__$1), writer, opts);
          var G__34649 = cljs.core.next.call(null, coll_34647__$1);
          var G__34650 = n_34648 - 1;
          coll_34647__$1 = G__34649;
          n_34648 = G__34650;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_34646;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__34655 = cljs.core.seq.call(null, ss);
    var chunk__34656 = null;
    var count__34657 = 0;
    var i__34658 = 0;
    while (true) {
      if (i__34658 < count__34657) {
        var s = cljs.core._nth.call(null, chunk__34656, i__34658);
        cljs.core._write.call(null, writer, s);
        var G__34659 = seq__34655;
        var G__34660 = chunk__34656;
        var G__34661 = count__34657;
        var G__34662 = i__34658 + 1;
        seq__34655 = G__34659;
        chunk__34656 = G__34660;
        count__34657 = G__34661;
        i__34658 = G__34662;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__34655);
        if (temp__4092__auto__) {
          var seq__34655__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__34655__$1)) {
            var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__34655__$1);
            var G__34663 = cljs.core.chunk_rest.call(null, seq__34655__$1);
            var G__34664 = c__4148__auto__;
            var G__34665 = cljs.core.count.call(null, c__4148__auto__);
            var G__34666 = 0;
            seq__34655 = G__34663;
            chunk__34656 = G__34664;
            count__34657 = G__34665;
            i__34658 = G__34666;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__34655__$1);
            cljs.core._write.call(null, writer, s);
            var G__34667 = cljs.core.next.call(null, seq__34655__$1);
            var G__34668 = null;
            var G__34669 = 0;
            var G__34670 = 0;
            seq__34655 = G__34667;
            chunk__34656 = G__34668;
            count__34657 = G__34669;
            i__34658 = G__34670;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__34671) {
    var writer = cljs.core.first(arglist__34671);
    var ss = cljs.core.rest(arglist__34671);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj34673 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj34673;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3394__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3394__auto__)) {
            var and__3394__auto____$1 = function() {
              var G__34679 = obj;
              if (G__34679) {
                var bit__4050__auto__ = G__34679.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4050__auto__ || G__34679.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__34679.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__34679);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__34679);
              }
            }();
            if (and__3394__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3394__auto____$1;
            }
          } else {
            return and__3394__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__34680 = obj;
              if (G__34680) {
                var bit__4043__auto__ = G__34680.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4043__auto__ || G__34680.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__34682 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__34682;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__34681 = obj;
                              if (G__34681) {
                                var bit__4050__auto__ = G__34681.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4050__auto__ || G__34681.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__34681.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__34681);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__34681);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__34687 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__34688 = null;
  var count__34689 = 0;
  var i__34690 = 0;
  while (true) {
    if (i__34690 < count__34689) {
      var obj = cljs.core._nth.call(null, chunk__34688, i__34690);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__34691 = seq__34687;
      var G__34692 = chunk__34688;
      var G__34693 = count__34689;
      var G__34694 = i__34690 + 1;
      seq__34687 = G__34691;
      chunk__34688 = G__34692;
      count__34689 = G__34693;
      i__34690 = G__34694;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__34687);
      if (temp__4092__auto__) {
        var seq__34687__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__34687__$1)) {
          var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__34687__$1);
          var G__34695 = cljs.core.chunk_rest.call(null, seq__34687__$1);
          var G__34696 = c__4148__auto__;
          var G__34697 = cljs.core.count.call(null, c__4148__auto__);
          var G__34698 = 0;
          seq__34687 = G__34695;
          chunk__34688 = G__34696;
          count__34689 = G__34697;
          i__34690 = G__34698;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__34687__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__34699 = cljs.core.next.call(null, seq__34687__$1);
          var G__34700 = null;
          var G__34701 = 0;
          var G__34702 = 0;
          seq__34687 = G__34699;
          chunk__34688 = G__34700;
          count__34689 = G__34701;
          i__34690 = G__34702;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__34703) {
    var objs = cljs.core.seq(arglist__34703);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__34704) {
    var objs = cljs.core.seq(arglist__34704);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__34705) {
    var objs = cljs.core.seq(arglist__34705);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__34706) {
    var objs = cljs.core.seq(arglist__34706);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__34707) {
    var objs = cljs.core.seq(arglist__34707);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__34708) {
    var objs = cljs.core.seq(arglist__34708);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__34709) {
    var objs = cljs.core.seq(arglist__34709);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__34710) {
    var objs = cljs.core.seq(arglist__34710);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__34711 = cljs.core.seq.call(null, self__.watches);
  var chunk__34712 = null;
  var count__34713 = 0;
  var i__34714 = 0;
  while (true) {
    if (i__34714 < count__34713) {
      var vec__34715 = cljs.core._nth.call(null, chunk__34712, i__34714);
      var key = cljs.core.nth.call(null, vec__34715, 0, null);
      var f = cljs.core.nth.call(null, vec__34715, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__34717 = seq__34711;
      var G__34718 = chunk__34712;
      var G__34719 = count__34713;
      var G__34720 = i__34714 + 1;
      seq__34711 = G__34717;
      chunk__34712 = G__34718;
      count__34713 = G__34719;
      i__34714 = G__34720;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__34711);
      if (temp__4092__auto__) {
        var seq__34711__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__34711__$1)) {
          var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__34711__$1);
          var G__34721 = cljs.core.chunk_rest.call(null, seq__34711__$1);
          var G__34722 = c__4148__auto__;
          var G__34723 = cljs.core.count.call(null, c__4148__auto__);
          var G__34724 = 0;
          seq__34711 = G__34721;
          chunk__34712 = G__34722;
          count__34713 = G__34723;
          i__34714 = G__34724;
          continue;
        } else {
          var vec__34716 = cljs.core.first.call(null, seq__34711__$1);
          var key = cljs.core.nth.call(null, vec__34716, 0, null);
          var f = cljs.core.nth.call(null, vec__34716, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__34725 = cljs.core.next.call(null, seq__34711__$1);
          var G__34726 = null;
          var G__34727 = 0;
          var G__34728 = 0;
          seq__34711 = G__34725;
          chunk__34712 = G__34726;
          count__34713 = G__34727;
          i__34714 = G__34728;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__34732__delegate = function(x, p__34729) {
      var map__34731 = p__34729;
      var map__34731__$1 = cljs.core.seq_QMARK_.call(null, map__34731) ? cljs.core.apply.call(null, cljs.core.hash_map, map__34731) : map__34731;
      var validator = cljs.core.get.call(null, map__34731__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__34731__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__34732 = function(x, var_args) {
      var p__34729 = null;
      if (arguments.length > 1) {
        p__34729 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__34732__delegate.call(this, x, p__34729);
    };
    G__34732.cljs$lang$maxFixedArity = 1;
    G__34732.cljs$lang$applyTo = function(arglist__34733) {
      var x = cljs.core.first(arglist__34733);
      var p__34729 = cljs.core.rest(arglist__34733);
      return G__34732__delegate(x, p__34729);
    };
    G__34732.cljs$core$IFn$_invoke$arity$variadic = G__34732__delegate;
    return G__34732;
  }();
  atom = function(x, var_args) {
    var p__34729 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_34734 = a.validator;
  if (validate_34734 == null) {
  } else {
    if (cljs.core.truth_(validate_34734.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_34735 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_34735, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__34736__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__34736 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__34736__delegate.call(this, a, f, x, y, z, more);
    };
    G__34736.cljs$lang$maxFixedArity = 5;
    G__34736.cljs$lang$applyTo = function(arglist__34737) {
      var a = cljs.core.first(arglist__34737);
      arglist__34737 = cljs.core.next(arglist__34737);
      var f = cljs.core.first(arglist__34737);
      arglist__34737 = cljs.core.next(arglist__34737);
      var x = cljs.core.first(arglist__34737);
      arglist__34737 = cljs.core.next(arglist__34737);
      var y = cljs.core.first(arglist__34737);
      arglist__34737 = cljs.core.next(arglist__34737);
      var z = cljs.core.first(arglist__34737);
      var more = cljs.core.rest(arglist__34737);
      return G__34736__delegate(a, f, x, y, z, more);
    };
    G__34736.cljs$core$IFn$_invoke$arity$variadic = G__34736__delegate;
    return G__34736;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__34738) {
    var iref = cljs.core.first(arglist__34738);
    arglist__34738 = cljs.core.next(arglist__34738);
    var f = cljs.core.first(arglist__34738);
    var args = cljs.core.rest(arglist__34738);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__34739) {
    var map__34740 = p__34739;
    var map__34740__$1 = cljs.core.seq_QMARK_.call(null, map__34740) ? cljs.core.apply.call(null, cljs.core.hash_map, map__34740) : map__34740;
    var curr_state = map__34740__$1;
    var done = cljs.core.get.call(null, map__34740__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj34742 = {};
  return obj34742;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__34744 = k;
    if (G__34744) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__34744.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__34744.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__34744);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__34744);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__34758 = x;
      if (G__34758) {
        var bit__4050__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3406__auto__ = bit__4050__auto__;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return G__34758.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__34758.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__34758);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__34758);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj34760 = {};
              return obj34760;
            }();
            var seq__34761_34771 = cljs.core.seq.call(null, x);
            var chunk__34762_34772 = null;
            var count__34763_34773 = 0;
            var i__34764_34774 = 0;
            while (true) {
              if (i__34764_34774 < count__34763_34773) {
                var vec__34765_34775 = cljs.core._nth.call(null, chunk__34762_34772, i__34764_34774);
                var k_34776 = cljs.core.nth.call(null, vec__34765_34775, 0, null);
                var v_34777 = cljs.core.nth.call(null, vec__34765_34775, 1, null);
                m[cljs.core.key__GT_js.call(null, k_34776)] = clj__GT_js.call(null, v_34777);
                var G__34778 = seq__34761_34771;
                var G__34779 = chunk__34762_34772;
                var G__34780 = count__34763_34773;
                var G__34781 = i__34764_34774 + 1;
                seq__34761_34771 = G__34778;
                chunk__34762_34772 = G__34779;
                count__34763_34773 = G__34780;
                i__34764_34774 = G__34781;
                continue;
              } else {
                var temp__4092__auto___34782 = cljs.core.seq.call(null, seq__34761_34771);
                if (temp__4092__auto___34782) {
                  var seq__34761_34783__$1 = temp__4092__auto___34782;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__34761_34783__$1)) {
                    var c__4148__auto___34784 = cljs.core.chunk_first.call(null, seq__34761_34783__$1);
                    var G__34785 = cljs.core.chunk_rest.call(null, seq__34761_34783__$1);
                    var G__34786 = c__4148__auto___34784;
                    var G__34787 = cljs.core.count.call(null, c__4148__auto___34784);
                    var G__34788 = 0;
                    seq__34761_34771 = G__34785;
                    chunk__34762_34772 = G__34786;
                    count__34763_34773 = G__34787;
                    i__34764_34774 = G__34788;
                    continue;
                  } else {
                    var vec__34766_34789 = cljs.core.first.call(null, seq__34761_34783__$1);
                    var k_34790 = cljs.core.nth.call(null, vec__34766_34789, 0, null);
                    var v_34791 = cljs.core.nth.call(null, vec__34766_34789, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_34790)] = clj__GT_js.call(null, v_34791);
                    var G__34792 = cljs.core.next.call(null, seq__34761_34783__$1);
                    var G__34793 = null;
                    var G__34794 = 0;
                    var G__34795 = 0;
                    seq__34761_34771 = G__34792;
                    chunk__34762_34772 = G__34793;
                    count__34763_34773 = G__34794;
                    i__34764_34774 = G__34795;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__34767_34796 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__34768_34797 = null;
              var count__34769_34798 = 0;
              var i__34770_34799 = 0;
              while (true) {
                if (i__34770_34799 < count__34769_34798) {
                  var x_34800__$1 = cljs.core._nth.call(null, chunk__34768_34797, i__34770_34799);
                  arr.push(x_34800__$1);
                  var G__34801 = seq__34767_34796;
                  var G__34802 = chunk__34768_34797;
                  var G__34803 = count__34769_34798;
                  var G__34804 = i__34770_34799 + 1;
                  seq__34767_34796 = G__34801;
                  chunk__34768_34797 = G__34802;
                  count__34769_34798 = G__34803;
                  i__34770_34799 = G__34804;
                  continue;
                } else {
                  var temp__4092__auto___34805 = cljs.core.seq.call(null, seq__34767_34796);
                  if (temp__4092__auto___34805) {
                    var seq__34767_34806__$1 = temp__4092__auto___34805;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__34767_34806__$1)) {
                      var c__4148__auto___34807 = cljs.core.chunk_first.call(null, seq__34767_34806__$1);
                      var G__34808 = cljs.core.chunk_rest.call(null, seq__34767_34806__$1);
                      var G__34809 = c__4148__auto___34807;
                      var G__34810 = cljs.core.count.call(null, c__4148__auto___34807);
                      var G__34811 = 0;
                      seq__34767_34796 = G__34808;
                      chunk__34768_34797 = G__34809;
                      count__34769_34798 = G__34810;
                      i__34770_34799 = G__34811;
                      continue;
                    } else {
                      var x_34812__$1 = cljs.core.first.call(null, seq__34767_34806__$1);
                      arr.push(x_34812__$1);
                      var G__34813 = cljs.core.next.call(null, seq__34767_34806__$1);
                      var G__34814 = null;
                      var G__34815 = 0;
                      var G__34816 = 0;
                      seq__34767_34796 = G__34813;
                      chunk__34768_34797 = G__34814;
                      count__34769_34798 = G__34815;
                      i__34770_34799 = G__34816;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj34818 = {};
  return obj34818;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__34839__delegate = function(x, opts) {
      if (function() {
        var G__34829 = x;
        if (G__34829) {
          var bit__4050__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3406__auto__ = bit__4050__auto__;
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return G__34829.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__34829.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__34829);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__34829);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__34830 = opts;
          var map__34830__$1 = cljs.core.seq_QMARK_.call(null, map__34830) ? cljs.core.apply.call(null, cljs.core.hash_map, map__34830) : map__34830;
          var keywordize_keys = cljs.core.get.call(null, map__34830__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__34830, map__34830__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4117__auto__ = function(map__34830, map__34830__$1, keywordize_keys, keyfn) {
                          return function iter__34835(s__34836) {
                            return new cljs.core.LazySeq(null, function(map__34830, map__34830__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__34836__$1 = s__34836;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__34836__$1);
                                  if (temp__4092__auto__) {
                                    var s__34836__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__34836__$2)) {
                                      var c__4115__auto__ = cljs.core.chunk_first.call(null, s__34836__$2);
                                      var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
                                      var b__34838 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
                                      if (function() {
                                        var i__34837 = 0;
                                        while (true) {
                                          if (i__34837 < size__4116__auto__) {
                                            var k = cljs.core._nth.call(null, c__4115__auto__, i__34837);
                                            cljs.core.chunk_append.call(null, b__34838, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__34840 = i__34837 + 1;
                                            i__34837 = G__34840;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__34838), iter__34835.call(null, cljs.core.chunk_rest.call(null, s__34836__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__34838), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__34836__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__34835.call(null, cljs.core.rest.call(null, s__34836__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__34830, map__34830__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__34830, map__34830__$1, keywordize_keys, keyfn);
                        return iter__4117__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__34830, map__34830__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__34839 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__34839__delegate.call(this, x, opts);
    };
    G__34839.cljs$lang$maxFixedArity = 1;
    G__34839.cljs$lang$applyTo = function(arglist__34841) {
      var x = cljs.core.first(arglist__34841);
      var opts = cljs.core.rest(arglist__34841);
      return G__34839__delegate(x, opts);
    };
    G__34839.cljs$core$IFn$_invoke$arity$variadic = G__34839__delegate;
    return G__34839;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__34842__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__34842 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__34842__delegate.call(this, args);
    };
    G__34842.cljs$lang$maxFixedArity = 0;
    G__34842.cljs$lang$applyTo = function(arglist__34843) {
      var args = cljs.core.seq(arglist__34843);
      return G__34842__delegate(args);
    };
    G__34842.cljs$core$IFn$_invoke$arity$variadic = G__34842__delegate;
    return G__34842;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__34844 = ret;
        f = G__34844;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__34845__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__34845 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__34845__delegate.call(this, f, args);
    };
    G__34845.cljs$lang$maxFixedArity = 1;
    G__34845.cljs$lang$applyTo = function(arglist__34846) {
      var f = cljs.core.first(arglist__34846);
      var args = cljs.core.rest(arglist__34846);
      return G__34845__delegate(f, args);
    };
    G__34845.cljs$core$IFn$_invoke$arity$variadic = G__34845__delegate;
    return G__34845;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__34847) {
    var f = cljs.core.first(arglist__34847);
    var args = cljs.core.rest(arglist__34847);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3406__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3406__auto__) {
      return or__3406__auto__;
    } else {
      var or__3406__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3406__auto____$1) {
        return or__3406__auto____$1;
      } else {
        var and__3394__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3394__auto__) {
          var and__3394__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3394__auto____$1) {
            var and__3394__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3394__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__34848 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__34849 = i + 1;
                  ret = G__34848;
                  i = G__34849;
                  continue;
                }
                break;
              }
            } else {
              return and__3394__auto____$2;
            }
          } else {
            return and__3394__auto____$1;
          }
        } else {
          return and__3394__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3406__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__34850_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__34850_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__34850_SHARP_), cljs.core.second.call(null, p1__34850_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__34851_SHARP_, p2__34852_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__34851_SHARP_, p2__34852_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3406__auto__ = cljs.core.truth_(function() {
    var and__3394__auto__ = xprefs;
    if (cljs.core.truth_(and__3394__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3394__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    var or__3406__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__34853 = cljs.core.rest.call(null, ps);
          ps = G__34853;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3406__auto____$1)) {
      return or__3406__auto____$1;
    } else {
      var or__3406__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__34854 = cljs.core.rest.call(null, ps);
            ps = G__34854;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3406__auto____$2)) {
        return or__3406__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3406__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__34857) {
    var vec__34858 = p__34857;
    var k = cljs.core.nth.call(null, vec__34858, 0, null);
    var _ = cljs.core.nth.call(null, vec__34858, 1, null);
    var e = vec__34858;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3406__auto__ = be == null;
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj34860 = {};
  return obj34860;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._reset[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._reset["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._add_method[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._add_method["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._remove_method[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._remove_method["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._prefer_method[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._get_method[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._get_method["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._methods[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._methods["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._prefers[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._prefers["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3394__auto__ = mf;
    if (and__3394__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4027__auto__ = mf == null ? null : mf;
    return function() {
      var or__3406__auto__ = cljs.core._dispatch[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core._dispatch["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__34861__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__34861 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__34861__delegate.call(this, _, args);
  };
  G__34861.cljs$lang$maxFixedArity = 1;
  G__34861.cljs$lang$applyTo = function(arglist__34862) {
    var _ = cljs.core.first(arglist__34862);
    var args = cljs.core.rest(arglist__34862);
    return G__34861__delegate(_, args);
  };
  G__34861.cljs$core$IFn$_invoke$arity$variadic = G__34861__delegate;
  return G__34861;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3971__auto__, writer__3972__auto__, opts__3973__auto__) {
  return cljs.core._write.call(null, writer__3972__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("clustermap.rtree");
goog.require("cljs.core");
clustermap.rtree.rtree_index = function rtree_index(js_index) {
  var rtree = new RTree(10);
  var keys = Object.keys(js_index);
  var features = [];
  var js_feature_coll = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), "FeatureCollection"], null));
  var _ = js_feature_coll["features"] = features;
  var seq__33812_33816 = cljs.core.seq.call(null, keys);
  var chunk__33813_33817 = null;
  var count__33814_33818 = 0;
  var i__33815_33819 = 0;
  while (true) {
    if (i__33815_33819 < count__33814_33818) {
      var k_33820 = cljs.core._nth.call(null, chunk__33813_33817, i__33815_33819);
      var obj_33821 = js_index[k_33820];
      var geom_33822 = obj_33821["geojson"];
      var feature_33823 = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), "Feature", new cljs.core.Keyword(null, "properties", "properties", 4382818469), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), obj_33821["id"], new cljs.core.Keyword(null, "compact_name", "compact_name", 1128032665), obj_33821["compact_name"]], null)], null));
      var __33824__$1 = feature_33823["geometry"] = geom_33822;
      features.push(feature_33823);
      var G__33825 = seq__33812_33816;
      var G__33826 = chunk__33813_33817;
      var G__33827 = count__33814_33818;
      var G__33828 = i__33815_33819 + 1;
      seq__33812_33816 = G__33825;
      chunk__33813_33817 = G__33826;
      count__33814_33818 = G__33827;
      i__33815_33819 = G__33828;
      continue;
    } else {
      var temp__4092__auto___33829 = cljs.core.seq.call(null, seq__33812_33816);
      if (temp__4092__auto___33829) {
        var seq__33812_33830__$1 = temp__4092__auto___33829;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__33812_33830__$1)) {
          var c__4148__auto___33831 = cljs.core.chunk_first.call(null, seq__33812_33830__$1);
          var G__33832 = cljs.core.chunk_rest.call(null, seq__33812_33830__$1);
          var G__33833 = c__4148__auto___33831;
          var G__33834 = cljs.core.count.call(null, c__4148__auto___33831);
          var G__33835 = 0;
          seq__33812_33816 = G__33832;
          chunk__33813_33817 = G__33833;
          count__33814_33818 = G__33834;
          i__33815_33819 = G__33835;
          continue;
        } else {
          var k_33836 = cljs.core.first.call(null, seq__33812_33830__$1);
          var obj_33837 = js_index[k_33836];
          var geom_33838 = obj_33837["geojson"];
          var feature_33839 = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), "Feature", new cljs.core.Keyword(null, "properties", "properties", 4382818469), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), obj_33837["id"], new cljs.core.Keyword(null, "compact_name", "compact_name", 1128032665), obj_33837["compact_name"]], null)], null));
          var __33840__$1 = feature_33839["geometry"] = geom_33838;
          features.push(feature_33839);
          var G__33841 = cljs.core.next.call(null, seq__33812_33830__$1);
          var G__33842 = null;
          var G__33843 = 0;
          var G__33844 = 0;
          seq__33812_33816 = G__33841;
          chunk__33813_33817 = G__33842;
          count__33814_33818 = G__33843;
          i__33815_33819 = G__33844;
          continue;
        }
      } else {
      }
    }
    break;
  }
  rtree.geoJSON(js_feature_coll);
  return rtree;
};
clustermap.rtree.point_in_polygons = function point_in_polygons(js_index, x, y) {
  var hits = js_index.search(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x", "x", 1013904362), x, new cljs.core.Keyword(null, "y", "y", 1013904363), y, new cljs.core.Keyword(null, "w", "w", 1013904361), 0, new cljs.core.Keyword(null, "h", "h", 1013904346), 0], null)));
  return cljs.core.filter.call(null, function(hit) {
    return gju.pointInPolygon(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), "Point", new cljs.core.Keyword(null, "coordinates", "coordinates", 2885823853), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null)], null)), hit.geometry);
  }, hits);
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__37899) {
    var vec__37900 = p__37899;
    var k = cljs.core.nth.call(null, vec__37900, 0, null);
    var v = cljs.core.nth.call(null, vec__37900, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__37903) {
    var vec__37904 = p__37903;
    var k = cljs.core.nth.call(null, vec__37904, 0, null);
    var v = cljs.core.nth.call(null, vec__37904, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__34863 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__34863;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__34867 = cljs.core._EQ_;
    var expr__34868 = limit;
    if (cljs.core.truth_(pred__34867.call(null, 1, expr__34868))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__34867.call(null, 2, expr__34868))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__34870 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__34871 = limit__$1 - 1;
            var G__34872 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__34870;
            limit__$1 = G__34871;
            parts = G__34872;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__34873 = index - 1;
        index = G__34873;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___34874 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___34874)) {
        var replacement_34875 = temp__4090__auto___34874;
        buffer.append([cljs.core.str(replacement_34875)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__34876 = index + 1;
      index = G__34876;
      continue;
    }
    break;
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__38081_SHARP_) {
    return max === p1__38081_SHARP_;
  }, coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__38082__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__38082 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__38082__delegate.call(this, s1, s2, sets);
    };
    G__38082.cljs$lang$maxFixedArity = 2;
    G__38082.cljs$lang$applyTo = function(arglist__38083) {
      var s1 = cljs.core.first(arglist__38083);
      arglist__38083 = cljs.core.next(arglist__38083);
      var s2 = cljs.core.first(arglist__38083);
      var sets = cljs.core.rest(arglist__38083);
      return G__38082__delegate(s1, s2, sets);
    };
    G__38082.cljs$core$IFn$_invoke$arity$variadic = G__38082__delegate;
    return G__38082;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__38085 = s2;
        var G__38086 = s1;
        s1 = G__38085;
        s2 = G__38086;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__38087__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__38084_SHARP_) {
        return-cljs.core.count.call(null, p1__38084_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__38087 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__38087__delegate.call(this, s1, s2, sets);
    };
    G__38087.cljs$lang$maxFixedArity = 2;
    G__38087.cljs$lang$applyTo = function(arglist__38088) {
      var s1 = cljs.core.first(arglist__38088);
      arglist__38088 = cljs.core.next(arglist__38088);
      var s2 = cljs.core.first(arglist__38088);
      var sets = cljs.core.rest(arglist__38088);
      return G__38087__delegate(s1, s2, sets);
    };
    G__38087.cljs$core$IFn$_invoke$arity$variadic = G__38087__delegate;
    return G__38087;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__38089__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__38089 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__38089__delegate.call(this, s1, s2, sets);
    };
    G__38089.cljs$lang$maxFixedArity = 2;
    G__38089.cljs$lang$applyTo = function(arglist__38090) {
      var s1 = cljs.core.first(arglist__38090);
      arglist__38090 = cljs.core.next(arglist__38090);
      var s2 = cljs.core.first(arglist__38090);
      var sets = cljs.core.rest(arglist__38090);
      return G__38089__delegate(s1, s2, sets);
    };
    G__38089.cljs$core$IFn$_invoke$arity$variadic = G__38089__delegate;
    return G__38089;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__38091_SHARP_) {
    return cljs.core.select_keys.call(null, p1__38091_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__38094) {
    var vec__38095 = p__38094;
    var old = cljs.core.nth.call(null, vec__38095, 0, null);
    var new$ = cljs.core.nth.call(null, vec__38095, 1, null);
    if (cljs.core.not_EQ_.call(null, old, new$) && cljs.core.contains_QMARK_.call(null, m, old)) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, m, old)), old);
    } else {
      return m;
    }
  }, map, kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__38096_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__38096_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__38099) {
    var vec__38100 = p__38099;
    var k = cljs.core.nth.call(null, vec__38100, 0, null);
    var v = cljs.core.nth.call(null, vec__38100, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__38107 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__38107, 0, null);
      var s = cljs.core.nth.call(null, vec__38107, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__38101_SHARP_, p2__38102_SHARP_) {
            return cljs.core.conj.call(null, p1__38101_SHARP_, cljs.core.merge.call(null, p2__38102_SHARP_, x));
          }, ret, found);
        } else {
          return ret;
        }
      }, cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__38108 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__38108, 0, null);
    var s = cljs.core.nth.call(null, vec__38108, 1, null);
    var k = cljs.core.nth.call(null, vec__38108, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__38103_SHARP_, p2__38104_SHARP_) {
          return cljs.core.conj.call(null, p1__38103_SHARP_, cljs.core.merge.call(null, p2__38104_SHARP_, x));
        }, ret, found);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__38109_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__38109_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__38110_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__38110_SHARP_);
  }, set2);
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("sablono.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.set");
goog.require("clojure.string");
goog.require("clojure.set");
goog.require("goog.Uri");
sablono.util._STAR_base_url_STAR_ = null;
sablono.util.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
sablono.util.ToString = function() {
  var obj37880 = {};
  return obj37880;
}();
sablono.util.to_str = function to_str(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.sablono$util$ToString$to_str$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.sablono$util$ToString$to_str$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = sablono.util.to_str[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = sablono.util.to_str["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToString.to-str", x);
        }
      }
    }().call(null, x);
  }
};
sablono.util.ToURI = function() {
  var obj37882 = {};
  return obj37882;
}();
sablono.util.to_uri = function to_uri(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.sablono$util$ToURI$to_uri$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.sablono$util$ToURI$to_uri$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = sablono.util.to_uri[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = sablono.util.to_uri["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToURI.to-uri", x);
        }
      }
    }().call(null, x);
  }
};
sablono.util.as_str = function() {
  var as_str__delegate = function(xs) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, sablono.util.to_str, xs));
  };
  var as_str = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return as_str__delegate.call(this, xs);
  };
  as_str.cljs$lang$maxFixedArity = 0;
  as_str.cljs$lang$applyTo = function(arglist__37883) {
    var xs = cljs.core.seq(arglist__37883);
    return as_str__delegate(xs);
  };
  as_str.cljs$core$IFn$_invoke$arity$variadic = as_str__delegate;
  return as_str;
}();
sablono.util.camelcase_key = function camelcase_key(k) {
  if (cljs.core.truth_(k)) {
    var vec__37885 = clojure.string.split.call(null, cljs.core.name.call(null, k), /-/);
    var first_word = cljs.core.nth.call(null, vec__37885, 0, null);
    var words = cljs.core.nthnext.call(null, vec__37885, 1);
    if (cljs.core.empty_QMARK_.call(null, words) || (cljs.core._EQ_.call(null, "aria", first_word) || cljs.core._EQ_.call(null, "data", first_word))) {
      return k;
    } else {
      return cljs.core.keyword.call(null, clojure.string.join.call(null, cljs.core.conj.call(null, cljs.core.map.call(null, clojure.string.capitalize, words), first_word)));
    }
  } else {
    return null;
  }
};
sablono.util.html_to_dom_attrs = function html_to_dom_attrs(attrs) {
  var dom_attrs = cljs.core.merge.call(null, cljs.core.zipmap.call(null, cljs.core.keys.call(null, attrs), cljs.core.map.call(null, sablono.util.camelcase_key, cljs.core.keys.call(null, attrs))), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.Keyword(null, "className", "className", 1004015509), new cljs.core.Keyword(null, "for", "for", 1014005819), new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112)], null));
  return clojure.set.rename_keys.call(null, attrs, dom_attrs);
};
sablono.util.compact_map = function compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var temp__4090__auto__ = cljs.core.get.call(null, m__$1, k);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var v = temp__4090__auto__;
      return m__$1;
    } else {
      return cljs.core.dissoc.call(null, m__$1, k);
    }
  }, m, cljs.core.keys.call(null, m));
};
sablono.util.merge_with_class = function() {
  var merge_with_class__delegate = function(maps) {
    var classes = cljs.core.vec.call(null, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.mapcat.call(null, function(p1__37886_SHARP_) {
      if (cljs.core.list_QMARK_.call(null, p1__37886_SHARP_)) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__37886_SHARP_], null);
      } else {
        if (cljs.core.vector_QMARK_.call(null, p1__37886_SHARP_)) {
          return p1__37886_SHARP_;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__37886_SHARP_], null);
          } else {
            return null;
          }
        }
      }
    }, cljs.core.map.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), maps))));
    var maps__$1 = cljs.core.apply.call(null, cljs.core.merge, maps);
    if (cljs.core.empty_QMARK_.call(null, classes)) {
      return maps__$1;
    } else {
      return cljs.core.assoc.call(null, maps__$1, new cljs.core.Keyword(null, "class", "class", 1108647146), classes);
    }
  };
  var merge_with_class = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge_with_class__delegate.call(this, maps);
  };
  merge_with_class.cljs$lang$maxFixedArity = 0;
  merge_with_class.cljs$lang$applyTo = function(arglist__37887) {
    var maps = cljs.core.seq(arglist__37887);
    return merge_with_class__delegate(maps);
  };
  merge_with_class.cljs$core$IFn$_invoke$arity$variadic = merge_with_class__delegate;
  return merge_with_class;
}();
sablono.util.normalize_element = function normalize_element(p__37888) {
  var vec__37891 = p__37888;
  var tag = cljs.core.nth.call(null, vec__37891, 0, null);
  var content = cljs.core.nthnext.call(null, vec__37891, 1);
  if (!(tag instanceof cljs.core.Keyword || (tag instanceof cljs.core.Symbol || typeof tag === "string"))) {
    throw cljs.core.ex_info.call(null, [cljs.core.str(tag), cljs.core.str(" is not a valid element name.")].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag, new cljs.core.Keyword(null, "content", "content", 1965434859), content], null));
  } else {
  }
  var vec__37892 = cljs.core.re_matches.call(null, sablono.util.re_tag, cljs.core.name.call(null, tag));
  var _ = cljs.core.nth.call(null, vec__37892, 0, null);
  var tag__$1 = cljs.core.nth.call(null, vec__37892, 1, null);
  var id = cljs.core.nth.call(null, vec__37892, 2, null);
  var class$ = cljs.core.nth.call(null, vec__37892, 3, null);
  var tag_attrs = sablono.util.compact_map.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "class", "class", 1108647146), cljs.core.truth_(class$) ? clojure.string.split.call(null, class$, /\./) : null], null));
  var map_attrs = cljs.core.first.call(null, content);
  if (cljs.core.map_QMARK_.call(null, map_attrs)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, sablono.util.merge_with_class.call(null, tag_attrs, map_attrs), cljs.core.next.call(null, content)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, tag_attrs, content], null);
  }
};
sablono.util.join_classes = function join_classes(classes) {
  return clojure.string.join.call(null, " ", cljs.core.flatten.call(null, classes));
};
sablono.util.react_symbol = function react_symbol(tag) {
  return cljs.core.symbol.call(null, "js", [cljs.core.str("React.DOM."), cljs.core.str(cljs.core.name.call(null, tag))].join(""));
};
sablono.util.react_fn = function react_fn(tag) {
  var dom_fn = sablono.util.react_symbol.call(null, tag);
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "textarea", "textarea", 4305627820), null, new cljs.core.Keyword(null, "input", "input", 1114262332), null], null), null), cljs.core.keyword.call(null, tag))) {
    return cljs.core.symbol.call(null, "sablono.interpreter", cljs.core.name.call(null, tag));
  } else {
    return dom_fn;
  }
};
sablono.util.attr_pattern = function attr_pattern(attr) {
  return cljs.core.re_pattern.call(null, [cljs.core.str("\\s+"), cljs.core.str(cljs.core.name.call(null, attr)), cljs.core.str("\\s*\x3d\\s*['\"][^\"']+['\"]")].join(""));
};
sablono.util.strip_attr = function strip_attr(s, attr) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, s, sablono.util.attr_pattern.call(null, attr), "");
  } else {
    return null;
  }
};
sablono.util.strip_outer = function strip_outer(s) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, clojure.string.replace.call(null, s, /^\s*<[^>]+>\s*/, ""), /\s*<\/[^>]+>\s*$/, "");
  } else {
    return null;
  }
};
sablono.util.ToString["_"] = true;
sablono.util.to_str["_"] = function(x) {
  return[cljs.core.str(x)].join("");
};
sablono.util.ToString["number"] = true;
sablono.util.to_str["number"] = function(x) {
  return[cljs.core.str(x)].join("");
};
sablono.util.ToString["null"] = true;
sablono.util.to_str["null"] = function(_) {
  return "";
};
goog.Uri.prototype.sablono$util$ToString$ = true;
goog.Uri.prototype.sablono$util$ToString$to_str$arity$1 = function(x) {
  var x__$1 = this;
  if (cljs.core.truth_(function() {
    var or__3406__auto__ = x__$1.hasDomain();
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return x__$1.getPath() == null || cljs.core.not.call(null, cljs.core.re_matches.call(null, /^\/.*/, x__$1.getPath()));
    }
  }())) {
    return[cljs.core.str(x__$1)].join("");
  } else {
    var base = [cljs.core.str(sablono.util._STAR_base_url_STAR_)].join("");
    if (cljs.core.truth_(cljs.core.re_matches.call(null, /.*\/$/, base))) {
      return[cljs.core.str(cljs.core.subs.call(null, base, 0, cljs.core.count.call(null, base) - 1)), cljs.core.str(x__$1)].join("");
    } else {
      return[cljs.core.str(base), cljs.core.str(x__$1)].join("");
    }
  }
};
cljs.core.Keyword.prototype.sablono$util$ToString$ = true;
cljs.core.Keyword.prototype.sablono$util$ToString$to_str$arity$1 = function(x) {
  var x__$1 = this;
  return cljs.core.name.call(null, x__$1);
};
sablono.util.ToURI["_"] = true;
sablono.util.to_uri["_"] = function(x) {
  return new goog.Uri([cljs.core.str(x)].join(""));
};
goog.Uri.prototype.sablono$util$ToURI$ = true;
goog.Uri.prototype.sablono$util$ToURI$to_uri$arity$1 = function(x) {
  var x__$1 = this;
  return x__$1;
};
goog.provide("sablono.interpreter");
goog.require("cljs.core");
goog.require("sablono.util");
goog.require("clojure.string");
goog.require("sablono.util");
goog.require("clojure.string");
sablono.interpreter.IInterpreter = function() {
  var obj37894 = {};
  return obj37894;
}();
sablono.interpreter.interpret = function interpret(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.sablono$interpreter$IInterpreter$interpret$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.sablono$interpreter$IInterpreter$interpret$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = sablono.interpreter.interpret[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = sablono.interpreter.interpret["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInterpreter.interpret", this$);
        }
      }
    }().call(null, this$);
  }
};
sablono.interpreter.wrap_form_element = function wrap_form_element(ctor) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }});
};
sablono.interpreter.input = sablono.interpreter.wrap_form_element.call(null, React.DOM.input);
sablono.interpreter.textarea = sablono.interpreter.wrap_form_element.call(null, React.DOM.textarea);
sablono.interpreter.dom_fn = function dom_fn(tag) {
  var temp__4090__auto__ = React.DOM[cljs.core.name.call(null, tag)];
  if (cljs.core.truth_(temp__4090__auto__)) {
    var dom_fn__$1 = temp__4090__auto__;
    return cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "input", "input", 1114262332), sablono.interpreter.input, new cljs.core.Keyword(null, "textarea", "textarea", 4305627820), sablono.interpreter.textarea], null), cljs.core.keyword.call(null, tag), dom_fn__$1);
  } else {
    throw cljs.core.ex_info.call(null, [cljs.core.str("Unsupported HTML tag: "), cljs.core.str(cljs.core.name.call(null, tag))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag], null));
  }
};
sablono.interpreter.attributes = function attributes(attrs) {
  var attrs__$1 = cljs.core.clj__GT_js.call(null, sablono.util.html_to_dom_attrs.call(null, attrs));
  var class$ = clojure.string.join.call(null, " ", cljs.core.flatten.call(null, cljs.core.seq.call(null, attrs__$1.className)));
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, class$))) {
    attrs__$1.className = class$;
  } else {
  }
  return attrs__$1;
};
sablono.interpreter.element = function element(element__$1) {
  var vec__37896 = sablono.util.normalize_element.call(null, element__$1);
  var tag = cljs.core.nth.call(null, vec__37896, 0, null);
  var attrs = cljs.core.nth.call(null, vec__37896, 1, null);
  var content = cljs.core.nth.call(null, vec__37896, 2, null);
  return sablono.interpreter.dom_fn.call(null, tag).call(null, sablono.interpreter.attributes.call(null, attrs), cljs.core.sequential_QMARK_.call(null, content) && (typeof cljs.core.first.call(null, content) === "string" && cljs.core.empty_QMARK_.call(null, cljs.core.rest.call(null, content))) ? sablono.interpreter.interpret.call(null, cljs.core.first.call(null, content)) : cljs.core.truth_(content) ? sablono.interpreter.interpret.call(null, content) : new cljs.core.Keyword(null, "else", "else", 
  1017020587) ? null : null);
};
sablono.interpreter.interpret_seq = function interpret_seq(s) {
  return cljs.core.into_array.call(null, cljs.core.map.call(null, sablono.interpreter.interpret, s));
};
sablono.interpreter.IInterpreter["null"] = true;
sablono.interpreter.interpret["null"] = function(this$) {
  return null;
};
sablono.interpreter.IInterpreter["_"] = true;
sablono.interpreter.interpret["_"] = function(this$) {
  return this$;
};
cljs.core.PersistentVector.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.PersistentVector.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.element.call(null, this$__$1);
};
cljs.core.IndexedSeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.IndexedSeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.List.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.List.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.LazySeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.LazySeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.ChunkedSeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.Cons.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.Cons.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
goog.provide("sablono.core");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.string");
goog.require("sablono.util");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("sablono.interpreter");
goog.require("sablono.interpreter");
goog.require("sablono.util");
goog.require("clojure.walk");
goog.require("clojure.string");
sablono.core.wrap_attrs = function wrap_attrs(func) {
  return function() {
    var G__37790__delegate = function(args) {
      if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, args))) {
        var vec__37789 = cljs.core.apply.call(null, func, cljs.core.rest.call(null, args));
        var tag = cljs.core.nth.call(null, vec__37789, 0, null);
        var body = cljs.core.nthnext.call(null, vec__37789, 1);
        if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, body))) {
          return cljs.core.apply.call(null, cljs.core.vector, tag, cljs.core.merge.call(null, cljs.core.first.call(null, body), cljs.core.first.call(null, args)), cljs.core.rest.call(null, body));
        } else {
          return cljs.core.apply.call(null, cljs.core.vector, tag, cljs.core.first.call(null, args), body);
        }
      } else {
        return cljs.core.apply.call(null, func, args);
      }
    };
    var G__37790 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__37790__delegate.call(this, args);
    };
    G__37790.cljs$lang$maxFixedArity = 0;
    G__37790.cljs$lang$applyTo = function(arglist__37791) {
      var args = cljs.core.seq(arglist__37791);
      return G__37790__delegate(args);
    };
    G__37790.cljs$core$IFn$_invoke$arity$variadic = G__37790__delegate;
    return G__37790;
  }();
};
sablono.core.update_arglists = function update_arglists(arglists) {
  var iter__4117__auto__ = function iter__37796(s__37797) {
    return new cljs.core.LazySeq(null, function() {
      var s__37797__$1 = s__37797;
      while (true) {
        var temp__4092__auto__ = cljs.core.seq.call(null, s__37797__$1);
        if (temp__4092__auto__) {
          var s__37797__$2 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__37797__$2)) {
            var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37797__$2);
            var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
            var b__37799 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
            if (function() {
              var i__37798 = 0;
              while (true) {
                if (i__37798 < size__4116__auto__) {
                  var args = cljs.core._nth.call(null, c__4115__auto__, i__37798);
                  cljs.core.chunk_append.call(null, b__37799, cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Symbol(null, "attr-map?", "attr-map?", -1682549128, null), args)));
                  var G__37800 = i__37798 + 1;
                  i__37798 = G__37800;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37799), iter__37796.call(null, cljs.core.chunk_rest.call(null, s__37797__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37799), null);
            }
          } else {
            var args = cljs.core.first.call(null, s__37797__$2);
            return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Symbol(null, "attr-map?", "attr-map?", -1682549128, null), args)), iter__37796.call(null, cljs.core.rest.call(null, s__37797__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4117__auto__.call(null, arglists);
};
sablono.core.render = function render(component) {
  var html = cljs.core.atom.call(null, null);
  React.renderComponentToString(component, function(p1__37801_SHARP_) {
    return cljs.core.reset_BANG_.call(null, html, p1__37801_SHARP_);
  });
  return cljs.core.deref.call(null, html);
};
sablono.core.include_css = function() {
  var include_css__delegate = function(styles) {
    var iter__4117__auto__ = function iter__37806(s__37807) {
      return new cljs.core.LazySeq(null, function() {
        var s__37807__$1 = s__37807;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__37807__$1);
          if (temp__4092__auto__) {
            var s__37807__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37807__$2)) {
              var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37807__$2);
              var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
              var b__37809 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
              if (function() {
                var i__37808 = 0;
                while (true) {
                  if (i__37808 < size__4116__auto__) {
                    var style = cljs.core._nth.call(null, c__4115__auto__, i__37808);
                    cljs.core.chunk_append.call(null, b__37809, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "link", "link", 1017226092), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), "text/css", new cljs.core.Keyword(null, "href", "href", 1017115293), sablono.util.as_str.call(null, style), new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet"], null)], null));
                    var G__37810 = i__37808 + 1;
                    i__37808 = G__37810;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37809), iter__37806.call(null, cljs.core.chunk_rest.call(null, s__37807__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37809), null);
              }
            } else {
              var style = cljs.core.first.call(null, s__37807__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "link", "link", 1017226092), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), "text/css", new cljs.core.Keyword(null, "href", "href", 1017115293), sablono.util.as_str.call(null, style), new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet"], null)], null), iter__37806.call(null, 
              cljs.core.rest.call(null, s__37807__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4117__auto__.call(null, styles);
  };
  var include_css = function(var_args) {
    var styles = null;
    if (arguments.length > 0) {
      styles = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return include_css__delegate.call(this, styles);
  };
  include_css.cljs$lang$maxFixedArity = 0;
  include_css.cljs$lang$applyTo = function(arglist__37811) {
    var styles = cljs.core.seq(arglist__37811);
    return include_css__delegate(styles);
  };
  include_css.cljs$core$IFn$_invoke$arity$variadic = include_css__delegate;
  return include_css;
}();
sablono.core.include_js = function include_js(src) {
  return goog.dom.appendChild(goog.dom.getDocument().body, goog.dom.createDom("script", {"src":src}));
};
sablono.core.include_react = function include_react() {
  return sablono.core.include_js.call(null, "http://fb.me/react-0.8.0.js");
};
sablono.core.link_to37812 = function() {
  var link_to37812__delegate = function(url, content) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 1017115293), sablono.util.as_str.call(null, url)], null), content], null);
  };
  var link_to37812 = function(url, var_args) {
    var content = null;
    if (arguments.length > 1) {
      content = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link_to37812__delegate.call(this, url, content);
  };
  link_to37812.cljs$lang$maxFixedArity = 1;
  link_to37812.cljs$lang$applyTo = function(arglist__37813) {
    var url = cljs.core.first(arglist__37813);
    var content = cljs.core.rest(arglist__37813);
    return link_to37812__delegate(url, content);
  };
  link_to37812.cljs$core$IFn$_invoke$arity$variadic = link_to37812__delegate;
  return link_to37812;
}();
sablono.core.link_to = sablono.core.wrap_attrs.call(null, sablono.core.link_to37812);
sablono.core.mail_to37814 = function() {
  var mail_to37814__delegate = function(e_mail, p__37815) {
    var vec__37817 = p__37815;
    var content = cljs.core.nth.call(null, vec__37817, 0, null);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 1017115293), [cljs.core.str("mailto:"), cljs.core.str(e_mail)].join("")], null), function() {
      var or__3406__auto__ = content;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return e_mail;
      }
    }()], null);
  };
  var mail_to37814 = function(e_mail, var_args) {
    var p__37815 = null;
    if (arguments.length > 1) {
      p__37815 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mail_to37814__delegate.call(this, e_mail, p__37815);
  };
  mail_to37814.cljs$lang$maxFixedArity = 1;
  mail_to37814.cljs$lang$applyTo = function(arglist__37818) {
    var e_mail = cljs.core.first(arglist__37818);
    var p__37815 = cljs.core.rest(arglist__37818);
    return mail_to37814__delegate(e_mail, p__37815);
  };
  mail_to37814.cljs$core$IFn$_invoke$arity$variadic = mail_to37814__delegate;
  return mail_to37814;
}();
sablono.core.mail_to = sablono.core.wrap_attrs.call(null, sablono.core.mail_to37814);
sablono.core.unordered_list37819 = function unordered_list37819(coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", 1013907977), function() {
    var iter__4117__auto__ = function iter__37824(s__37825) {
      return new cljs.core.LazySeq(null, function() {
        var s__37825__$1 = s__37825;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__37825__$1);
          if (temp__4092__auto__) {
            var s__37825__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37825__$2)) {
              var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37825__$2);
              var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
              var b__37827 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
              if (function() {
                var i__37826 = 0;
                while (true) {
                  if (i__37826 < size__4116__auto__) {
                    var x = cljs.core._nth.call(null, c__4115__auto__, i__37826);
                    cljs.core.chunk_append.call(null, b__37827, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), x], null));
                    var G__37828 = i__37826 + 1;
                    i__37826 = G__37828;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37827), iter__37824.call(null, cljs.core.chunk_rest.call(null, s__37825__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37827), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__37825__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), x], null), iter__37824.call(null, cljs.core.rest.call(null, s__37825__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4117__auto__.call(null, coll);
  }()], null);
};
sablono.core.unordered_list = sablono.core.wrap_attrs.call(null, sablono.core.unordered_list37819);
sablono.core.ordered_list37829 = function ordered_list37829(coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ol", "ol", 1013907791), function() {
    var iter__4117__auto__ = function iter__37834(s__37835) {
      return new cljs.core.LazySeq(null, function() {
        var s__37835__$1 = s__37835;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__37835__$1);
          if (temp__4092__auto__) {
            var s__37835__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37835__$2)) {
              var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37835__$2);
              var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
              var b__37837 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
              if (function() {
                var i__37836 = 0;
                while (true) {
                  if (i__37836 < size__4116__auto__) {
                    var x = cljs.core._nth.call(null, c__4115__auto__, i__37836);
                    cljs.core.chunk_append.call(null, b__37837, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), x], null));
                    var G__37838 = i__37836 + 1;
                    i__37836 = G__37838;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37837), iter__37834.call(null, cljs.core.chunk_rest.call(null, s__37835__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37837), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__37835__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), x], null), iter__37834.call(null, cljs.core.rest.call(null, s__37835__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4117__auto__.call(null, coll);
  }()], null);
};
sablono.core.ordered_list = sablono.core.wrap_attrs.call(null, sablono.core.ordered_list37829);
sablono.core.image37839 = function() {
  var image37839 = null;
  var image37839__1 = function(src) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1014008629), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "src", "src", 1014018390), sablono.util.as_str.call(null, src)], null)], null);
  };
  var image37839__2 = function(src, alt) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1014008629), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", 1014018390), sablono.util.as_str.call(null, src), new cljs.core.Keyword(null, "alt", "alt", 1014000923), alt], null)], null);
  };
  image37839 = function(src, alt) {
    switch(arguments.length) {
      case 1:
        return image37839__1.call(this, src);
      case 2:
        return image37839__2.call(this, src, alt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  image37839.cljs$core$IFn$_invoke$arity$1 = image37839__1;
  image37839.cljs$core$IFn$_invoke$arity$2 = image37839__2;
  return image37839;
}();
sablono.core.image = sablono.core.wrap_attrs.call(null, sablono.core.image37839);
sablono.core._STAR_group_STAR_ = cljs.core.PersistentVector.EMPTY;
sablono.core.make_name = function make_name(name) {
  return cljs.core.reduce.call(null, function(p1__37840_SHARP_, p2__37841_SHARP_) {
    return[cljs.core.str(p1__37840_SHARP_), cljs.core.str("["), cljs.core.str(p2__37841_SHARP_), cljs.core.str("]")].join("");
  }, cljs.core.conj.call(null, sablono.core._STAR_group_STAR_, sablono.util.as_str.call(null, name)));
};
sablono.core.make_id = function make_id(name) {
  return cljs.core.reduce.call(null, function(p1__37842_SHARP_, p2__37843_SHARP_) {
    return[cljs.core.str(p1__37842_SHARP_), cljs.core.str("-"), cljs.core.str(p2__37843_SHARP_)].join("");
  }, cljs.core.conj.call(null, sablono.core._STAR_group_STAR_, sablono.util.as_str.call(null, name)));
};
sablono.core.input_field = function input_field(type, name, value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 1114262332), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), type, new cljs.core.Keyword(null, "name", "name", 1017277949), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", 1013907597), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 1125876963), 
  value], null)], null);
};
sablono.core.hidden_field37844 = function() {
  var hidden_field37844 = null;
  var hidden_field37844__1 = function(name) {
    return hidden_field37844.call(null, name, null);
  };
  var hidden_field37844__2 = function(name, value) {
    return sablono.core.input_field.call(null, "hidden", name, value);
  };
  hidden_field37844 = function(name, value) {
    switch(arguments.length) {
      case 1:
        return hidden_field37844__1.call(this, name);
      case 2:
        return hidden_field37844__2.call(this, name, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hidden_field37844.cljs$core$IFn$_invoke$arity$1 = hidden_field37844__1;
  hidden_field37844.cljs$core$IFn$_invoke$arity$2 = hidden_field37844__2;
  return hidden_field37844;
}();
sablono.core.hidden_field = sablono.core.wrap_attrs.call(null, sablono.core.hidden_field37844);
sablono.core.text_field37845 = function() {
  var text_field37845 = null;
  var text_field37845__1 = function(name) {
    return text_field37845.call(null, name, null);
  };
  var text_field37845__2 = function(name, value) {
    return sablono.core.input_field.call(null, "text", name, value);
  };
  text_field37845 = function(name, value) {
    switch(arguments.length) {
      case 1:
        return text_field37845__1.call(this, name);
      case 2:
        return text_field37845__2.call(this, name, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text_field37845.cljs$core$IFn$_invoke$arity$1 = text_field37845__1;
  text_field37845.cljs$core$IFn$_invoke$arity$2 = text_field37845__2;
  return text_field37845;
}();
sablono.core.text_field = sablono.core.wrap_attrs.call(null, sablono.core.text_field37845);
sablono.core.password_field37846 = function() {
  var password_field37846 = null;
  var password_field37846__1 = function(name) {
    return password_field37846.call(null, name, null);
  };
  var password_field37846__2 = function(name, value) {
    return sablono.core.input_field.call(null, "password", name, value);
  };
  password_field37846 = function(name, value) {
    switch(arguments.length) {
      case 1:
        return password_field37846__1.call(this, name);
      case 2:
        return password_field37846__2.call(this, name, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  password_field37846.cljs$core$IFn$_invoke$arity$1 = password_field37846__1;
  password_field37846.cljs$core$IFn$_invoke$arity$2 = password_field37846__2;
  return password_field37846;
}();
sablono.core.password_field = sablono.core.wrap_attrs.call(null, sablono.core.password_field37846);
sablono.core.email_field37847 = function() {
  var email_field37847 = null;
  var email_field37847__1 = function(name) {
    return email_field37847.call(null, name, null);
  };
  var email_field37847__2 = function(name, value) {
    return sablono.core.input_field.call(null, "email", name, value);
  };
  email_field37847 = function(name, value) {
    switch(arguments.length) {
      case 1:
        return email_field37847__1.call(this, name);
      case 2:
        return email_field37847__2.call(this, name, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  email_field37847.cljs$core$IFn$_invoke$arity$1 = email_field37847__1;
  email_field37847.cljs$core$IFn$_invoke$arity$2 = email_field37847__2;
  return email_field37847;
}();
sablono.core.email_field = sablono.core.wrap_attrs.call(null, sablono.core.email_field37847);
sablono.core.check_box37848 = function() {
  var check_box37848 = null;
  var check_box37848__1 = function(name) {
    return check_box37848.call(null, name, null);
  };
  var check_box37848__2 = function(name, checked_QMARK_) {
    return check_box37848.call(null, name, checked_QMARK_, "true");
  };
  var check_box37848__3 = function(name, checked_QMARK_, value) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 1114262332), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", new cljs.core.Keyword(null, "name", "name", 1017277949), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", 1013907597), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 
    1125876963), value, new cljs.core.Keyword(null, "checked", "checked", 1756218137), checked_QMARK_], null)], null);
  };
  check_box37848 = function(name, checked_QMARK_, value) {
    switch(arguments.length) {
      case 1:
        return check_box37848__1.call(this, name);
      case 2:
        return check_box37848__2.call(this, name, checked_QMARK_);
      case 3:
        return check_box37848__3.call(this, name, checked_QMARK_, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_box37848.cljs$core$IFn$_invoke$arity$1 = check_box37848__1;
  check_box37848.cljs$core$IFn$_invoke$arity$2 = check_box37848__2;
  check_box37848.cljs$core$IFn$_invoke$arity$3 = check_box37848__3;
  return check_box37848;
}();
sablono.core.check_box = sablono.core.wrap_attrs.call(null, sablono.core.check_box37848);
sablono.core.radio_button37849 = function() {
  var radio_button37849 = null;
  var radio_button37849__1 = function(group) {
    return radio_button37849.call(null, group, null);
  };
  var radio_button37849__2 = function(group, checked_QMARK_) {
    return radio_button37849.call(null, group, checked_QMARK_, "true");
  };
  var radio_button37849__3 = function(group, checked_QMARK_, value) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 1114262332), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1017479852), "radio", new cljs.core.Keyword(null, "name", "name", 1017277949), sablono.core.make_name.call(null, group), new cljs.core.Keyword(null, "id", "id", 1013907597), sablono.core.make_id.call(null, [cljs.core.str(sablono.util.as_str.call(null, group)), 
    cljs.core.str("-"), cljs.core.str(sablono.util.as_str.call(null, value))].join("")), new cljs.core.Keyword(null, "value", "value", 1125876963), value, new cljs.core.Keyword(null, "checked", "checked", 1756218137), checked_QMARK_], null)], null);
  };
  radio_button37849 = function(group, checked_QMARK_, value) {
    switch(arguments.length) {
      case 1:
        return radio_button37849__1.call(this, group);
      case 2:
        return radio_button37849__2.call(this, group, checked_QMARK_);
      case 3:
        return radio_button37849__3.call(this, group, checked_QMARK_, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  radio_button37849.cljs$core$IFn$_invoke$arity$1 = radio_button37849__1;
  radio_button37849.cljs$core$IFn$_invoke$arity$2 = radio_button37849__2;
  radio_button37849.cljs$core$IFn$_invoke$arity$3 = radio_button37849__3;
  return radio_button37849;
}();
sablono.core.radio_button = sablono.core.wrap_attrs.call(null, sablono.core.radio_button37849);
sablono.core.select_options37850 = function() {
  var select_options37850 = null;
  var select_options37850__1 = function(coll) {
    return select_options37850.call(null, coll, null);
  };
  var select_options37850__2 = function(coll, selected) {
    var iter__4117__auto__ = function iter__37859(s__37860) {
      return new cljs.core.LazySeq(null, function() {
        var s__37860__$1 = s__37860;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__37860__$1);
          if (temp__4092__auto__) {
            var s__37860__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37860__$2)) {
              var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37860__$2);
              var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
              var b__37862 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
              if (function() {
                var i__37861 = 0;
                while (true) {
                  if (i__37861 < size__4116__auto__) {
                    var x = cljs.core._nth.call(null, c__4115__auto__, i__37861);
                    cljs.core.chunk_append.call(null, b__37862, cljs.core.sequential_QMARK_.call(null, x) ? function() {
                      var vec__37865 = x;
                      var text = cljs.core.nth.call(null, vec__37865, 0, null);
                      var val = cljs.core.nth.call(null, vec__37865, 1, null);
                      if (cljs.core.sequential_QMARK_.call(null, val)) {
                        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optgroup", "optgroup", 933131038), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "label", "label", 1116631654), text], null), select_options37850.call(null, val, selected)], null);
                      } else {
                        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 4298734567), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 1125876963), val, new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, val, selected)], null), text], null);
                      }
                    }() : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 4298734567), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, x, selected)], null), x], null));
                    var G__37867 = i__37861 + 1;
                    i__37861 = G__37867;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37862), iter__37859.call(null, cljs.core.chunk_rest.call(null, s__37860__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37862), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__37860__$2);
              return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? function() {
                var vec__37866 = x;
                var text = cljs.core.nth.call(null, vec__37866, 0, null);
                var val = cljs.core.nth.call(null, vec__37866, 1, null);
                if (cljs.core.sequential_QMARK_.call(null, val)) {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optgroup", "optgroup", 933131038), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "label", "label", 1116631654), text], null), select_options37850.call(null, val, selected)], null);
                } else {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 4298734567), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 1125876963), val, new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, val, selected)], null), text], null);
                }
              }() : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 4298734567), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, x, selected)], null), x], null), iter__37859.call(null, cljs.core.rest.call(null, s__37860__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4117__auto__.call(null, coll);
  };
  select_options37850 = function(coll, selected) {
    switch(arguments.length) {
      case 1:
        return select_options37850__1.call(this, coll);
      case 2:
        return select_options37850__2.call(this, coll, selected);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  select_options37850.cljs$core$IFn$_invoke$arity$1 = select_options37850__1;
  select_options37850.cljs$core$IFn$_invoke$arity$2 = select_options37850__2;
  return select_options37850;
}();
sablono.core.select_options = sablono.core.wrap_attrs.call(null, sablono.core.select_options37850);
sablono.core.drop_down37868 = function() {
  var drop_down37868 = null;
  var drop_down37868__2 = function(name, options) {
    return drop_down37868.call(null, name, options, null);
  };
  var drop_down37868__3 = function(name, options, selected) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 4402849902), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", 1013907597), sablono.core.make_id.call(null, name)], null), sablono.core.select_options.call(null, options, selected)], null);
  };
  drop_down37868 = function(name, options, selected) {
    switch(arguments.length) {
      case 2:
        return drop_down37868__2.call(this, name, options);
      case 3:
        return drop_down37868__3.call(this, name, options, selected);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_down37868.cljs$core$IFn$_invoke$arity$2 = drop_down37868__2;
  drop_down37868.cljs$core$IFn$_invoke$arity$3 = drop_down37868__3;
  return drop_down37868;
}();
sablono.core.drop_down = sablono.core.wrap_attrs.call(null, sablono.core.drop_down37868);
sablono.core.text_area37869 = function() {
  var text_area37869 = null;
  var text_area37869__1 = function(name) {
    return text_area37869.call(null, name, null);
  };
  var text_area37869__2 = function(name, value) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "textarea", "textarea", 4305627820), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", 1013907597), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 1125876963), value], null)], null);
  };
  text_area37869 = function(name, value) {
    switch(arguments.length) {
      case 1:
        return text_area37869__1.call(this, name);
      case 2:
        return text_area37869__2.call(this, name, value);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text_area37869.cljs$core$IFn$_invoke$arity$1 = text_area37869__1;
  text_area37869.cljs$core$IFn$_invoke$arity$2 = text_area37869__2;
  return text_area37869;
}();
sablono.core.text_area = sablono.core.wrap_attrs.call(null, sablono.core.text_area37869);
sablono.core.file_upload37870 = function file_upload37870(name) {
  return sablono.core.input_field.call(null, "file", name, null);
};
sablono.core.file_upload = sablono.core.wrap_attrs.call(null, sablono.core.file_upload37870);
sablono.core.label37871 = function label37871(name, text) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1116631654), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112), sablono.core.make_id.call(null, name)], null), text], null);
};
sablono.core.label = sablono.core.wrap_attrs.call(null, sablono.core.label37871);
sablono.core.submit_button37872 = function submit_button37872(text) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 1114262332), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), "submit", new cljs.core.Keyword(null, "value", "value", 1125876963), text], null)], null);
};
sablono.core.submit_button = sablono.core.wrap_attrs.call(null, sablono.core.submit_button37872);
sablono.core.reset_button37873 = function reset_button37873(text) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 1114262332), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), "reset", new cljs.core.Keyword(null, "value", "value", 1125876963), text], null)], null);
};
sablono.core.reset_button = sablono.core.wrap_attrs.call(null, sablono.core.reset_button37873);
sablono.core.form_to37874 = function() {
  var form_to37874__delegate = function(p__37875, body) {
    var vec__37877 = p__37875;
    var method = cljs.core.nth.call(null, vec__37877, 0, null);
    var action = cljs.core.nth.call(null, vec__37877, 1, null);
    var method_str = clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
    var action_uri = sablono.util.to_uri.call(null, action);
    return cljs.core.vec.call(null, cljs.core.concat.call(null, cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "get", "get", 1014006472), null, new cljs.core.Keyword(null, "post", "post", 1017351186), null], null), null), method) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", 1017053238), new cljs.core.PersistentArrayMap(null, 
    2, [new cljs.core.Keyword(null, "method", "method", 4231316563), method_str, new cljs.core.Keyword(null, "action", "action", 3885920680), action_uri], null)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", 1017053238), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 4231316563), "POST", new cljs.core.Keyword(null, "action", "action", 3885920680), action_uri], null), 
    sablono.core.hidden_field.call(null, "_method", method_str)], null), body));
  };
  var form_to37874 = function(p__37875, var_args) {
    var body = null;
    if (arguments.length > 1) {
      body = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form_to37874__delegate.call(this, p__37875, body);
  };
  form_to37874.cljs$lang$maxFixedArity = 1;
  form_to37874.cljs$lang$applyTo = function(arglist__37878) {
    var p__37875 = cljs.core.first(arglist__37878);
    var body = cljs.core.rest(arglist__37878);
    return form_to37874__delegate(p__37875, body);
  };
  form_to37874.cljs$core$IFn$_invoke$arity$variadic = form_to37874__delegate;
  return form_to37874;
}();
sablono.core.form_to = sablono.core.wrap_attrs.call(null, sablono.core.form_to37874);
goog.provide("om.dom");
goog.require("cljs.core");
om.dom.a = function() {
  var a__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var a = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return a__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__37674) {
    var opts__9184__auto__ = cljs.core.first(arglist__37674);
    var children__9185__auto__ = cljs.core.rest(arglist__37674);
    return a__delegate(opts__9184__auto__, children__9185__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var abbr = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return abbr__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__37675) {
    var opts__9184__auto__ = cljs.core.first(arglist__37675);
    var children__9185__auto__ = cljs.core.rest(arglist__37675);
    return abbr__delegate(opts__9184__auto__, children__9185__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var address = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return address__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__37676) {
    var opts__9184__auto__ = cljs.core.first(arglist__37676);
    var children__9185__auto__ = cljs.core.rest(arglist__37676);
    return address__delegate(opts__9184__auto__, children__9185__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var area = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return area__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__37677) {
    var opts__9184__auto__ = cljs.core.first(arglist__37677);
    var children__9185__auto__ = cljs.core.rest(arglist__37677);
    return area__delegate(opts__9184__auto__, children__9185__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var article = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return article__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__37678) {
    var opts__9184__auto__ = cljs.core.first(arglist__37678);
    var children__9185__auto__ = cljs.core.rest(arglist__37678);
    return article__delegate(opts__9184__auto__, children__9185__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var aside = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return aside__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__37679) {
    var opts__9184__auto__ = cljs.core.first(arglist__37679);
    var children__9185__auto__ = cljs.core.rest(arglist__37679);
    return aside__delegate(opts__9184__auto__, children__9185__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var audio = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return audio__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__37680) {
    var opts__9184__auto__ = cljs.core.first(arglist__37680);
    var children__9185__auto__ = cljs.core.rest(arglist__37680);
    return audio__delegate(opts__9184__auto__, children__9185__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var b = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return b__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__37681) {
    var opts__9184__auto__ = cljs.core.first(arglist__37681);
    var children__9185__auto__ = cljs.core.rest(arglist__37681);
    return b__delegate(opts__9184__auto__, children__9185__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var base = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return base__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__37682) {
    var opts__9184__auto__ = cljs.core.first(arglist__37682);
    var children__9185__auto__ = cljs.core.rest(arglist__37682);
    return base__delegate(opts__9184__auto__, children__9185__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var bdi = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdi__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__37683) {
    var opts__9184__auto__ = cljs.core.first(arglist__37683);
    var children__9185__auto__ = cljs.core.rest(arglist__37683);
    return bdi__delegate(opts__9184__auto__, children__9185__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var bdo = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdo__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__37684) {
    var opts__9184__auto__ = cljs.core.first(arglist__37684);
    var children__9185__auto__ = cljs.core.rest(arglist__37684);
    return bdo__delegate(opts__9184__auto__, children__9185__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var big = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return big__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__37685) {
    var opts__9184__auto__ = cljs.core.first(arglist__37685);
    var children__9185__auto__ = cljs.core.rest(arglist__37685);
    return big__delegate(opts__9184__auto__, children__9185__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var blockquote = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return blockquote__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__37686) {
    var opts__9184__auto__ = cljs.core.first(arglist__37686);
    var children__9185__auto__ = cljs.core.rest(arglist__37686);
    return blockquote__delegate(opts__9184__auto__, children__9185__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var body = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return body__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__37687) {
    var opts__9184__auto__ = cljs.core.first(arglist__37687);
    var children__9185__auto__ = cljs.core.rest(arglist__37687);
    return body__delegate(opts__9184__auto__, children__9185__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var br = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return br__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__37688) {
    var opts__9184__auto__ = cljs.core.first(arglist__37688);
    var children__9185__auto__ = cljs.core.rest(arglist__37688);
    return br__delegate(opts__9184__auto__, children__9185__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var button = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return button__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__37689) {
    var opts__9184__auto__ = cljs.core.first(arglist__37689);
    var children__9185__auto__ = cljs.core.rest(arglist__37689);
    return button__delegate(opts__9184__auto__, children__9185__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var canvas = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return canvas__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__37690) {
    var opts__9184__auto__ = cljs.core.first(arglist__37690);
    var children__9185__auto__ = cljs.core.rest(arglist__37690);
    return canvas__delegate(opts__9184__auto__, children__9185__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var caption = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return caption__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__37691) {
    var opts__9184__auto__ = cljs.core.first(arglist__37691);
    var children__9185__auto__ = cljs.core.rest(arglist__37691);
    return caption__delegate(opts__9184__auto__, children__9185__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var cite = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cite__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__37692) {
    var opts__9184__auto__ = cljs.core.first(arglist__37692);
    var children__9185__auto__ = cljs.core.rest(arglist__37692);
    return cite__delegate(opts__9184__auto__, children__9185__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var code = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return code__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__37693) {
    var opts__9184__auto__ = cljs.core.first(arglist__37693);
    var children__9185__auto__ = cljs.core.rest(arglist__37693);
    return code__delegate(opts__9184__auto__, children__9185__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var col = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return col__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__37694) {
    var opts__9184__auto__ = cljs.core.first(arglist__37694);
    var children__9185__auto__ = cljs.core.rest(arglist__37694);
    return col__delegate(opts__9184__auto__, children__9185__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var colgroup = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return colgroup__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__37695) {
    var opts__9184__auto__ = cljs.core.first(arglist__37695);
    var children__9185__auto__ = cljs.core.rest(arglist__37695);
    return colgroup__delegate(opts__9184__auto__, children__9185__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var data = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return data__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__37696) {
    var opts__9184__auto__ = cljs.core.first(arglist__37696);
    var children__9185__auto__ = cljs.core.rest(arglist__37696);
    return data__delegate(opts__9184__auto__, children__9185__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var datalist = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return datalist__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__37697) {
    var opts__9184__auto__ = cljs.core.first(arglist__37697);
    var children__9185__auto__ = cljs.core.rest(arglist__37697);
    return datalist__delegate(opts__9184__auto__, children__9185__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var dd = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dd__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__37698) {
    var opts__9184__auto__ = cljs.core.first(arglist__37698);
    var children__9185__auto__ = cljs.core.rest(arglist__37698);
    return dd__delegate(opts__9184__auto__, children__9185__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var del = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return del__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__37699) {
    var opts__9184__auto__ = cljs.core.first(arglist__37699);
    var children__9185__auto__ = cljs.core.rest(arglist__37699);
    return del__delegate(opts__9184__auto__, children__9185__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var dfn = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dfn__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__37700) {
    var opts__9184__auto__ = cljs.core.first(arglist__37700);
    var children__9185__auto__ = cljs.core.rest(arglist__37700);
    return dfn__delegate(opts__9184__auto__, children__9185__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var div = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return div__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__37701) {
    var opts__9184__auto__ = cljs.core.first(arglist__37701);
    var children__9185__auto__ = cljs.core.rest(arglist__37701);
    return div__delegate(opts__9184__auto__, children__9185__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var dl = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dl__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__37702) {
    var opts__9184__auto__ = cljs.core.first(arglist__37702);
    var children__9185__auto__ = cljs.core.rest(arglist__37702);
    return dl__delegate(opts__9184__auto__, children__9185__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var dt = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dt__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__37703) {
    var opts__9184__auto__ = cljs.core.first(arglist__37703);
    var children__9185__auto__ = cljs.core.rest(arglist__37703);
    return dt__delegate(opts__9184__auto__, children__9185__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var em = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return em__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__37704) {
    var opts__9184__auto__ = cljs.core.first(arglist__37704);
    var children__9185__auto__ = cljs.core.rest(arglist__37704);
    return em__delegate(opts__9184__auto__, children__9185__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var embed = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return embed__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__37705) {
    var opts__9184__auto__ = cljs.core.first(arglist__37705);
    var children__9185__auto__ = cljs.core.rest(arglist__37705);
    return embed__delegate(opts__9184__auto__, children__9185__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var fieldset = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fieldset__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__37706) {
    var opts__9184__auto__ = cljs.core.first(arglist__37706);
    var children__9185__auto__ = cljs.core.rest(arglist__37706);
    return fieldset__delegate(opts__9184__auto__, children__9185__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var figcaption = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figcaption__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__37707) {
    var opts__9184__auto__ = cljs.core.first(arglist__37707);
    var children__9185__auto__ = cljs.core.rest(arglist__37707);
    return figcaption__delegate(opts__9184__auto__, children__9185__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var figure = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figure__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__37708) {
    var opts__9184__auto__ = cljs.core.first(arglist__37708);
    var children__9185__auto__ = cljs.core.rest(arglist__37708);
    return figure__delegate(opts__9184__auto__, children__9185__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var footer = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return footer__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__37709) {
    var opts__9184__auto__ = cljs.core.first(arglist__37709);
    var children__9185__auto__ = cljs.core.rest(arglist__37709);
    return footer__delegate(opts__9184__auto__, children__9185__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var form = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__37710) {
    var opts__9184__auto__ = cljs.core.first(arglist__37710);
    var children__9185__auto__ = cljs.core.rest(arglist__37710);
    return form__delegate(opts__9184__auto__, children__9185__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h1 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h1__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__37711) {
    var opts__9184__auto__ = cljs.core.first(arglist__37711);
    var children__9185__auto__ = cljs.core.rest(arglist__37711);
    return h1__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h2 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h2__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__37712) {
    var opts__9184__auto__ = cljs.core.first(arglist__37712);
    var children__9185__auto__ = cljs.core.rest(arglist__37712);
    return h2__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h3 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h3__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__37713) {
    var opts__9184__auto__ = cljs.core.first(arglist__37713);
    var children__9185__auto__ = cljs.core.rest(arglist__37713);
    return h3__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h4 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h4__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__37714) {
    var opts__9184__auto__ = cljs.core.first(arglist__37714);
    var children__9185__auto__ = cljs.core.rest(arglist__37714);
    return h4__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h5 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h5__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__37715) {
    var opts__9184__auto__ = cljs.core.first(arglist__37715);
    var children__9185__auto__ = cljs.core.rest(arglist__37715);
    return h5__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var h6 = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h6__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__37716) {
    var opts__9184__auto__ = cljs.core.first(arglist__37716);
    var children__9185__auto__ = cljs.core.rest(arglist__37716);
    return h6__delegate(opts__9184__auto__, children__9185__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var head = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return head__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__37717) {
    var opts__9184__auto__ = cljs.core.first(arglist__37717);
    var children__9185__auto__ = cljs.core.rest(arglist__37717);
    return head__delegate(opts__9184__auto__, children__9185__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var header = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return header__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__37718) {
    var opts__9184__auto__ = cljs.core.first(arglist__37718);
    var children__9185__auto__ = cljs.core.rest(arglist__37718);
    return header__delegate(opts__9184__auto__, children__9185__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var hr = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hr__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__37719) {
    var opts__9184__auto__ = cljs.core.first(arglist__37719);
    var children__9185__auto__ = cljs.core.rest(arglist__37719);
    return hr__delegate(opts__9184__auto__, children__9185__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var html = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return html__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__37720) {
    var opts__9184__auto__ = cljs.core.first(arglist__37720);
    var children__9185__auto__ = cljs.core.rest(arglist__37720);
    return html__delegate(opts__9184__auto__, children__9185__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var i = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return i__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__37721) {
    var opts__9184__auto__ = cljs.core.first(arglist__37721);
    var children__9185__auto__ = cljs.core.rest(arglist__37721);
    return i__delegate(opts__9184__auto__, children__9185__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var iframe = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return iframe__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__37722) {
    var opts__9184__auto__ = cljs.core.first(arglist__37722);
    var children__9185__auto__ = cljs.core.rest(arglist__37722);
    return iframe__delegate(opts__9184__auto__, children__9185__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var img = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return img__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__37723) {
    var opts__9184__auto__ = cljs.core.first(arglist__37723);
    var children__9185__auto__ = cljs.core.rest(arglist__37723);
    return img__delegate(opts__9184__auto__, children__9185__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var ins = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ins__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__37724) {
    var opts__9184__auto__ = cljs.core.first(arglist__37724);
    var children__9185__auto__ = cljs.core.rest(arglist__37724);
    return ins__delegate(opts__9184__auto__, children__9185__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var kbd = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return kbd__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__37725) {
    var opts__9184__auto__ = cljs.core.first(arglist__37725);
    var children__9185__auto__ = cljs.core.rest(arglist__37725);
    return kbd__delegate(opts__9184__auto__, children__9185__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var keygen = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return keygen__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__37726) {
    var opts__9184__auto__ = cljs.core.first(arglist__37726);
    var children__9185__auto__ = cljs.core.rest(arglist__37726);
    return keygen__delegate(opts__9184__auto__, children__9185__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var label = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return label__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__37727) {
    var opts__9184__auto__ = cljs.core.first(arglist__37727);
    var children__9185__auto__ = cljs.core.rest(arglist__37727);
    return label__delegate(opts__9184__auto__, children__9185__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var legend = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return legend__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__37728) {
    var opts__9184__auto__ = cljs.core.first(arglist__37728);
    var children__9185__auto__ = cljs.core.rest(arglist__37728);
    return legend__delegate(opts__9184__auto__, children__9185__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var li = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return li__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__37729) {
    var opts__9184__auto__ = cljs.core.first(arglist__37729);
    var children__9185__auto__ = cljs.core.rest(arglist__37729);
    return li__delegate(opts__9184__auto__, children__9185__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var link = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__37730) {
    var opts__9184__auto__ = cljs.core.first(arglist__37730);
    var children__9185__auto__ = cljs.core.rest(arglist__37730);
    return link__delegate(opts__9184__auto__, children__9185__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var main = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return main__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__37731) {
    var opts__9184__auto__ = cljs.core.first(arglist__37731);
    var children__9185__auto__ = cljs.core.rest(arglist__37731);
    return main__delegate(opts__9184__auto__, children__9185__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var map = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__37732) {
    var opts__9184__auto__ = cljs.core.first(arglist__37732);
    var children__9185__auto__ = cljs.core.rest(arglist__37732);
    return map__delegate(opts__9184__auto__, children__9185__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var mark = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mark__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__37733) {
    var opts__9184__auto__ = cljs.core.first(arglist__37733);
    var children__9185__auto__ = cljs.core.rest(arglist__37733);
    return mark__delegate(opts__9184__auto__, children__9185__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var menu = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menu__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__37734) {
    var opts__9184__auto__ = cljs.core.first(arglist__37734);
    var children__9185__auto__ = cljs.core.rest(arglist__37734);
    return menu__delegate(opts__9184__auto__, children__9185__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var menuitem = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menuitem__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__37735) {
    var opts__9184__auto__ = cljs.core.first(arglist__37735);
    var children__9185__auto__ = cljs.core.rest(arglist__37735);
    return menuitem__delegate(opts__9184__auto__, children__9185__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var meta = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meta__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__37736) {
    var opts__9184__auto__ = cljs.core.first(arglist__37736);
    var children__9185__auto__ = cljs.core.rest(arglist__37736);
    return meta__delegate(opts__9184__auto__, children__9185__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var meter = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meter__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__37737) {
    var opts__9184__auto__ = cljs.core.first(arglist__37737);
    var children__9185__auto__ = cljs.core.rest(arglist__37737);
    return meter__delegate(opts__9184__auto__, children__9185__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var nav = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nav__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__37738) {
    var opts__9184__auto__ = cljs.core.first(arglist__37738);
    var children__9185__auto__ = cljs.core.rest(arglist__37738);
    return nav__delegate(opts__9184__auto__, children__9185__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var noscript = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return noscript__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__37739) {
    var opts__9184__auto__ = cljs.core.first(arglist__37739);
    var children__9185__auto__ = cljs.core.rest(arglist__37739);
    return noscript__delegate(opts__9184__auto__, children__9185__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var object = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return object__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__37740) {
    var opts__9184__auto__ = cljs.core.first(arglist__37740);
    var children__9185__auto__ = cljs.core.rest(arglist__37740);
    return object__delegate(opts__9184__auto__, children__9185__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var ol = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ol__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__37741) {
    var opts__9184__auto__ = cljs.core.first(arglist__37741);
    var children__9185__auto__ = cljs.core.rest(arglist__37741);
    return ol__delegate(opts__9184__auto__, children__9185__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var optgroup = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return optgroup__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__37742) {
    var opts__9184__auto__ = cljs.core.first(arglist__37742);
    var children__9185__auto__ = cljs.core.rest(arglist__37742);
    return optgroup__delegate(opts__9184__auto__, children__9185__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var output = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return output__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__37743) {
    var opts__9184__auto__ = cljs.core.first(arglist__37743);
    var children__9185__auto__ = cljs.core.rest(arglist__37743);
    return output__delegate(opts__9184__auto__, children__9185__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var p = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return p__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__37744) {
    var opts__9184__auto__ = cljs.core.first(arglist__37744);
    var children__9185__auto__ = cljs.core.rest(arglist__37744);
    return p__delegate(opts__9184__auto__, children__9185__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var param = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return param__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__37745) {
    var opts__9184__auto__ = cljs.core.first(arglist__37745);
    var children__9185__auto__ = cljs.core.rest(arglist__37745);
    return param__delegate(opts__9184__auto__, children__9185__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var pre = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pre__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__37746) {
    var opts__9184__auto__ = cljs.core.first(arglist__37746);
    var children__9185__auto__ = cljs.core.rest(arglist__37746);
    return pre__delegate(opts__9184__auto__, children__9185__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var progress = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return progress__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__37747) {
    var opts__9184__auto__ = cljs.core.first(arglist__37747);
    var children__9185__auto__ = cljs.core.rest(arglist__37747);
    return progress__delegate(opts__9184__auto__, children__9185__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var q = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__37748) {
    var opts__9184__auto__ = cljs.core.first(arglist__37748);
    var children__9185__auto__ = cljs.core.rest(arglist__37748);
    return q__delegate(opts__9184__auto__, children__9185__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var rp = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rp__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__37749) {
    var opts__9184__auto__ = cljs.core.first(arglist__37749);
    var children__9185__auto__ = cljs.core.rest(arglist__37749);
    return rp__delegate(opts__9184__auto__, children__9185__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var rt = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rt__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__37750) {
    var opts__9184__auto__ = cljs.core.first(arglist__37750);
    var children__9185__auto__ = cljs.core.rest(arglist__37750);
    return rt__delegate(opts__9184__auto__, children__9185__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var ruby = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ruby__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__37751) {
    var opts__9184__auto__ = cljs.core.first(arglist__37751);
    var children__9185__auto__ = cljs.core.rest(arglist__37751);
    return ruby__delegate(opts__9184__auto__, children__9185__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var s = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return s__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__37752) {
    var opts__9184__auto__ = cljs.core.first(arglist__37752);
    var children__9185__auto__ = cljs.core.rest(arglist__37752);
    return s__delegate(opts__9184__auto__, children__9185__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var samp = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return samp__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__37753) {
    var opts__9184__auto__ = cljs.core.first(arglist__37753);
    var children__9185__auto__ = cljs.core.rest(arglist__37753);
    return samp__delegate(opts__9184__auto__, children__9185__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var script = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return script__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__37754) {
    var opts__9184__auto__ = cljs.core.first(arglist__37754);
    var children__9185__auto__ = cljs.core.rest(arglist__37754);
    return script__delegate(opts__9184__auto__, children__9185__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var section = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return section__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__37755) {
    var opts__9184__auto__ = cljs.core.first(arglist__37755);
    var children__9185__auto__ = cljs.core.rest(arglist__37755);
    return section__delegate(opts__9184__auto__, children__9185__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var select = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return select__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__37756) {
    var opts__9184__auto__ = cljs.core.first(arglist__37756);
    var children__9185__auto__ = cljs.core.rest(arglist__37756);
    return select__delegate(opts__9184__auto__, children__9185__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var small = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return small__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__37757) {
    var opts__9184__auto__ = cljs.core.first(arglist__37757);
    var children__9185__auto__ = cljs.core.rest(arglist__37757);
    return small__delegate(opts__9184__auto__, children__9185__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var source = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return source__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__37758) {
    var opts__9184__auto__ = cljs.core.first(arglist__37758);
    var children__9185__auto__ = cljs.core.rest(arglist__37758);
    return source__delegate(opts__9184__auto__, children__9185__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var span = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return span__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__37759) {
    var opts__9184__auto__ = cljs.core.first(arglist__37759);
    var children__9185__auto__ = cljs.core.rest(arglist__37759);
    return span__delegate(opts__9184__auto__, children__9185__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var strong = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return strong__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__37760) {
    var opts__9184__auto__ = cljs.core.first(arglist__37760);
    var children__9185__auto__ = cljs.core.rest(arglist__37760);
    return strong__delegate(opts__9184__auto__, children__9185__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var style = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return style__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__37761) {
    var opts__9184__auto__ = cljs.core.first(arglist__37761);
    var children__9185__auto__ = cljs.core.rest(arglist__37761);
    return style__delegate(opts__9184__auto__, children__9185__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var sub = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sub__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__37762) {
    var opts__9184__auto__ = cljs.core.first(arglist__37762);
    var children__9185__auto__ = cljs.core.rest(arglist__37762);
    return sub__delegate(opts__9184__auto__, children__9185__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var summary = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return summary__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__37763) {
    var opts__9184__auto__ = cljs.core.first(arglist__37763);
    var children__9185__auto__ = cljs.core.rest(arglist__37763);
    return summary__delegate(opts__9184__auto__, children__9185__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var sup = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sup__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__37764) {
    var opts__9184__auto__ = cljs.core.first(arglist__37764);
    var children__9185__auto__ = cljs.core.rest(arglist__37764);
    return sup__delegate(opts__9184__auto__, children__9185__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var table = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return table__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__37765) {
    var opts__9184__auto__ = cljs.core.first(arglist__37765);
    var children__9185__auto__ = cljs.core.rest(arglist__37765);
    return table__delegate(opts__9184__auto__, children__9185__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var tbody = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tbody__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__37766) {
    var opts__9184__auto__ = cljs.core.first(arglist__37766);
    var children__9185__auto__ = cljs.core.rest(arglist__37766);
    return tbody__delegate(opts__9184__auto__, children__9185__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var td = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return td__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__37767) {
    var opts__9184__auto__ = cljs.core.first(arglist__37767);
    var children__9185__auto__ = cljs.core.rest(arglist__37767);
    return td__delegate(opts__9184__auto__, children__9185__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var tfoot = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tfoot__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__37768) {
    var opts__9184__auto__ = cljs.core.first(arglist__37768);
    var children__9185__auto__ = cljs.core.rest(arglist__37768);
    return tfoot__delegate(opts__9184__auto__, children__9185__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var th = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return th__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__37769) {
    var opts__9184__auto__ = cljs.core.first(arglist__37769);
    var children__9185__auto__ = cljs.core.rest(arglist__37769);
    return th__delegate(opts__9184__auto__, children__9185__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var thead = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return thead__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__37770) {
    var opts__9184__auto__ = cljs.core.first(arglist__37770);
    var children__9185__auto__ = cljs.core.rest(arglist__37770);
    return thead__delegate(opts__9184__auto__, children__9185__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var time = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return time__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__37771) {
    var opts__9184__auto__ = cljs.core.first(arglist__37771);
    var children__9185__auto__ = cljs.core.rest(arglist__37771);
    return time__delegate(opts__9184__auto__, children__9185__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var title = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return title__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__37772) {
    var opts__9184__auto__ = cljs.core.first(arglist__37772);
    var children__9185__auto__ = cljs.core.rest(arglist__37772);
    return title__delegate(opts__9184__auto__, children__9185__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var tr = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tr__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__37773) {
    var opts__9184__auto__ = cljs.core.first(arglist__37773);
    var children__9185__auto__ = cljs.core.rest(arglist__37773);
    return tr__delegate(opts__9184__auto__, children__9185__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var track = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return track__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__37774) {
    var opts__9184__auto__ = cljs.core.first(arglist__37774);
    var children__9185__auto__ = cljs.core.rest(arglist__37774);
    return track__delegate(opts__9184__auto__, children__9185__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var u = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return u__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__37775) {
    var opts__9184__auto__ = cljs.core.first(arglist__37775);
    var children__9185__auto__ = cljs.core.rest(arglist__37775);
    return u__delegate(opts__9184__auto__, children__9185__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var ul = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ul__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__37776) {
    var opts__9184__auto__ = cljs.core.first(arglist__37776);
    var children__9185__auto__ = cljs.core.rest(arglist__37776);
    return ul__delegate(opts__9184__auto__, children__9185__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var var$ = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return var$__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__37777) {
    var opts__9184__auto__ = cljs.core.first(arglist__37777);
    var children__9185__auto__ = cljs.core.rest(arglist__37777);
    return var$__delegate(opts__9184__auto__, children__9185__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var video = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return video__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__37778) {
    var opts__9184__auto__ = cljs.core.first(arglist__37778);
    var children__9185__auto__ = cljs.core.rest(arglist__37778);
    return video__delegate(opts__9184__auto__, children__9185__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var wbr = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wbr__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__37779) {
    var opts__9184__auto__ = cljs.core.first(arglist__37779);
    var children__9185__auto__ = cljs.core.rest(arglist__37779);
    return wbr__delegate(opts__9184__auto__, children__9185__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var circle = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return circle__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__37780) {
    var opts__9184__auto__ = cljs.core.first(arglist__37780);
    var children__9185__auto__ = cljs.core.rest(arglist__37780);
    return circle__delegate(opts__9184__auto__, children__9185__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.g = function() {
  var g__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var g = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return g__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__37781) {
    var opts__9184__auto__ = cljs.core.first(arglist__37781);
    var children__9185__auto__ = cljs.core.rest(arglist__37781);
    return g__delegate(opts__9184__auto__, children__9185__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var line = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return line__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__37782) {
    var opts__9184__auto__ = cljs.core.first(arglist__37782);
    var children__9185__auto__ = cljs.core.rest(arglist__37782);
    return line__delegate(opts__9184__auto__, children__9185__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var path = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return path__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__37783) {
    var opts__9184__auto__ = cljs.core.first(arglist__37783);
    var children__9185__auto__ = cljs.core.rest(arglist__37783);
    return path__delegate(opts__9184__auto__, children__9185__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var polyline = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polyline__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__37784) {
    var opts__9184__auto__ = cljs.core.first(arglist__37784);
    var children__9185__auto__ = cljs.core.rest(arglist__37784);
    return polyline__delegate(opts__9184__auto__, children__9185__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var rect = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rect__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__37785) {
    var opts__9184__auto__ = cljs.core.first(arglist__37785);
    var children__9185__auto__ = cljs.core.rest(arglist__37785);
    return rect__delegate(opts__9184__auto__, children__9185__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var svg = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return svg__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__37786) {
    var opts__9184__auto__ = cljs.core.first(arglist__37786);
    var children__9185__auto__ = cljs.core.rest(arglist__37786);
    return svg__delegate(opts__9184__auto__, children__9185__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__9184__auto__, children__9185__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__9184__auto__, children__9185__auto__)));
  };
  var text = function(opts__9184__auto__, var_args) {
    var children__9185__auto__ = null;
    if (arguments.length > 1) {
      children__9185__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return text__delegate.call(this, opts__9184__auto__, children__9185__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__37787) {
    var opts__9184__auto__ = cljs.core.first(arglist__37787);
    var children__9185__auto__ = cljs.core.rest(arglist__37787);
    return text__delegate(opts__9184__auto__, children__9185__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }});
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input);
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea);
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option);
om.dom.render = function render(component, el) {
  return React.renderComponent(component, el);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("om.dom");
om.core._STAR_read_enabled_STAR_ = false;
om.core.IInitState = function() {
  var obj37566 = {};
  return obj37566;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.init_state[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.init_state["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj37568 = {};
  return obj37568;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.should_update[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.should_update["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj37570 = {};
  return obj37570;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.will_mount[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.will_mount["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj37572 = {};
  return obj37572;
}();
om.core.did_mount = function did_mount(this$, node) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$2(this$, node);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.did_mount[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.did_mount["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$, node);
  }
};
om.core.IWillUnmount = function() {
  var obj37574 = {};
  return obj37574;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.will_unmount[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.will_unmount["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj37576 = {};
  return obj37576;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.will_update[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.will_update["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj37578 = {};
  return obj37578;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state, root_node) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$4;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$4(this$, prev_props, prev_state, root_node);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.did_update[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.did_update["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state, root_node);
  }
};
om.core.IRender = function() {
  var obj37580 = {};
  return obj37580;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.render[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.render["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderState = function() {
  var obj37582 = {};
  return obj37582;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = om.core.render_state[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core.render_state["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.IValue = function() {
  var obj37584 = {};
  return obj37584;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3394__auto__ = x;
    if (and__3394__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4027__auto__ = x == null ? null : x;
    return function() {
      var or__3406__auto__ = om.core._value[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core._value["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj37586 = {};
  return obj37586;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3394__auto__ = cursor;
    if (and__3394__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4027__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3406__auto__ = om.core._path[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core._path["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3394__auto__ = cursor;
    if (and__3394__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4027__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3406__auto__ = om.core._state[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core._state["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._shared = function _shared(cursor) {
  if (function() {
    var and__3394__auto__ = cursor;
    if (and__3394__auto__) {
      return cursor.om$core$ICursor$_shared$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_shared$arity$1(cursor);
  } else {
    var x__4027__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3406__auto__ = om.core._shared[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core._shared["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-shared", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj37588 = {};
  return obj37588;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3394__auto__ = value;
      if (and__3394__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4027__auto__ = value == null ? null : value;
      return function() {
        var or__3406__auto__ = om.core._to_cursor[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = om.core._to_cursor["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3394__auto__ = value;
      if (and__3394__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4027__auto__ = value == null ? null : value;
      return function() {
        var or__3406__auto__ = om.core._to_cursor[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = om.core._to_cursor["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  var _to_cursor__4 = function(value, state, path, shared) {
    if (function() {
      var and__3394__auto__ = value;
      if (and__3394__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$4;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$4(value, state, path, shared);
    } else {
      var x__4027__auto__ = value == null ? null : value;
      return function() {
        var or__3406__auto__ = om.core._to_cursor[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = om.core._to_cursor["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path, shared);
    }
  };
  _to_cursor = function(value, state, path, shared) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
      case 4:
        return _to_cursor__4.call(this, value, state, path, shared);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  _to_cursor.cljs$core$IFn$_invoke$arity$4 = _to_cursor__4;
  return _to_cursor;
}();
om.core.ITransact = function() {
  var obj37590 = {};
  return obj37590;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, f) {
  if (function() {
    var and__3394__auto__ = cursor;
    if (and__3394__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$2(cursor, f);
  } else {
    var x__4027__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3406__auto__ = om.core._transact_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, f);
  }
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.fn_QMARK_.call(null, c)) {
    return node.props.children = function() {
      var _STAR_read_enabled_STAR_37592 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        return c.call(null, node);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37592;
      }
    }();
  } else {
    return c;
  }
};
om.core.get_props = function get_props(x) {
  return x.props["__om_cursor"];
};
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    var state = owner.state;
    var or__3406__auto__ = state["__om_pending_state"];
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return state["__om_state"];
    }
  };
  var get_state__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_state.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_state.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_state.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    return om.core._shared.call(null, om.core.get_props.call(null, owner));
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4092__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var pending_state = temp__4092__auto__;
    var G__37594 = state;
    G__37594["__om_prev_state"] = state["__om_state"];
    G__37594["__om_state"] = pending_state;
    G__37594["__om_pending_state"] = null;
    return G__37594;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3406__auto__ = props;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4092__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4092__auto__)) {
      var props_state = temp__4092__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3406__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.Pure = React.createClass({"render":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var _STAR_read_enabled_STAR_37609 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    if (function() {
      var G__37610 = c;
      if (G__37610) {
        var bit__4050__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3406__auto__ = bit__4050__auto__;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return G__37610.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__37610.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__37610);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__37610);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__37611 = c;
        if (G__37611) {
          var bit__4050__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3406__auto__ = bit__4050__auto__;
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return G__37611.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__37611.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__37611);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__37611);
        }
      }()) {
        return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return c;
        } else {
          return null;
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37609;
  }
}, "componentDidUpdate":function(prev_props, prev_state, root_node) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__37607 = c;
    if (G__37607) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37607.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__37607.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__37607);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__37607);
    }
  }()) {
    var state_37612 = this$.state;
    var _STAR_read_enabled_STAR_37608_37613 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props}), function() {
        var or__3406__auto__ = state_37612["__om_prev_state"];
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return state_37612["__om_state"];
        }
      }(), root_node);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37608_37613;
    }
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, "componentWillUpdate":function(next_props, next_state) {
  var this$ = this;
  var c_37614 = om.core.children.call(null, this$);
  if (function() {
    var G__37605 = c_37614;
    if (G__37605) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37605.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__37605.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__37605);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__37605);
    }
  }()) {
    var state_37615 = this$.state;
    var _STAR_read_enabled_STAR_37606_37616 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_update.call(null, c_37614, om.core.get_props.call(null, {"props":next_props}), function() {
        var or__3406__auto__ = state_37615["__om_pending_state"];
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return state_37615["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37606_37616;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, "componentWillUnmount":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__37603 = c;
    if (G__37603) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37603.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__37603.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__37603);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__37603);
    }
  }()) {
    var _STAR_read_enabled_STAR_37604 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_unmount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37604;
    }
  } else {
    return null;
  }
}, "componentDidMount":function(node) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__37601 = c;
    if (G__37601) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37601.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__37601.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__37601);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__37601);
    }
  }()) {
    var _STAR_read_enabled_STAR_37602 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.did_mount.call(null, c, node);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37602;
    }
  } else {
    return null;
  }
}, "componentWillMount":function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_37617 = om.core.children.call(null, this$);
  if (function() {
    var G__37599 = c_37617;
    if (G__37599) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37599.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__37599.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__37599);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__37599);
    }
  }()) {
    var _STAR_read_enabled_STAR_37600_37618 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_mount.call(null, c_37617);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37600_37618;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, "shouldComponentUpdate":function(next_props, next_state) {
  var this$ = this;
  var _STAR_read_enabled_STAR_37597 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = this$.props;
    var state = this$.state;
    var c = om.core.children.call(null, this$);
    om.core.merge_props_state.call(null, this$, next_props);
    if (function() {
      var G__37598 = c;
      if (G__37598) {
        var bit__4050__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3406__auto__ = bit__4050__auto__;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return G__37598.om$core$IShouldUpdate$;
          }
        }())) {
          return true;
        } else {
          if (!G__37598.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__37598);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__37598);
      }
    }()) {
      return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props}), this$.state["__om_pending_state"]);
    } else {
      if (!(om.core._value.call(null, props["__om_cursor"]) === om.core._value.call(null, next_props["__om_cursor"]))) {
        return true;
      } else {
        if (!(state["__om_pending_state"] == null)) {
          return true;
        } else {
          if (!(props["__om_index"] === next_props["__om_index"])) {
            return true;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37597;
  }
}, "getInitialState":function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3406__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var ret = {"__om_state":cljs.core.merge.call(null, istate, function() {
    var G__37595 = c;
    if (G__37595) {
      var bit__4050__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = bit__4050__auto__;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return G__37595.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__37595.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__37595);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__37595);
    }
  }() ? function() {
    var _STAR_read_enabled_STAR_37596 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.init_state.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37596;
    }
  }() : null)};
  props["__om_init_state"] = null;
  return ret;
}});
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__37620 = x;
  if (G__37620) {
    var bit__4050__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3406__auto__ = bit__4050__auto__;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return G__37620.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__37620.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__37620);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__37620);
  }
};
om.core.MapCursor = function(value, state, path, shared) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.shared = shared;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2158397195;
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "om.core/MapCursor");
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(_, k, not_found) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    var v = cljs.core._lookup.call(null, self__.value, k, not_found);
    if (!cljs.core._EQ_.call(null, v, not_found)) {
      return om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, k), self__.shared);
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.call = function() {
  var G__37624 = null;
  var G__37624__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__37624__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__37624 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__37624__2.call(this, self__, k);
      case 3:
        return G__37624__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__37624;
}();
om.core.MapCursor.prototype.apply = function(self__, args37621) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args37621)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.path;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.state;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ICursor$_shared$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.shared;
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.value;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(p__37622) {
        var vec__37623 = p__37622;
        var k = cljs.core.nth.call(null, vec__37623, 0, null);
        var v = cljs.core.nth.call(null, vec__37623, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, k), self__.shared)], null);
      }, self__.value);
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICloneable$ = true;
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path, self__.shared);
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.state, f, self__.path);
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path, shared) {
  return new om.core.MapCursor(value, state, path, shared);
};
om.core.IndexedCursor = function(value, state, path, shared) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.shared = shared;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2175181595;
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "om.core/IndexedCursor");
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, null);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, not_found);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, n, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.call = function() {
  var G__37626 = null;
  var G__37626__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__37626__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__37626 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__37626__2.call(this, self__, k);
      case 3:
        return G__37626__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__37626;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args37625) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args37625)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.path;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.state;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ICursor$_shared$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.shared;
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return self__.value;
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(v, i) {
        return om.core.to_cursor.call(null, v, self__.state, cljs.core.conj.call(null, self__.path, i), self__.shared);
      }, self__.value, cljs.core.range.call(null));
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._peek.call(null, self__.value), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._pop.call(null, self__.value), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path, self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$ = true;
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path, self__.shared);
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(_, n) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core.to_cursor.call(null, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n), self__.shared);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(_, n, not_found) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (n < cljs.core._count.call(null, self__.value)) {
      return om.core.to_cursor.call(null, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n), self__.shared);
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.state, f, self__.path);
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path, shared) {
  return new om.core.IndexedCursor(value, state, path, shared);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path, shared) {
  var x37628 = cljs.core.clone.call(null, val);
  x37628.cljs$core$IEquiv$ = true;
  x37628.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
    var ___$1 = this;
    if (om.core._STAR_read_enabled_STAR_) {
      if (om.core.cursor_QMARK_.call(null, other)) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    } else {
      throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
    }
  };
  x37628.om$core$ITransact$ = true;
  x37628.om$core$ITransact$_transact_BANG_$arity$2 = function(_, f) {
    var ___$1 = this;
    return cljs.core.swap_BANG_.call(null, state, f, path);
  };
  x37628.om$core$ICursor$ = true;
  x37628.om$core$ICursor$_state$arity$1 = function(_) {
    var ___$1 = this;
    if (om.core._STAR_read_enabled_STAR_) {
      return state;
    } else {
      throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
    }
  };
  x37628.om$core$ICursor$_path$arity$1 = function(_) {
    var ___$1 = this;
    if (om.core._STAR_read_enabled_STAR_) {
      return path;
    } else {
      throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
    }
  };
  x37628.om$core$ICursor$_shared$arity$1 = function(_) {
    var ___$1 = this;
    return shared;
  };
  x37628.cljs$core$IDeref$ = true;
  x37628.cljs$core$IDeref$_deref$arity$1 = function(this$) {
    var this$__$1 = this;
    if (!om.core._STAR_read_enabled_STAR_) {
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path);
    } else {
      throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
    }
  };
  return x37628;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY, null);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY, null);
  };
  var to_cursor__3 = function(val, state, path) {
    return to_cursor.call(null, val, state, path, null);
  };
  var to_cursor__4 = function(val, state, path, shared) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__37631 = val;
        if (G__37631) {
          var bit__4050__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3406__auto__ = bit__4050__auto__;
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return G__37631.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__37631.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__37631);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__37631);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path, shared);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path, shared);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path, shared);
          } else {
            if (function() {
              var G__37632 = val;
              if (G__37632) {
                var bit__4050__auto__ = null;
                if (cljs.core.truth_(function() {
                  var or__3406__auto__ = bit__4050__auto__;
                  if (cljs.core.truth_(or__3406__auto__)) {
                    return or__3406__auto__;
                  } else {
                    return G__37632.cljs$core$ICloneable$;
                  }
                }())) {
                  return true;
                } else {
                  if (!G__37632.cljs$lang$protocol_mask$partition$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__37632);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__37632);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path, shared);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return val;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path, shared) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
      case 4:
        return to_cursor__4.call(this, val, state, path, shared);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  to_cursor.cljs$core$IFn$_invoke$arity$4 = to_cursor__4;
  return to_cursor;
}();
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.render_all = function render_all() {
  om.core.refresh_queued = false;
  var seq__37637 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__37638 = null;
  var count__37639 = 0;
  var i__37640 = 0;
  while (true) {
    if (i__37640 < count__37639) {
      var f = cljs.core._nth.call(null, chunk__37638, i__37640);
      f.call(null);
      var G__37641 = seq__37637;
      var G__37642 = chunk__37638;
      var G__37643 = count__37639;
      var G__37644 = i__37640 + 1;
      seq__37637 = G__37641;
      chunk__37638 = G__37642;
      count__37639 = G__37643;
      i__37640 = G__37644;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__37637);
      if (temp__4092__auto__) {
        var seq__37637__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__37637__$1)) {
          var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__37637__$1);
          var G__37645 = cljs.core.chunk_rest.call(null, seq__37637__$1);
          var G__37646 = c__4148__auto__;
          var G__37647 = cljs.core.count.call(null, c__4148__auto__);
          var G__37648 = 0;
          seq__37637 = G__37645;
          chunk__37638 = G__37646;
          count__37639 = G__37647;
          i__37640 = G__37648;
          continue;
        } else {
          var f = cljs.core.first.call(null, seq__37637__$1);
          f.call(null);
          var G__37649 = cljs.core.next.call(null, seq__37637__$1);
          var G__37650 = null;
          var G__37651 = 0;
          var G__37652 = 0;
          seq__37637 = G__37649;
          chunk__37638 = G__37650;
          count__37639 = G__37651;
          i__37640 = G__37652;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.root = function() {
  var root = null;
  var root__3 = function(value, f, target) {
    return root.call(null, value, null, f, target);
  };
  var root__4 = function(value, shared, f, target) {
    var roots_SINGLEQUOTE__37657 = cljs.core.deref.call(null, om.core.roots);
    if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__37657, target)) {
      cljs.core.get.call(null, roots_SINGLEQUOTE__37657, target).call(null);
    } else {
    }
    var state = value instanceof cljs.core.Atom ? value : cljs.core.atom.call(null, value);
    var rootf = function(state) {
      return function rootf() {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
        var value__$1 = cljs.core.deref.call(null, state);
        var cursor = om.core.to_cursor.call(null, value__$1, state, cljs.core.PersistentVector.EMPTY, shared);
        return React.renderComponent(new om.core.Pure({"__om_cursor":cursor}, function(value__$1, cursor, state) {
          return function(this$) {
            var _STAR_read_enabled_STAR_37656 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor, this$);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37656;
            }
          };
        }(value__$1, cursor, state)), target);
      };
    }(state);
    var watch_key = cljs.core.gensym.call(null);
    cljs.core.add_watch.call(null, state, watch_key, function(_, ___$1, ___$2, ___$3) {
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (typeof requestAnimationFrame !== "undefined") {
          return requestAnimationFrame(om.core.render_all);
        } else {
          return setTimeout(om.core.render_all, 16);
        }
      }
    });
    cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function() {
      cljs.core.remove_watch.call(null, state, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    });
    return rootf.call(null);
  };
  root = function(value, shared, f, target) {
    switch(arguments.length) {
      case 3:
        return root__3.call(this, value, shared, f);
      case 4:
        return root__4.call(this, value, shared, f, target);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  root.cljs$core$IFn$_invoke$arity$3 = root__3;
  root.cljs$core$IFn$_invoke$arity$4 = root__4;
  return root;
}();
om.core.valid_QMARK_ = function valid_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), null, new cljs.core.Keyword(null, "state", "state", 1123661827), null, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), null, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), null, new cljs.core.Keyword(null, "key", "key", 1014010321), null, new cljs.core.Keyword(null, 
  "opts", "opts", 1017322386), null, new cljs.core.Keyword(null, "fn", "fn", 1013907514), null], null), null), cljs.core.keys.call(null, m));
};
om.core.build = function() {
  var build = null;
  var build__2 = function(f, cursor) {
    return build.call(null, f, cursor, null);
  };
  var build__3 = function(f, cursor, m) {
    if (om.core.valid_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid?", "valid?", 1830611324, null), new cljs.core.Symbol(null, "m", "m", -1640531418, null))))].join(""));
    }
    if (m == null) {
      var pure__9242__auto__ = new om.core.Pure({"__om_cursor":cursor}, function(this$) {
        var _STAR_read_enabled_STAR_37662 = om.core._STAR_read_enabled_STAR_;
        try {
          om.core._STAR_read_enabled_STAR_ = true;
          return f.call(null, cursor, this$);
        } finally {
          om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37662;
        }
      });
      pure__9242__auto__.constructor = goog.getUid(f);
      return pure__9242__auto__;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var map__37663 = m;
        var map__37663__$1 = cljs.core.seq_QMARK_.call(null, map__37663) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37663) : map__37663;
        var opts = cljs.core.get.call(null, map__37663__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
        var init_state = cljs.core.get.call(null, map__37663__$1, new cljs.core.Keyword(null, "init-state", "init-state", 4479067398));
        var state = cljs.core.get.call(null, map__37663__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
        var key = cljs.core.get.call(null, map__37663__$1, new cljs.core.Keyword(null, "key", "key", 1014010321));
        var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", 1013907514));
        var cursor_SINGLEQUOTE_ = !(dataf == null) ? dataf.call(null, cursor) : cursor;
        var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563));
        var pure__9242__auto__ = new om.core.Pure({"key":rkey, "__om_state":state, "__om_init_state":init_state, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m), "__om_cursor":cursor_SINGLEQUOTE_}, opts == null ? function(this$) {
          var _STAR_read_enabled_STAR_37664 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor_SINGLEQUOTE_, this$);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37664;
          }
        } : function(this$) {
          var _STAR_read_enabled_STAR_37665 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor_SINGLEQUOTE_, this$, opts);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37665;
          }
        });
        pure__9242__auto__.constructor = goog.getUid(f);
        return pure__9242__auto__;
      } else {
        return null;
      }
    }
  };
  build = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, cursor);
      case 3:
        return build__3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return om.core._transact_BANG_.call(null, cursor, function(state, path) {
      if (cljs.core.empty_QMARK_.call(null, path)) {
        return f.call(null, state);
      } else {
        return cljs.core.update_in.call(null, state, path, f);
      }
    });
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9228__auto__, path__9229__auto__) {
      if (!cljs.core.sequential_QMARK_.call(null, korks)) {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.conj.call(null, path__9229__auto__, korks), f);
      } else {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.into.call(null, path__9229__auto__, korks), f);
      }
    });
  };
  var transact_BANG___4 = function(cursor, korks, f, a) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9228__auto__, path__9229__auto__) {
      if (!cljs.core.sequential_QMARK_.call(null, korks)) {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.conj.call(null, path__9229__auto__, korks), f, a);
      } else {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.into.call(null, path__9229__auto__, korks), f, a);
      }
    });
  };
  var transact_BANG___5 = function(cursor, korks, f, a, b) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9228__auto__, path__9229__auto__) {
      if (!cljs.core.sequential_QMARK_.call(null, korks)) {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.conj.call(null, path__9229__auto__, korks), f, a, b);
      } else {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.into.call(null, path__9229__auto__, korks), f, a, b);
      }
    });
  };
  var transact_BANG___6 = function(cursor, korks, f, a, b, c) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9228__auto__, path__9229__auto__) {
      if (!cljs.core.sequential_QMARK_.call(null, korks)) {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.conj.call(null, path__9229__auto__, korks), f, a, b, c);
      } else {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.into.call(null, path__9229__auto__, korks), f, a, b, c);
      }
    });
  };
  var transact_BANG___7 = function(cursor, korks, f, a, b, c, d) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9228__auto__, path__9229__auto__) {
      if (!cljs.core.sequential_QMARK_.call(null, korks)) {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.conj.call(null, path__9229__auto__, korks), f, a, b, c, d);
      } else {
        return cljs.core.update_in.call(null, state__9228__auto__, cljs.core.into.call(null, path__9229__auto__, korks), f, a, b, c, d);
      }
    });
  };
  var transact_BANG___8 = function() {
    var G__37666__delegate = function(cursor, korks, f, a, b, c, d, args) {
      return om.core._transact_BANG_.call(null, cursor, function(state, path) {
        if (!cljs.core.sequential_QMARK_.call(null, korks)) {
          return cljs.core.apply.call(null, cljs.core.update_in, state, cljs.core.conj.call(null, path, korks), f, a, b, c, d, args);
        } else {
          return cljs.core.apply.call(null, cljs.core.update_in, state, cljs.core.into.call(null, path, korks), f, a, b, c, d, args);
        }
      });
    };
    var G__37666 = function(cursor, korks, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 7) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 7), 0);
      }
      return G__37666__delegate.call(this, cursor, korks, f, a, b, c, d, args);
    };
    G__37666.cljs$lang$maxFixedArity = 7;
    G__37666.cljs$lang$applyTo = function(arglist__37667) {
      var cursor = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var korks = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var f = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var a = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var b = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var c = cljs.core.first(arglist__37667);
      arglist__37667 = cljs.core.next(arglist__37667);
      var d = cljs.core.first(arglist__37667);
      var args = cljs.core.rest(arglist__37667);
      return G__37666__delegate(cursor, korks, f, a, b, c, d, args);
    };
    G__37666.cljs$core$IFn$_invoke$arity$variadic = G__37666__delegate;
    return G__37666;
  }();
  transact_BANG_ = function(cursor, korks, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, a);
      case 5:
        return transact_BANG___5.call(this, cursor, korks, f, a, b);
      case 6:
        return transact_BANG___6.call(this, cursor, korks, f, a, b, c);
      case 7:
        return transact_BANG___7.call(this, cursor, korks, f, a, b, c, d);
      default:
        return transact_BANG___8.cljs$core$IFn$_invoke$arity$variadic(cursor, korks, f, a, b, c, d, cljs.core.array_seq(arguments, 7));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$lang$maxFixedArity = 7;
  transact_BANG_.cljs$lang$applyTo = transact_BANG___8.cljs$lang$applyTo;
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  transact_BANG_.cljs$core$IFn$_invoke$arity$5 = transact_BANG___5;
  transact_BANG_.cljs$core$IFn$_invoke$arity$6 = transact_BANG___6;
  transact_BANG_.cljs$core$IFn$_invoke$arity$7 = transact_BANG___7;
  transact_BANG_.cljs$core$IFn$_invoke$arity$variadic = transact_BANG___8.cljs$core$IFn$_invoke$arity$variadic;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, f) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9235__auto__, path__9236__auto__) {
      if (cljs.core.empty_QMARK_.call(null, path__9236__auto__)) {
        return f.call(null, state__9235__auto__);
      } else {
        return cljs.core.update_in.call(null, state__9235__auto__, path__9236__auto__, f);
      }
    });
  };
  var update_BANG___3 = function(cursor, f, a) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9235__auto__, path__9236__auto__) {
      if (cljs.core.empty_QMARK_.call(null, path__9236__auto__)) {
        return f.call(null, state__9235__auto__, a);
      } else {
        return cljs.core.update_in.call(null, state__9235__auto__, path__9236__auto__, f, a);
      }
    });
  };
  var update_BANG___4 = function(cursor, f, a, b) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9235__auto__, path__9236__auto__) {
      if (cljs.core.empty_QMARK_.call(null, path__9236__auto__)) {
        return f.call(null, state__9235__auto__, a, b);
      } else {
        return cljs.core.update_in.call(null, state__9235__auto__, path__9236__auto__, f, a, b);
      }
    });
  };
  var update_BANG___5 = function(cursor, f, a, b, c) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9235__auto__, path__9236__auto__) {
      if (cljs.core.empty_QMARK_.call(null, path__9236__auto__)) {
        return f.call(null, state__9235__auto__, a, b, c);
      } else {
        return cljs.core.update_in.call(null, state__9235__auto__, path__9236__auto__, f, a, b, c);
      }
    });
  };
  var update_BANG___6 = function(cursor, f, a, b, c, d) {
    return om.core._transact_BANG_.call(null, cursor, function(state__9235__auto__, path__9236__auto__) {
      if (cljs.core.empty_QMARK_.call(null, path__9236__auto__)) {
        return f.call(null, state__9235__auto__, a, b, c, d);
      } else {
        return cljs.core.update_in.call(null, state__9235__auto__, path__9236__auto__, f, a, b, c, d);
      }
    });
  };
  var update_BANG___7 = function() {
    var G__37668__delegate = function(cursor, f, a, b, c, d, args) {
      return om.core._transact_BANG_.call(null, cursor, function(state, path) {
        if (cljs.core.empty_QMARK_.call(null, path)) {
          return cljs.core.apply.call(null, f, state, a, b, c, d, args);
        } else {
          return cljs.core.apply.call(null, cljs.core.update_in, state, path, f, a, b, c, d, args);
        }
      });
    };
    var G__37668 = function(cursor, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__37668__delegate.call(this, cursor, f, a, b, c, d, args);
    };
    G__37668.cljs$lang$maxFixedArity = 6;
    G__37668.cljs$lang$applyTo = function(arglist__37669) {
      var cursor = cljs.core.first(arglist__37669);
      arglist__37669 = cljs.core.next(arglist__37669);
      var f = cljs.core.first(arglist__37669);
      arglist__37669 = cljs.core.next(arglist__37669);
      var a = cljs.core.first(arglist__37669);
      arglist__37669 = cljs.core.next(arglist__37669);
      var b = cljs.core.first(arglist__37669);
      arglist__37669 = cljs.core.next(arglist__37669);
      var c = cljs.core.first(arglist__37669);
      arglist__37669 = cljs.core.next(arglist__37669);
      var d = cljs.core.first(arglist__37669);
      var args = cljs.core.rest(arglist__37669);
      return G__37668__delegate(cursor, f, a, b, c, d, args);
    };
    G__37668.cljs$core$IFn$_invoke$arity$variadic = G__37668__delegate;
    return G__37668;
  }();
  update_BANG_ = function(cursor, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, f);
      case 3:
        return update_BANG___3.call(this, cursor, f, a);
      case 4:
        return update_BANG___4.call(this, cursor, f, a, b);
      case 5:
        return update_BANG___5.call(this, cursor, f, a, b, c);
      case 6:
        return update_BANG___6.call(this, cursor, f, a, b, c, d);
      default:
        return update_BANG___7.cljs$core$IFn$_invoke$arity$variadic(cursor, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$lang$maxFixedArity = 6;
  update_BANG_.cljs$lang$applyTo = update_BANG___7.cljs$lang$applyTo;
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  update_BANG_.cljs$core$IFn$_invoke$arity$5 = update_BANG___5;
  update_BANG_.cljs$core$IFn$_invoke$arity$6 = update_BANG___6;
  update_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_BANG___7.cljs$core$IFn$_invoke$arity$variadic;
  return update_BANG_;
}();
om.core.get_node = function get_node(owner, name) {
  var temp__4092__auto__ = owner.refs;
  if (cljs.core.truth_(temp__4092__auto__)) {
    var refs = temp__4092__auto__;
    return refs[name].getDOMNode();
  } else {
    return null;
  }
};
om.core.set_state_BANG_ = function set_state_BANG_(owner, korks, v) {
  var _STAR_read_enabled_STAR_37671 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = owner.props;
    var state = owner.state;
    var cursor = props["__om_cursor"];
    var path = om.core._path.call(null, cursor);
    var pstate = function() {
      var or__3406__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return state["__om_state"];
      }
    }();
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      state["__om_pending_state"] = cljs.core.assoc.call(null, pstate, korks, v);
    } else {
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, korks, v);
    }
    if (cljs.core.empty_QMARK_.call(null, path)) {
      return cljs.core.swap_BANG_.call(null, om.core._state.call(null, cursor), cljs.core.clone);
    } else {
      return cljs.core.swap_BANG_.call(null, om.core._state.call(null, cursor), cljs.core.update_in, path, cljs.core.clone);
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_37671;
  }
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    return owner.state["__om_state"];
  };
  var get_render_state__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_render_state.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_render_state.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_render_state.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
om.core.graft = function graft(value, cursor) {
  var state = om.core._state.call(null, cursor);
  var path = om.core._path.call(null, cursor);
  var shared = om.core._shared.call(null, cursor);
  if (om.core.cursor_QMARK_.call(null, value)) {
    throw new Error([cljs.core.str(value), cljs.core.str(" is already a cursor.")].join(""));
  } else {
    var x37673 = cljs.core.clone.call(null, value);
    x37673.om$core$ICursor$ = true;
    x37673.om$core$ICursor$_state$arity$1 = function(_) {
      var ___$1 = this;
      return state;
    };
    x37673.om$core$ICursor$_path$arity$1 = function(_) {
      var ___$1 = this;
      return path;
    };
    x37673.om$core$ICursor$_shared$arity$1 = function(_) {
      var ___$1 = this;
      return shared;
    };
    x37673.om$core$IValue$ = true;
    x37673.om$core$IValue$_value$arity$1 = function(_) {
      var ___$1 = this;
      return value;
    };
    x37673.om$core$ITransact$ = true;
    x37673.om$core$ITransact$_transact_BANG_$arity$2 = function(_, ___$1) {
      var ___$2 = this;
      throw new Error("Cannot transact on graft");
    };
    return x37673;
  }
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("clustermap.formats.number");
goog.require("cljs.core");
goog.require("goog.string.format");
goog.require("goog.string");
goog.require("goog.string");
goog.require("clojure.string");
goog.require("clojure.string");
clustermap.formats.number.round_decimal = function round_decimal(n, dec_places) {
  if (cljs.core.truth_(dec_places)) {
    return Math.round(n * Math.pow(10, dec_places)) / Math.pow(10, dec_places);
  } else {
    return n;
  }
};
clustermap.formats.number.prefix_sign = function prefix_sign(n_str, n, plus_QMARK_) {
  if (n < 0) {
    return[cljs.core.str("-"), cljs.core.str(n_str)].join("");
  } else {
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = plus_QMARK_;
      if (cljs.core.truth_(and__3394__auto__)) {
        return n > 0;
      } else {
        return and__3394__auto__;
      }
    }())) {
      return[cljs.core.str("+"), cljs.core.str(n_str)].join("");
    } else {
      if (true) {
        return n_str;
      } else {
        return null;
      }
    }
  }
};
clustermap.formats.number.split_thousands = function split_thousands(n_str) {
  return clojure.string.join.call(null, ",", cljs.core.map.call(null, function(p1__33708_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.str, p1__33708_SHARP_);
  }, cljs.core.reverse.call(null, cljs.core.map.call(null, cljs.core.reverse, cljs.core.partition.call(null, 3, 3, cljs.core.PersistentVector.EMPTY, cljs.core.reverse.call(null, n_str))))));
};
clustermap.formats.number.eng_notation = function() {
  var eng_notation__delegate = function(n, p__33709) {
    var map__33714 = p__33709;
    var map__33714__$1 = cljs.core.seq_QMARK_.call(null, map__33714) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33714) : map__33714;
    var sf = cljs.core.get.call(null, map__33714__$1, new cljs.core.Keyword(null, "sf", "sf", 1013907909));
    if (cljs.core.truth_(n)) {
      var sign = n > 0 ? 1 : cljs.core._EQ_.call(null, n, 0) ? 0 : n < 0 ? -1 : null;
      var abs_n = Math.abs(n);
      var vec__33715 = [cljs.core.str(abs_n)].join("").split(".");
      var i = cljs.core.nth.call(null, vec__33715, 0, null);
      var d = cljs.core.nth.call(null, vec__33715, 1, null);
      var exp = abs_n >= 1 ? 3 * ((cljs.core.count.call(null, i) - 1) / 3 | 0) : abs_n > 0 ? -3 * ((3 + cljs.core.count.call(null, cljs.core.take_while.call(null, function(sign, abs_n, vec__33715, i, d) {
        return function(c) {
          return cljs.core._EQ_.call(null, c, "0");
        };
      }(sign, abs_n, vec__33715, i, d), d))) / 3 | 0) : true ? 0 : null;
      var usig = abs_n * Math.pow(10, -1 * exp);
      var vec__33716 = cljs.core.truth_(sf) ? [cljs.core.str(usig)].join("").split(".") : null;
      var usig_i = cljs.core.nth.call(null, vec__33716, 0, null);
      var usig_d = cljs.core.nth.call(null, vec__33716, 1, null);
      var sigmult = cljs.core.truth_(function() {
        var and__3394__auto__ = sf;
        if (cljs.core.truth_(and__3394__auto__)) {
          return usig > 0;
        } else {
          return and__3394__auto__;
        }
      }()) ? Math.pow(10, cljs.core.count.call(null, usig_i) - sf) : null;
      var round_usig_str = cljs.core.truth_(sigmult) ? [cljs.core.str(sigmult * Math.round(usig / sigmult))].join("") : null;
      var vec__33717 = cljs.core.truth_(round_usig_str) ? round_usig_str.split(".") : null;
      var round_usig_i = cljs.core.nth.call(null, vec__33717, 0, null);
      var round_usig_d = cljs.core.nth.call(null, vec__33717, 1, null);
      var trunc_usig_str = cljs.core.truth_(round_usig_str) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, cljs.core.filter.call(null, cljs.core.identity, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, sf, round_usig_i), cljs.core.repeat.call(null, cljs.core.count.call(null, round_usig_i) - sf, "0"), cljs.core.count.call(null, round_usig_d) > 0 ? new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [".", cljs.core.take.call(null, sf - cljs.core.count.call(null, round_usig_i), round_usig_d)], null) : null], null))))) : null;
      var trunc_usig = cljs.core.truth_(trunc_usig_str) ? parseFloat(trunc_usig_str) : null;
      var sig = sign * function() {
        var or__3406__auto__ = trunc_usig;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return usig;
        }
      }();
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sig, exp], null);
    } else {
      return null;
    }
  };
  var eng_notation = function(n, var_args) {
    var p__33709 = null;
    if (arguments.length > 1) {
      p__33709 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return eng_notation__delegate.call(this, n, p__33709);
  };
  eng_notation.cljs$lang$maxFixedArity = 1;
  eng_notation.cljs$lang$applyTo = function(arglist__33718) {
    var n = cljs.core.first(arglist__33718);
    var p__33709 = cljs.core.rest(arglist__33718);
    return eng_notation__delegate(n, p__33709);
  };
  eng_notation.cljs$core$IFn$_invoke$arity$variadic = eng_notation__delegate;
  return eng_notation;
}();
clustermap.formats.number.readable = function() {
  var readable__delegate = function(n, p__33719) {
    var map__33722 = p__33719;
    var map__33722__$1 = cljs.core.seq_QMARK_.call(null, map__33722) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33722) : map__33722;
    var default$ = cljs.core.get.call(null, map__33722__$1, new cljs.core.Keyword(null, "default", "default", 2558708147));
    var plus_QMARK_ = cljs.core.get.call(null, map__33722__$1, new cljs.core.Keyword(null, "plus?", "plus?", 1120672087));
    var dec = cljs.core.get.call(null, map__33722__$1, new cljs.core.Keyword(null, "dec", "dec", 1014003572));
    if (cljs.core.truth_(n)) {
      var abs_n = Math.abs(n);
      var round_n = clustermap.formats.number.round_decimal.call(null, abs_n, dec);
      var round_n_str = [cljs.core.str(round_n)].join("");
      var vec__33723 = clojure.string.split.call(null, round_n_str, /\./);
      var i_str = cljs.core.nth.call(null, vec__33723, 0, null);
      var d_str = cljs.core.nth.call(null, vec__33723, 1, null);
      var t_str = clustermap.formats.number.split_thousands.call(null, i_str);
      var t_dec_str = clojure.string.join.call(null, ".", cljs.core.filter.call(null, cljs.core.identity, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [t_str, d_str], null)));
      return clustermap.formats.number.prefix_sign.call(null, t_dec_str, n, plus_QMARK_);
    } else {
      return default$;
    }
  };
  var readable = function(n, var_args) {
    var p__33719 = null;
    if (arguments.length > 1) {
      p__33719 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return readable__delegate.call(this, n, p__33719);
  };
  readable.cljs$lang$maxFixedArity = 1;
  readable.cljs$lang$applyTo = function(arglist__33724) {
    var n = cljs.core.first(arglist__33724);
    var p__33719 = cljs.core.rest(arglist__33724);
    return readable__delegate(n, p__33719);
  };
  readable.cljs$core$IFn$_invoke$arity$variadic = readable__delegate;
  return readable;
}();
clustermap.formats.number.fnum = clustermap.formats.number.readable;
goog.provide("clustermap.formats.money");
goog.require("cljs.core");
goog.require("clustermap.formats.number");
goog.require("clustermap.formats.number");
clustermap.formats.money.money_suffixes = new cljs.core.PersistentArrayMap(null, 5, [0, "", 3, "k", 6, "m", 9, "bn", 12, "tn"], null);
clustermap.formats.money.money_suffix = function money_suffix(exp) {
  var or__3406__auto__ = clustermap.formats.money.money_suffixes.call(null, exp);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return[cljs.core.str("x10^"), cljs.core.str(exp)].join("");
  }
};
clustermap.formats.money.readable = function() {
  var readable__delegate = function(n, p__33702) {
    var map__33705 = p__33702;
    var map__33705__$1 = cljs.core.seq_QMARK_.call(null, map__33705) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33705) : map__33705;
    var default$ = cljs.core.get.call(null, map__33705__$1, new cljs.core.Keyword(null, "default", "default", 2558708147));
    var plus_QMARK_ = cljs.core.get.call(null, map__33705__$1, new cljs.core.Keyword(null, "plus?", "plus?", 1120672087));
    var curr = cljs.core.get.call(null, map__33705__$1, new cljs.core.Keyword(null, "curr", "curr", 1016969636), "\u00a3");
    var sf = cljs.core.get.call(null, map__33705__$1, new cljs.core.Keyword(null, "sf", "sf", 1013907909));
    if (cljs.core.truth_(n)) {
      var vec__33706 = clustermap.formats.number.eng_notation.call(null, n, new cljs.core.Keyword(null, "sf", "sf", 1013907909), sf);
      var sig = cljs.core.nth.call(null, vec__33706, 0, null);
      var exp = cljs.core.nth.call(null, vec__33706, 1, null);
      var abs_sig = Math.abs(sig);
      var suffix = clustermap.formats.money.money_suffix.call(null, exp);
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.filter.call(null, cljs.core.identity, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
        var and__3394__auto__ = plus_QMARK_;
        if (cljs.core.truth_(and__3394__auto__)) {
          return sig > 0;
        } else {
          return and__3394__auto__;
        }
      }()) ? "+" : sig < 0 ? "-" : null, curr, abs_sig, suffix], null)));
    } else {
      return default$;
    }
  };
  var readable = function(n, var_args) {
    var p__33702 = null;
    if (arguments.length > 1) {
      p__33702 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return readable__delegate.call(this, n, p__33702);
  };
  readable.cljs$lang$maxFixedArity = 1;
  readable.cljs$lang$applyTo = function(arglist__33707) {
    var n = cljs.core.first(arglist__33707);
    var p__33702 = cljs.core.rest(arglist__33707);
    return readable__delegate(n, p__33702);
  };
  readable.cljs$core$IFn$_invoke$arity$variadic = readable__delegate;
  return readable;
}();
clustermap.formats.money.fmoney = clustermap.formats.money.readable;
goog.provide("clustermap.components.full_report.overview");
goog.require("cljs.core");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("om.core");
goog.require("om.core");
clustermap.components.full_report.overview.describe_selection = function describe_selection(p__33013) {
  var map__33018 = p__33013;
  var map__33018__$1 = cljs.core.seq_QMARK_.call(null, map__33018) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33018) : map__33018;
  var value = cljs.core.get.call(null, map__33018__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var type = cljs.core.get.call(null, map__33018__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  var pred__33019 = cljs.core._EQ_;
  var expr__33020 = type;
  if (cljs.core.truth_(pred__33019.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), expr__33020))) {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Total", new cljs.core.Keyword(null, "description", "description", 3584325486), "Totals for the selected Portfolio Company"], null), new cljs.core.Keyword(null, "averages", "averages", 2913851752), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 
    1017277949), "Mean", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean for the selected Portfolio Company"], null), new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Benchmark", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over all UK Companies"], null)], null);
  } else {
    if (cljs.core.truth_(pred__33019.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), expr__33020))) {
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Total", new cljs.core.Keyword(null, "description", "description", 3584325486), "Totals for the Portfolio Companies of the selected Investor"], null), new cljs.core.Keyword(null, "averages", "averages", 2913851752), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
      "name", "name", 1017277949), "Mean", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over the Portfolio Companies of the selected Investor"], null), new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Benchmark", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over all UK Companies"], null)], null);
    } else {
      if (cljs.core.truth_(pred__33019.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), expr__33020))) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Total", new cljs.core.Keyword(null, "description", "description", 3584325486), "Totals for the selected Constituency"], null), new cljs.core.Keyword(null, "averages", "averages", 2913851752), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 
        1017277949), "Mean", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over the Portfolio Companies with sites in the selected Constituency"], null), new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Benchmark", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over all UK Companies"], null)], null);
      } else {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Total", new cljs.core.Keyword(null, "description", "description", 3584325486), "Totals over all Portfolio Companies"], null), new cljs.core.Keyword(null, "averages", "averages", 2913851752), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 
        1017277949), "Mean", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over all Portfolio Companies"], null), new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "Benchmark", new cljs.core.Keyword(null, "description", "description", 3584325486), "Mean over all UK Companies"], null)], null);
      }
    }
  }
};
clustermap.components.full_report.overview.overview_data = function overview_data(p__33022) {
  var map__33048 = p__33022;
  var map__33048__$1 = cljs.core.seq_QMARK_.call(null, map__33048) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33048) : map__33048;
  var selection_investment_stats = cljs.core.get.call(null, map__33048__$1, new cljs.core.Keyword(null, "selection-investment-stats", "selection-investment-stats", 4568560312));
  var selection = cljs.core.get.call(null, map__33048__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
  var all_investment_stats = cljs.core.get.call(null, map__33048__$1, new cljs.core.Keyword(null, "all-investment-stats", "all-investment-stats", 2486056771));
  var sel_descrs = clustermap.components.full_report.overview.describe_selection.call(null, selection);
  var site_stats = function() {
    var or__3406__auto__ = selection_investment_stats;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return all_investment_stats;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "selection", "selection", 3592905982)).cljs$core$IFn$_invoke$arity$1(sel_descrs), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512), new cljs.core.Keyword(null, "employee-count-delta-val", "employee-count-delta-val", 2180417185), new cljs.core.Keyword(null, 
  "turnover-delta-val", "turnover-delta-val", 1709233922), new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288), new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677), new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430), new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066), new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190), new cljs.core.Keyword(null, "turnover", 
  "turnover", 1148922435)], [clustermap.formats.number.fnum.call(null, function() {
    var G__33049 = site_stats;
    var G__33049__$1 = G__33049 == null ? null : (new cljs.core.Keyword(null, "portfolio_company_count", "portfolio_company_count", 1780206472)).cljs$core$IFn$_invoke$arity$1(G__33049);
    return G__33049__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), function() {
    var G__33050 = site_stats;
    var G__33050__$1 = G__33050 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33050);
    var G__33050__$2 = G__33050__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33050__$1);
    return G__33050__$2;
  }(), function() {
    var G__33051 = site_stats;
    var G__33051__$1 = G__33051 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33051);
    var G__33051__$2 = G__33051__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33051__$1);
    return G__33051__$2;
  }(), clustermap.formats.number.fnum.call(null, function() {
    var G__33052 = site_stats;
    var G__33052__$1 = G__33052 == null ? null : (new cljs.core.Keyword(null, "investor_company_count", "investor_company_count", 2333064920)).cljs$core$IFn$_invoke$arity$1(G__33052);
    return G__33052__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33053 = site_stats;
    var G__33053__$1 = G__33053 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33053);
    var G__33053__$2 = G__33053__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33053__$1);
    return G__33053__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.money.fmoney.call(null, function() {
    var G__33054 = site_stats;
    var G__33054__$1 = G__33054 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33054);
    var G__33054__$2 = G__33054__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33054__$1);
    return G__33054__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33055 = site_stats;
    var G__33055__$1 = G__33055 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33055);
    var G__33055__$2 = G__33055__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33055__$1);
    return G__33055__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33056 = site_stats;
    var G__33056__$1 = G__33056 == null ? null : (new cljs.core.Keyword(null, "constituency_count", "constituency_count", 621528264)).cljs$core$IFn$_invoke$arity$1(G__33056);
    return G__33056__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.money.fmoney.call(null, function() {
    var G__33057 = site_stats;
    var G__33057__$1 = G__33057 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33057);
    var G__33057__$2 = G__33057__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33057__$1);
    return G__33057__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-")])), new cljs.core.Keyword(null, "averages", "averages", 2913851752), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "averages", "averages", 2913851752)).cljs$core$IFn$_invoke$arity$1(sel_descrs), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512), new cljs.core.Keyword(null, "employee-count-delta-val", 
  "employee-count-delta-val", 2180417185), new cljs.core.Keyword(null, "turnover-delta-val", "turnover-delta-val", 1709233922), new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288), new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677), new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430), new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066), new cljs.core.Keyword(null, "constituencies", 
  "constituencies", 2756015190), new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)], ["\u00a0", function() {
    var G__33058 = site_stats;
    var G__33058__$1 = G__33058 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33058);
    var G__33058__$2 = G__33058__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33058__$1);
    return G__33058__$2;
  }(), function() {
    var G__33059 = site_stats;
    var G__33059__$1 = G__33059 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33059);
    var G__33059__$2 = G__33059__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33059__$1);
    return G__33059__$2;
  }(), "\u00a0", clustermap.formats.number.fnum.call(null, function() {
    var G__33060 = site_stats;
    var G__33060__$1 = G__33060 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33060);
    var G__33060__$2 = G__33060__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33060__$1);
    return G__33060__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.money.fmoney.call(null, function() {
    var G__33061 = site_stats;
    var G__33061__$1 = G__33061 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33061);
    var G__33061__$2 = G__33061__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33061__$1);
    return G__33061__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33062 = site_stats;
    var G__33062__$1 = G__33062 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33062);
    var G__33062__$2 = G__33062__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33062__$1);
    return G__33062__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), "\u00a0", clustermap.formats.money.fmoney.call(null, function() {
    var G__33063 = site_stats;
    var G__33063__$1 = G__33063 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33063);
    var G__33063__$2 = G__33063__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33063__$1);
    return G__33063__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-")])), new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015)).cljs$core$IFn$_invoke$arity$1(sel_descrs), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512), new cljs.core.Keyword(null, "employee-count-delta-val", 
  "employee-count-delta-val", 2180417185), new cljs.core.Keyword(null, "turnover-delta-val", "turnover-delta-val", 1709233922), new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288), new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677), new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430), new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066), new cljs.core.Keyword(null, "constituencies", 
  "constituencies", 2756015190), new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)], [clustermap.formats.number.fnum.call(null, function() {
    var G__33064 = all_investment_stats;
    var G__33064__$1 = G__33064 == null ? null : (new cljs.core.Keyword(null, "portfolio_company_count", "portfolio_company_count", 1780206472)).cljs$core$IFn$_invoke$arity$1(G__33064);
    return G__33064__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), function() {
    var G__33065 = all_investment_stats;
    var G__33065__$1 = G__33065 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33065);
    var G__33065__$2 = G__33065__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33065__$1);
    return G__33065__$2;
  }(), function() {
    var G__33066 = all_investment_stats;
    var G__33066__$1 = G__33066 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33066);
    var G__33066__$2 = G__33066__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33066__$1);
    return G__33066__$2;
  }(), clustermap.formats.number.fnum.call(null, function() {
    var G__33067 = all_investment_stats;
    var G__33067__$1 = G__33067 == null ? null : (new cljs.core.Keyword(null, "investor_company_count", "investor_company_count", 2333064920)).cljs$core$IFn$_invoke$arity$1(G__33067);
    return G__33067__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33068 = all_investment_stats;
    var G__33068__$1 = G__33068 == null ? null : (new cljs.core.Keyword(null, "employee_count_delta", "employee_count_delta", 4678011881)).cljs$core$IFn$_invoke$arity$1(G__33068);
    var G__33068__$2 = G__33068__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33068__$1);
    return G__33068__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.money.fmoney.call(null, function() {
    var G__33069 = all_investment_stats;
    var G__33069__$1 = G__33069 == null ? null : (new cljs.core.Keyword(null, "turnover_delta", "turnover_delta", 1941841980)).cljs$core$IFn$_invoke$arity$1(G__33069);
    var G__33069__$2 = G__33069__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33069__$1);
    return G__33069__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33070 = all_investment_stats;
    var G__33070__$1 = G__33070 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33070);
    var G__33070__$2 = G__33070__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33070__$1);
    return G__33070__$2;
  }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.number.fnum.call(null, function() {
    var G__33071 = all_investment_stats;
    var G__33071__$1 = G__33071 == null ? null : (new cljs.core.Keyword(null, "constituency_count", "constituency_count", 621528264)).cljs$core$IFn$_invoke$arity$1(G__33071);
    return G__33071__$1;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), "-"), clustermap.formats.money.fmoney.call(null, function() {
    var G__33072 = all_investment_stats;
    var G__33072__$1 = G__33072 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33072);
    var G__33072__$2 = G__33072__$1 == null ? null : (new cljs.core.Keyword(null, "mean", "mean", 1017251639)).cljs$core$IFn$_invoke$arity$1(G__33072__$1);
    return G__33072__$2;
  }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-")]))], null);
};
clustermap.components.full_report.overview.pos_neg = function pos_neg(value) {
  if (value == null) {
    return null;
  } else {
    if (value > 0) {
      return React.DOM.i({"className":"icon-positive"});
    } else {
      if (value < 0) {
        return React.DOM.i({"className":"icon-negative"});
      } else {
        if (true) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
clustermap.components.full_report.overview.overview = function overview(data) {
  var map__33116 = clustermap.components.full_report.overview.overview_data.call(null, data);
  var map__33116__$1 = cljs.core.seq_QMARK_.call(null, map__33116) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33116) : map__33116;
  var benchmark = cljs.core.get.call(null, map__33116__$1, new cljs.core.Keyword(null, "benchmark", "benchmark", 1682044015));
  var averages = cljs.core.get.call(null, map__33116__$1, new cljs.core.Keyword(null, "averages", "averages", 2913851752));
  var selection = cljs.core.get.call(null, map__33116__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
  if (typeof clustermap.components.full_report.overview.t33117 !== "undefined") {
  } else {
    clustermap.components.full_report.overview.t33117 = function(selection, averages, benchmark, map__33116, data, overview, meta33118) {
      this.selection = selection;
      this.averages = averages;
      this.benchmark = benchmark;
      this.map__33116 = map__33116;
      this.data = data;
      this.overview = overview;
      this.meta33118 = meta33118;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.overview.t33117.cljs$lang$type = true;
    clustermap.components.full_report.overview.t33117.cljs$lang$ctorStr = "clustermap.components.full-report.overview/t33117";
    clustermap.components.full_report.overview.t33117.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.overview/t33117");
    };
    clustermap.components.full_report.overview.t33117.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.overview.t33117.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div({"className":"full-report-overview"}, React.DOM.h4(null, "Overview of latest filings"), React.DOM.div({"className":"table-responsive"}, React.DOM.table({"className":"table-stats"}, React.DOM.thead(null, React.DOM.tr(null, React.DOM.th(null, "\u00a0"), React.DOM.th(null, "Portfolio Companies"), React.DOM.th(null, "Investors"), React.DOM.th(null, "Constituencies"), React.DOM.th(null, "Revenue"), React.DOM.th({"colSpan":"2"}, "Rev. change"), React.DOM.th(null, "Employees"), 
      React.DOM.th({"colSpan":"2"}, "Emp. change"))), React.DOM.tbody(null, React.DOM.tr(null, React.DOM.th(null, React.DOM.i({"className":"icon-info", "data-toggle":"tooltip", "data-container":"body", "title":self__.selection.call(null, new cljs.core.Keyword(null, "description", "description", 3584325486))}), sablono.interpreter.interpret.call(null, self__.selection.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949)))), React.DOM.td(null, function() {
        var attrs33124 = (new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33124)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33124)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33124));
        }
      }()), React.DOM.td(null, function() {
        var attrs33125 = (new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33125)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33125)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33125));
        }
      }()), React.DOM.td(null, function() {
        var attrs33126 = (new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33126)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33126)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33126));
        }
      }()), React.DOM.td(null, function() {
        var attrs33127 = (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33127)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33127)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33127));
        }
      }()), React.DOM.td(null, function() {
        var attrs33128 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "turnover-delta-val", "turnover-delta-val", 1709233922)).cljs$core$IFn$_invoke$arity$1(self__.selection));
        if (cljs.core.map_QMARK_.call(null, attrs33128)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33128)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33128));
        }
      }()), React.DOM.td(null, function() {
        var attrs33129 = (new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33129)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33129)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33129));
        }
      }()), React.DOM.td(null, function() {
        var attrs33130 = (new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33130)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33130)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33130));
        }
      }()), React.DOM.td(null, function() {
        var attrs33131 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "employee-count-delta-val", "employee-count-delta-val", 2180417185)).cljs$core$IFn$_invoke$arity$1(self__.selection));
        if (cljs.core.map_QMARK_.call(null, attrs33131)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33131)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33131));
        }
      }()), React.DOM.td(null, function() {
        var attrs33132 = (new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677)).cljs$core$IFn$_invoke$arity$1(self__.selection);
        if (cljs.core.map_QMARK_.call(null, attrs33132)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["selection"], null)], null), attrs33132)), null);
        } else {
          return React.DOM.span({"className":"selection"}, sablono.interpreter.interpret.call(null, attrs33132));
        }
      }())), React.DOM.tr(null, React.DOM.th(null, React.DOM.i({"className":"icon-info", "data-toggle":"tooltip", "data-container":"body", "title":self__.averages.call(null, new cljs.core.Keyword(null, "description", "description", 3584325486))}), sablono.interpreter.interpret.call(null, self__.averages.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949)))), React.DOM.td(null, function() {
        var attrs33133 = (new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33133)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33133)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33133));
        }
      }()), React.DOM.td(null, function() {
        var attrs33134 = (new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33134)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33134)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33134));
        }
      }()), React.DOM.td(null, function() {
        var attrs33135 = (new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33135)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33135)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33135));
        }
      }()), React.DOM.td(null, function() {
        var attrs33136 = (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33136)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33136)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33136));
        }
      }()), React.DOM.td(null, function() {
        var attrs33137 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "turnover-delta-val", "turnover-delta-val", 1709233922)).cljs$core$IFn$_invoke$arity$1(self__.averages));
        if (cljs.core.map_QMARK_.call(null, attrs33137)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33137)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33137));
        }
      }()), React.DOM.td(null, function() {
        var attrs33138 = (new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33138)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33138)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33138));
        }
      }()), React.DOM.td(null, function() {
        var attrs33139 = (new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33139)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33139)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33139));
        }
      }()), React.DOM.td(null, function() {
        var attrs33140 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "employee-count-delta-val", "employee-count-delta-val", 2180417185)).cljs$core$IFn$_invoke$arity$1(self__.averages));
        if (cljs.core.map_QMARK_.call(null, attrs33140)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33140)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33140));
        }
      }()), React.DOM.td(null, function() {
        var attrs33141 = (new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677)).cljs$core$IFn$_invoke$arity$1(self__.averages);
        if (cljs.core.map_QMARK_.call(null, attrs33141)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["averages"], null)], null), attrs33141)), null);
        } else {
          return React.DOM.span({"className":"averages"}, sablono.interpreter.interpret.call(null, attrs33141));
        }
      }())), React.DOM.tr(null, React.DOM.th(null, React.DOM.i({"className":"icon-info", "data-toggle":"tooltip", "data-container":"body", "title":self__.benchmark.call(null, new cljs.core.Keyword(null, "description", "description", 3584325486))}), sablono.interpreter.interpret.call(null, self__.benchmark.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949)))), React.DOM.td(null, function() {
        var attrs33142 = (new cljs.core.Keyword(null, "portfolio-companies", "portfolio-companies", 1133429512)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33142)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33142)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33142));
        }
      }()), React.DOM.td(null, function() {
        var attrs33143 = (new cljs.core.Keyword(null, "investor-companies", "investor-companies", 3164659288)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33143)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33143)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33143));
        }
      }()), React.DOM.td(null, function() {
        var attrs33144 = (new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33144)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33144)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33144));
        }
      }()), React.DOM.td(null, function() {
        var attrs33145 = (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33145)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33145)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33145));
        }
      }()), React.DOM.td(null, function() {
        var attrs33146 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "turnover-delta-val", "turnover-delta-val", 1709233922)).cljs$core$IFn$_invoke$arity$1(self__.benchmark));
        if (cljs.core.map_QMARK_.call(null, attrs33146)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33146)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33146));
        }
      }()), React.DOM.td(null, function() {
        var attrs33147 = (new cljs.core.Keyword(null, "turnover-delta", "turnover-delta", 510384430)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33147)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33147)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33147));
        }
      }()), React.DOM.td(null, function() {
        var attrs33148 = (new cljs.core.Keyword(null, "employee-count", "employee-count", 1111164066)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33148)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33148)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33148));
        }
      }()), React.DOM.td(null, function() {
        var attrs33149 = clustermap.components.full_report.overview.pos_neg.call(null, (new cljs.core.Keyword(null, "employee-count-delta-val", "employee-count-delta-val", 2180417185)).cljs$core$IFn$_invoke$arity$1(self__.benchmark));
        if (cljs.core.map_QMARK_.call(null, attrs33149)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33149)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33149));
        }
      }()), React.DOM.td(null, function() {
        var attrs33150 = (new cljs.core.Keyword(null, "employee-count-delta", "employee-count-delta", 1087385677)).cljs$core$IFn$_invoke$arity$1(self__.benchmark);
        if (cljs.core.map_QMARK_.call(null, attrs33150)) {
          return React.DOM.span(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["benchmark"], null)], null), attrs33150)), null);
        } else {
          return React.DOM.span({"className":"benchmark"}, sablono.interpreter.interpret.call(null, attrs33150));
        }
      }()))))));
    };
    clustermap.components.full_report.overview.t33117.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33119) {
      var self__ = this;
      var _33119__$1 = this;
      return self__.meta33118;
    };
    clustermap.components.full_report.overview.t33117.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33119, meta33118__$1) {
      var self__ = this;
      var _33119__$1 = this;
      return new clustermap.components.full_report.overview.t33117(self__.selection, self__.averages, self__.benchmark, self__.map__33116, self__.data, self__.overview, meta33118__$1);
    };
    clustermap.components.full_report.overview.__GT_t33117 = function __GT_t33117(selection__$1, averages__$1, benchmark__$1, map__33116__$2, data__$1, overview__$1, meta33118) {
      return new clustermap.components.full_report.overview.t33117(selection__$1, averages__$1, benchmark__$1, map__33116__$2, data__$1, overview__$1, meta33118);
    };
  }
  return new clustermap.components.full_report.overview.t33117(selection, averages, benchmark, map__33116__$1, data, overview, null);
};
goog.provide("hiccups.runtime");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
hiccups.runtime.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
hiccups.runtime.character_escapes = new cljs.core.PersistentArrayMap(null, 4, ["\x26", "\x26amp;", "\x3c", "\x26lt;", "\x3e", "\x26gt;", '"', "\x26quot;"], null);
hiccups.runtime.container_tags = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 33, ["dd", null, "head", null, "a", null, "b", null, "body", null, "pre", null, "form", null, "iframe", null, "dl", null, "em", null, "fieldset", null, "i", null, "h1", null, "h2", null, "span", null, "h3", null, "script", null, "html", null, "h4", null, "h5", null, "h6", null, "table", null, "dt", null, "div", null, "style", null, "label", null, "option", null, "ul", null, "strong", null, 
"canvas", null, "textarea", null, "li", null, "ol", null], null), null);
hiccups.runtime.as_str = function as_str(x) {
  if (x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol) {
    return cljs.core.name.call(null, x);
  } else {
    return[cljs.core.str(x)].join("");
  }
};
hiccups.runtime._STAR_html_mode_STAR_ = new cljs.core.Keyword(null, "xml", "xml", 1014023049);
hiccups.runtime.xml_mode_QMARK_ = function xml_mode_QMARK_() {
  return cljs.core._EQ_.call(null, hiccups.runtime._STAR_html_mode_STAR_, new cljs.core.Keyword(null, "xml", "xml", 1014023049));
};
hiccups.runtime.in_mode = function in_mode(mode, f) {
  var _STAR_html_mode_STAR_38070 = hiccups.runtime._STAR_html_mode_STAR_;
  try {
    hiccups.runtime._STAR_html_mode_STAR_ = mode;
    return f.call(null);
  } finally {
    hiccups.runtime._STAR_html_mode_STAR_ = _STAR_html_mode_STAR_38070;
  }
};
hiccups.runtime.escape_html = function escape_html(text) {
  return clojure.string.escape.call(null, hiccups.runtime.as_str.call(null, text), hiccups.runtime.character_escapes);
};
hiccups.runtime.h = hiccups.runtime.escape_html;
hiccups.runtime.end_tag = function end_tag() {
  if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
    return " /\x3e";
  } else {
    return "\x3e";
  }
};
hiccups.runtime.xml_attribute = function xml_attribute(name, value) {
  return[cljs.core.str(" "), cljs.core.str(hiccups.runtime.as_str.call(null, name)), cljs.core.str('\x3d"'), cljs.core.str(hiccups.runtime.escape_html.call(null, value)), cljs.core.str('"')].join("");
};
hiccups.runtime.render_attribute = function render_attribute(p__38071) {
  var vec__38073 = p__38071;
  var name = cljs.core.nth.call(null, vec__38073, 0, null);
  var value = cljs.core.nth.call(null, vec__38073, 1, null);
  if (value === true) {
    if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
      return hiccups.runtime.xml_attribute.call(null, name, name);
    } else {
      return[cljs.core.str(" "), cljs.core.str(hiccups.runtime.as_str.call(null, name))].join("");
    }
  } else {
    if (cljs.core.not.call(null, value)) {
      return "";
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return hiccups.runtime.xml_attribute.call(null, name, value);
      } else {
        return null;
      }
    }
  }
};
hiccups.runtime.render_attr_map = function render_attr_map(attrs) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.sort.call(null, cljs.core.map.call(null, hiccups.runtime.render_attribute, attrs)));
};
hiccups.runtime.normalize_element = function normalize_element(p__38074) {
  var vec__38077 = p__38074;
  var tag = cljs.core.nth.call(null, vec__38077, 0, null);
  var content = cljs.core.nthnext.call(null, vec__38077, 1);
  if (!(tag instanceof cljs.core.Keyword || (tag instanceof cljs.core.Symbol || typeof tag === "string"))) {
    throw[cljs.core.str(tag), cljs.core.str(" is not a valid tag name")].join("");
  } else {
  }
  var vec__38078 = cljs.core.re_matches.call(null, hiccups.runtime.re_tag, hiccups.runtime.as_str.call(null, tag));
  var _ = cljs.core.nth.call(null, vec__38078, 0, null);
  var tag__$1 = cljs.core.nth.call(null, vec__38078, 1, null);
  var id = cljs.core.nth.call(null, vec__38078, 2, null);
  var class$ = cljs.core.nth.call(null, vec__38078, 3, null);
  var tag_attrs = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "class", "class", 1108647146), cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, ".", " ") : null], null);
  var map_attrs = cljs.core.first.call(null, content);
  if (cljs.core.map_QMARK_.call(null, map_attrs)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, cljs.core.merge.call(null, tag_attrs, map_attrs), cljs.core.next.call(null, content)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, tag_attrs, content], null);
  }
};
hiccups.runtime.render_element = function render_element(element) {
  var vec__38080 = hiccups.runtime.normalize_element.call(null, element);
  var tag = cljs.core.nth.call(null, vec__38080, 0, null);
  var attrs = cljs.core.nth.call(null, vec__38080, 1, null);
  var content = cljs.core.nth.call(null, vec__38080, 2, null);
  if (cljs.core.truth_(function() {
    var or__3406__auto__ = content;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return hiccups.runtime.container_tags.call(null, tag);
    }
  }())) {
    return[cljs.core.str("\x3c"), cljs.core.str(tag), cljs.core.str(hiccups.runtime.render_attr_map.call(null, attrs)), cljs.core.str("\x3e"), cljs.core.str(hiccups.runtime.render_html.call(null, content)), cljs.core.str("\x3c/"), cljs.core.str(tag), cljs.core.str("\x3e")].join("");
  } else {
    return[cljs.core.str("\x3c"), cljs.core.str(tag), cljs.core.str(hiccups.runtime.render_attr_map.call(null, attrs)), cljs.core.str(hiccups.runtime.end_tag.call(null))].join("");
  }
};
hiccups.runtime.render_html = function render_html(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return hiccups.runtime.render_element.call(null, x);
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, render_html, x));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return hiccups.runtime.as_str.call(null, x);
      } else {
        return null;
      }
    }
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.debug.Logger");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.debug.Logger.getLogger("goog.net.xpc");
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CancelledError");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
};
goog.async.Deferred.prototype.fired_ = false;
goog.async.Deferred.prototype.hadError_ = false;
goog.async.Deferred.prototype.result_;
goog.async.Deferred.prototype.blocked_ = false;
goog.async.Deferred.prototype.blocking_ = false;
goog.async.Deferred.prototype.silentlyCancelled_ = false;
goog.async.Deferred.prototype.unhandledExceptionTimeoutId_;
goog.async.Deferred.prototype.parent_;
goog.async.Deferred.prototype.branches_ = 0;
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCancelled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CancelledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCancelled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCancelled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledExceptionTimeoutId_ && (this.hasFired() && this.hasErrback_())) {
    goog.global.clearTimeout(this.unhandledExceptionTimeoutId_);
    delete this.unhandledExceptionTimeoutId_;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (res instanceof goog.async.Deferred) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    res.addCallbacks(goog.bind(this.continue_, this, true), goog.bind(this.continue_, this, false));
    res.blocking_ = true;
  }
  if (unhandledException) {
    this.unhandledExceptionTimeoutId_ = goog.global.setTimeout(function() {
      throw res;
    }, 0);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.cancelled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CancelledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CancelledError, goog.debug.Error);
goog.async.Deferred.CancelledError.prototype.message = "Deferred was cancelled";
goog.async.Deferred.CancelledError.prototype.name = "CancelledError";
goog.provide("goog.dom.vendor");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj37456 = {};
  return obj37456;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3394__auto__ = port;
    if (and__3394__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4027__auto__ = port == null ? null : port;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj37458 = {};
  return obj37458;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3394__auto__ = port;
    if (and__3394__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4027__auto__ = port == null ? null : port;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj37460 = {};
  return obj37460;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3394__auto__ = chan;
    if (and__3394__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4027__auto__ = chan == null ? null : chan;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj37462 = {};
  return obj37462;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3394__auto__ = h;
    if (and__3394__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4027__auto__ = h == null ? null : h;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3394__auto__ = h;
    if (and__3394__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4027__auto__ = h == null ? null : h;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj37464 = {};
  return obj37464;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3394__auto__ = b;
    if (and__3394__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4027__auto__ = b == null ? null : b;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3394__auto__ = b;
    if (and__3394__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4027__auto__ = b == null ? null : b;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3394__auto__ = b;
    if (and__3394__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4027__auto__ = b == null ? null : b;
    return function() {
      var or__3406__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj37466 = {};
  return obj37466;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__37478 = cnt + 1;
      cnt = G__37478;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4248__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4248__auto__) {
      var v_37479 = this$.pop();
      if (keep_QMARK_.call(null, v_37479)) {
        this$.unshift(v_37479);
      } else {
      }
      var G__37480 = x + 1;
      x = G__37480;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_37467 = 0;
  while (true) {
    var m_37468 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_37468 == null) {
    } else {
      m_37468.call(null);
      if (count_37467 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__37469 = count_37467 + 1;
        count_37467 = G__37469;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3394__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3394__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && (a.right == b.right && (a.bottom == b.bottom && a.left == b.left));
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && (other.right <= box.right && (other.top >= box.top && other.bottom <= box.bottom));
  }
  return other.x >= box.left && (other.x <= box.right && (other.y >= box.top && other.y <= box.bottom));
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && (b.left <= a.right && (a.top <= b.bottom && b.top <= a.bottom));
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && (b.left <= a.right + padding && (a.top <= b.bottom + padding && b.top <= a.bottom + padding));
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && (a.width == b.width && (a.top == b.top && a.height == b.height));
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && (b.left <= a.left + a.width && (a.top <= b.top + b.height && b.top <= a.top + a.height));
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || (!intersection.height || !intersection.width)) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && (this.left + this.width >= another.left + another.width && (this.top <= another.top && this.top + this.height >= another.top + another.height));
  } else {
    return another.x >= this.left && (another.x <= this.left + this.width && (another.y >= this.top && another.y <= this.top + this.height));
  }
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || (styles.getPropertyValue(property) || "");
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || (goog.style.getCascadedStyle(element, style) || element.style && element.style[style]);
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && ((goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersion("1.9"));
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && (!goog.userAgent.isDocumentMode(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode())) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect = el.getBoundingClientRect();
  if (goog.userAgent.IE) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && (positionStyle == "static" && (parent != doc.documentElement && parent != doc.body));
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || (parent.scrollHeight > parent.clientHeight || (positionStyle == "fixed" || (positionStyle == "absolute" || positionStyle == "relative"))))) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && ((!goog.userAgent.WEBKIT || (el.clientHeight != 0 || el != body)) && (el != body && (el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")))) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && (visibleRect.left >= 0 && (visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left)) ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersion("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = goog.userAgent.GECKO && (doc.getBoxObjectFor && (!el.getBoundingClientRect && (positionStyle == "absolute" && ((box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0)))));
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && (parent != doc.body && parent != viewportElement);) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPosition(currentEl);
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && (currentWin != relativeWin && ((currentEl = currentWin.frameElement) && (currentWin = currentWin.parent))));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPosition = function(el) {
  var pos = new goog.math.Coordinate;
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    el = (el);
    if (el.getBoundingClientRect) {
      var box = goog.style.getBoundingClientRect_(el);
      pos.x = box.left;
      pos.y = box.top;
    } else {
      var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
      var pageCoord = goog.style.getPageOffset(el);
      pos.x = pageCoord.x - scrollCoord.x;
      pos.y = pageCoord.y - scrollCoord.y;
    }
    if (goog.userAgent.GECKO && !goog.userAgent.isVersion(12)) {
      pos = goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
    }
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && el.getBrowserEvent().targetTouches) {
        targetEvent = el.getBrowserEvent().targetTouches[0];
      }
    }
    pos.x = targetEvent.clientX;
    pos.y = targetEvent.clientY;
  }
  return pos;
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return goog.style.getSizeWithDisplay_(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var size = goog.style.getSizeWithDisplay_(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return size;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && (!offsetWidth && !offsetHeight);
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  el.style.display = display ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  if (goog.userAgent.IE) {
    styleSheet = dh.getDocument().createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || (styleSheet.owningElement || (styleSheet));
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersion("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && (goog.dom.getDomHelper(doc).isCss1CompatMode() && (ieCurrentStyle.width != "auto" && (ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing)))) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && (el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_)) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var property;
  if (goog.userAgent.IE) {
    property = "-ms-transform";
  } else {
    if (goog.userAgent.WEBKIT) {
      property = "-webkit-transform";
    } else {
      if (goog.userAgent.OPERA) {
        property = "-o-transform";
      } else {
        if (goog.userAgent.GECKO) {
          property = "-moz-transform";
        }
      }
    }
  }
  var transform;
  if (property) {
    transform = goog.style.getStyle_(element, property);
  }
  if (!transform) {
    transform = goog.style.getStyle_(element, "transform");
  }
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.History");
goog.provide("goog.History.Event");
goog.provide("goog.History.EventType");
goog.require("goog.Timer");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.History = function(opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {
  goog.events.EventTarget.call(this);
  if (opt_invisible && !opt_blankPageUrl) {
    throw Error("Can't use invisible history without providing a blank page.");
  }
  var input;
  if (opt_input) {
    input = opt_input;
  } else {
    var inputId = "history_state" + goog.History.historyCount_;
    document.write(goog.string.subs(goog.History.INPUT_TEMPLATE_, inputId, inputId));
    input = goog.dom.getElement(inputId);
  }
  this.hiddenInput_ = (input);
  this.window_ = opt_input ? goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) : window;
  this.baseUrl_ = this.window_.location.href.split("#")[0];
  this.iframeSrc_ = opt_blankPageUrl;
  if (goog.userAgent.IE && !opt_blankPageUrl) {
    this.iframeSrc_ = window.location.protocol == "https" ? "https:///" : 'javascript:""';
  }
  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);
  this.registerDisposable(this.timer_);
  this.userVisible_ = !opt_invisible;
  this.eventHandler_ = new goog.events.EventHandler(this);
  if (opt_invisible || goog.History.LEGACY_IE) {
    var iframe;
    if (opt_iframe) {
      iframe = opt_iframe;
    } else {
      var iframeId = "history_iframe" + goog.History.historyCount_;
      var srcAttribute = this.iframeSrc_ ? 'src\x3d"' + goog.string.htmlEscape(this.iframeSrc_) + '"' : "";
      document.write(goog.string.subs(goog.History.IFRAME_TEMPLATE_, iframeId, srcAttribute));
      iframe = goog.dom.getElement(iframeId);
    }
    this.iframe_ = (iframe);
    this.unsetIframe_ = true;
  }
  if (goog.History.LEGACY_IE) {
    this.eventHandler_.listen(this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);
    this.documentLoaded = false;
    this.shouldEnable_ = false;
  }
  if (this.userVisible_) {
    this.setHash_(this.getToken(), true);
  } else {
    this.setIframeToken_(this.hiddenInput_.value);
  }
  goog.History.historyCount_++;
};
goog.inherits(goog.History, goog.events.EventTarget);
goog.History.prototype.enabled_ = false;
goog.History.prototype.longerPolling_ = false;
goog.History.prototype.lastToken_ = null;
goog.History.HAS_ONHASHCHANGE = goog.userAgent.IE && goog.userAgent.isDocumentMode(8) || (goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.2") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("532.1"));
goog.History.LEGACY_IE = goog.userAgent.IE && !goog.userAgent.isDocumentMode(8);
goog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;
goog.History.prototype.lockedToken_ = null;
goog.History.prototype.disposeInternal = function() {
  goog.History.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.setEnabled(false);
};
goog.History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  if (goog.History.LEGACY_IE && !this.documentLoaded) {
    this.shouldEnable_ = enable;
    return;
  }
  if (enable) {
    if (goog.userAgent.OPERA) {
      this.eventHandler_.listen(this.window_.document, goog.History.INPUT_EVENTS_, this.operaDefibrillator_);
    } else {
      if (goog.userAgent.GECKO) {
        this.eventHandler_.listen(this.window_, "pageshow", this.onShow_);
      }
    }
    if (goog.History.HAS_ONHASHCHANGE && this.userVisible_) {
      this.eventHandler_.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);
      this.enabled_ = true;
      this.dispatchEvent(new goog.history.Event(this.getToken(), false));
    } else {
      if (!goog.userAgent.IE || this.documentLoaded) {
        this.eventHandler_.listen(this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));
        this.enabled_ = true;
        if (!goog.History.LEGACY_IE) {
          this.lastToken_ = this.getToken();
          this.dispatchEvent(new goog.history.Event(this.getToken(), false));
        }
        this.timer_.start();
      }
    }
  } else {
    this.enabled_ = false;
    this.eventHandler_.removeAll();
    this.timer_.stop();
  }
};
goog.History.prototype.onDocumentLoaded = function() {
  this.documentLoaded = true;
  if (this.hiddenInput_.value) {
    this.setIframeToken_(this.hiddenInput_.value, true);
  }
  this.setEnabled(this.shouldEnable_);
};
goog.History.prototype.onShow_ = function(e) {
  if (e.getBrowserEvent()["persisted"]) {
    this.setEnabled(false);
    this.setEnabled(true);
  }
};
goog.History.prototype.onHashChange_ = function(e) {
  var hash = this.getLocationFragment_(this.window_);
  if (hash != this.lastToken_) {
    this.update_(hash, true);
  }
};
goog.History.prototype.getToken = function() {
  if (this.lockedToken_ != null) {
    return this.lockedToken_;
  } else {
    if (this.userVisible_) {
      return this.getLocationFragment_(this.window_);
    } else {
      return this.getIframeToken_() || "";
    }
  }
};
goog.History.prototype.setToken = function(token, opt_title) {
  this.setHistoryState_(token, false, opt_title);
};
goog.History.prototype.replaceToken = function(token, opt_title) {
  this.setHistoryState_(token, true, opt_title);
};
goog.History.prototype.getLocationFragment_ = function(win) {
  var href = win.location.href;
  var index = href.indexOf("#");
  return index < 0 ? "" : href.substring(index + 1);
};
goog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {
  if (this.getToken() != token) {
    if (this.userVisible_) {
      this.setHash_(token, replace);
      if (!goog.History.HAS_ONHASHCHANGE) {
        if (goog.userAgent.IE) {
          this.setIframeToken_(token, replace, opt_title);
        }
      }
      if (this.enabled_) {
        this.check_(false);
      }
    } else {
      this.setIframeToken_(token, replace);
      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;
      this.dispatchEvent(new goog.history.Event(token, false));
    }
  }
};
goog.History.prototype.setHash_ = function(token, opt_replace) {
  var loc = this.window_.location;
  var url = this.baseUrl_;
  var hasHash = goog.string.contains(loc.href, "#");
  if (goog.History.HASH_ALWAYS_REQUIRED || (hasHash || token)) {
    url += "#" + token;
  }
  if (url != loc.href) {
    if (opt_replace) {
      loc.replace(url);
    } else {
      loc.href = url;
    }
  }
};
goog.History.prototype.setIframeToken_ = function(token, opt_replace, opt_title) {
  if (this.unsetIframe_ || token != this.getIframeToken_()) {
    this.unsetIframe_ = false;
    token = goog.string.urlEncode(token);
    if (goog.userAgent.IE) {
      var doc = goog.dom.getFrameContentDocument(this.iframe_);
      doc.open("text/html", opt_replace ? "replace" : undefined);
      doc.write(goog.string.subs(goog.History.IFRAME_SOURCE_TEMPLATE_, goog.string.htmlEscape((opt_title || this.window_.document.title)), token));
      doc.close();
    } else {
      var url = this.iframeSrc_ + "#" + token;
      var contentWindow = this.iframe_.contentWindow;
      if (contentWindow) {
        if (opt_replace) {
          contentWindow.location.replace(url);
        } else {
          contentWindow.location.href = url;
        }
      }
    }
  }
};
goog.History.prototype.getIframeToken_ = function() {
  if (goog.userAgent.IE) {
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;
  } else {
    var contentWindow = this.iframe_.contentWindow;
    if (contentWindow) {
      var hash;
      try {
        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));
      } catch (e) {
        if (!this.longerPolling_) {
          this.setLongerPolling_(true);
        }
        return null;
      }
      if (this.longerPolling_) {
        this.setLongerPolling_(false);
      }
      return hash || null;
    } else {
      return null;
    }
  }
};
goog.History.prototype.check_ = function(isNavigation) {
  if (this.userVisible_) {
    var hash = this.getLocationFragment_(this.window_);
    if (hash != this.lastToken_) {
      this.update_(hash, isNavigation);
    }
  }
  if (!this.userVisible_ || goog.History.LEGACY_IE) {
    var token = this.getIframeToken_() || "";
    if (this.lockedToken_ == null || token == this.lockedToken_) {
      this.lockedToken_ = null;
      if (token != this.lastToken_) {
        this.update_(token, isNavigation);
      }
    }
  }
};
goog.History.prototype.update_ = function(token, isNavigation) {
  this.lastToken_ = this.hiddenInput_.value = token;
  if (this.userVisible_) {
    if (goog.History.LEGACY_IE) {
      this.setIframeToken_(token);
    }
    this.setHash_(token);
  } else {
    this.setIframeToken_(token);
  }
  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));
};
goog.History.prototype.setLongerPolling_ = function(longerPolling) {
  if (this.longerPolling_ != longerPolling) {
    this.timer_.setInterval(longerPolling ? goog.History.PollingType.LONG : goog.History.PollingType.NORMAL);
  }
  this.longerPolling_ = longerPolling;
};
goog.History.prototype.operaDefibrillator_ = function() {
  this.timer_.stop();
  this.timer_.start();
};
goog.History.INPUT_EVENTS_ = [goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN, goog.events.EventType.MOUSEMOVE];
goog.History.IFRAME_SOURCE_TEMPLATE_ = "\x3ctitle\x3e%s\x3c/title\x3e\x3cbody\x3e%s\x3c/body\x3e";
goog.History.IFRAME_TEMPLATE_ = '\x3ciframe id\x3d"%s" style\x3d"display:none" %s\x3e\x3c/iframe\x3e';
goog.History.INPUT_TEMPLATE_ = '\x3cinput type\x3d"text" name\x3d"%s" id\x3d"%s" style\x3d"display:none"\x3e';
goog.History.historyCount_ = 0;
goog.History.PollingType = {NORMAL:150, LONG:1E4};
goog.History.EventType = goog.history.EventType;
goog.History.Event = goog.history.Event;
goog.provide("clustermap.formats.time");
goog.require("cljs.core");
clustermap.formats.time.get_year = function get_year(t) {
  var G__33730 = t;
  var G__33730__$1 = G__33730 == null ? null : new Date(G__33730);
  var G__33730__$2 = G__33730__$1 == null ? null : G__33730__$1.getYear();
  var G__33730__$3 = G__33730__$2 == null ? null : G__33730__$2 + 1900;
  return G__33730__$3;
};
goog.provide("clustermap.components.full_report.company_site_list");
goog.require("cljs.core");
goog.require("clustermap.formats.time");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.time");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("om.core");
goog.require("om.core");
clustermap.components.full_report.company_site_list.investment = function investment(investment__$1, owner, p__32984) {
  var map__32993 = p__32984;
  var map__32993__$1 = cljs.core.seq_QMARK_.call(null, map__32993) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32993) : map__32993;
  var opts = map__32993__$1;
  var path_fn = cljs.core.get.call(null, map__32993__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
  var link_fn = cljs.core.get.call(null, map__32993__$1, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301));
  var company_path = path_fn.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), investment__$1);
  if (typeof clustermap.components.full_report.company_site_list.t32994 !== "undefined") {
  } else {
    clustermap.components.full_report.company_site_list.t32994 = function(company_path, link_fn, path_fn, opts, map__32993, p__32984, owner, investment, meta32995) {
      this.company_path = company_path;
      this.link_fn = link_fn;
      this.path_fn = path_fn;
      this.opts = opts;
      this.map__32993 = map__32993;
      this.p__32984 = p__32984;
      this.owner = owner;
      this.investment = investment;
      this.meta32995 = meta32995;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.company_site_list.t32994.cljs$lang$type = true;
    clustermap.components.full_report.company_site_list.t32994.cljs$lang$ctorStr = "clustermap.components.full-report.company-site-list/t32994";
    clustermap.components.full_report.company_site_list.t32994.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.company-site-list/t32994");
    };
    clustermap.components.full_report.company_site_list.t32994.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.company_site_list.t32994.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.tr(null, function() {
        var attrs32997 = self__.link_fn.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "company_no", "company_no", 4461198389), (new cljs.core.Keyword(null, "portfolio_company_no", "portfolio_company_no", 771436428)).cljs$core$IFn$_invoke$arity$1(self__.investment), new cljs.core.Keyword(null, "name", "name", 1017277949), (new cljs.core.Keyword(null, "portfolio_company_name", "portfolio_company_name", 
        4225526294)).cljs$core$IFn$_invoke$arity$1(self__.investment)], null));
        if (cljs.core.map_QMARK_.call(null, attrs32997)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32997), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32997));
        }
      }(), function() {
        var attrs32998 = (new cljs.core.Keyword(null, "portfolio_company_site_postcode", "portfolio_company_site_postcode", 4491774974)).cljs$core$IFn$_invoke$arity$1(self__.investment);
        if (cljs.core.map_QMARK_.call(null, attrs32998)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32998), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32998));
        }
      }(), function() {
        var attrs32999 = self__.link_fn.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593), (new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)).cljs$core$IFn$_invoke$arity$1(self__.investment), new cljs.core.Keyword(null, "name", "name", 1017277949), (new cljs.core.Keyword(null, "investor_company_name", 
        "investor_company_name", 4797549766)).cljs$core$IFn$_invoke$arity$1(self__.investment)], null));
        if (cljs.core.map_QMARK_.call(null, attrs32999)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32999), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32999));
        }
      }(), function() {
        var attrs33000 = self__.link_fn.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318), (new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318)).cljs$core$IFn$_invoke$arity$1(self__.investment), new cljs.core.Keyword(null, "compact_name", "compact_name", 1128032665), (new cljs.core.Keyword(null, "boundaryline_compact_name", 
        "boundaryline_compact_name", 3478315290)).cljs$core$IFn$_invoke$arity$1(self__.investment)], null));
        if (cljs.core.map_QMARK_.call(null, attrs33000)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs33000), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs33000));
        }
      }());
    };
    clustermap.components.full_report.company_site_list.t32994.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32996) {
      var self__ = this;
      var _32996__$1 = this;
      return self__.meta32995;
    };
    clustermap.components.full_report.company_site_list.t32994.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32996, meta32995__$1) {
      var self__ = this;
      var _32996__$1 = this;
      return new clustermap.components.full_report.company_site_list.t32994(self__.company_path, self__.link_fn, self__.path_fn, self__.opts, self__.map__32993, self__.p__32984, self__.owner, self__.investment, meta32995__$1);
    };
    clustermap.components.full_report.company_site_list.__GT_t32994 = function __GT_t32994(company_path__$1, link_fn__$1, path_fn__$1, opts__$1, map__32993__$2, p__32984__$1, owner__$1, investment__$2, meta32995) {
      return new clustermap.components.full_report.company_site_list.t32994(company_path__$1, link_fn__$1, path_fn__$1, opts__$1, map__32993__$2, p__32984__$1, owner__$1, investment__$2, meta32995);
    };
  }
  return new clustermap.components.full_report.company_site_list.t32994(company_path, link_fn, path_fn, opts, map__32993__$1, p__32984, owner, investment__$1, null);
};
clustermap.components.full_report.company_site_list.company_site_list = function company_site_list(investments, owner, opts) {
  if (typeof clustermap.components.full_report.company_site_list.t33007 !== "undefined") {
  } else {
    clustermap.components.full_report.company_site_list.t33007 = function(opts, owner, investments, company_site_list, meta33008) {
      this.opts = opts;
      this.owner = owner;
      this.investments = investments;
      this.company_site_list = company_site_list;
      this.meta33008 = meta33008;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.company_site_list.t33007.cljs$lang$type = true;
    clustermap.components.full_report.company_site_list.t33007.cljs$lang$ctorStr = "clustermap.components.full-report.company-site-list/t33007";
    clustermap.components.full_report.company_site_list.t33007.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.company-site-list/t33007");
    };
    clustermap.components.full_report.company_site_list.t33007.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.company_site_list.t33007.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div({"className":"full-report-list"}, React.DOM.div({"className":"table-responsive"}, React.DOM.table({"className":"table"}, React.DOM.thead(null, React.DOM.tr(null, React.DOM.th(null, "Portfolio Company"), React.DOM.th(null, "Postcode"), React.DOM.th(null, "Investor"), React.DOM.th(null, "Constituency"))), function() {
        var attrs33012 = om.core.build_all.call(null, clustermap.components.full_report.company_site_list.investment, (new cljs.core.Keyword(null, "records", "records", 2096501172)).cljs$core$IFn$_invoke$arity$1(self__.investments), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "investment_uid", "investment_uid", 1858762838), new cljs.core.Keyword(null, "opts", "opts", 1017322386), self__.opts], null));
        if (cljs.core.map_QMARK_.call(null, attrs33012)) {
          return React.DOM.tbody(sablono.interpreter.attributes.call(null, attrs33012), null);
        } else {
          return React.DOM.tbody(null, sablono.interpreter.interpret.call(null, attrs33012));
        }
      }())));
    };
    clustermap.components.full_report.company_site_list.t33007.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33009) {
      var self__ = this;
      var _33009__$1 = this;
      return self__.meta33008;
    };
    clustermap.components.full_report.company_site_list.t33007.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33009, meta33008__$1) {
      var self__ = this;
      var _33009__$1 = this;
      return new clustermap.components.full_report.company_site_list.t33007(self__.opts, self__.owner, self__.investments, self__.company_site_list, meta33008__$1);
    };
    clustermap.components.full_report.company_site_list.__GT_t33007 = function __GT_t33007(opts__$1, owner__$1, investments__$1, company_site_list__$1, meta33008) {
      return new clustermap.components.full_report.company_site_list.t33007(opts__$1, owner__$1, investments__$1, company_site_list__$1, meta33008);
    };
  }
  return new clustermap.components.full_report.company_site_list.t33007(opts, owner, investments, company_site_list, null);
};
goog.provide("clustermap.components.full_report.company_list");
goog.require("cljs.core");
goog.require("clustermap.formats.time");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.time");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("om.core");
goog.require("om.core");
clustermap.components.full_report.company_list.render_many_links = function render_many_links(link_fn, owner_path, type, objs) {
  var first_obj = cljs.core.first.call(null, objs);
  var next_objs = cljs.core.next.call(null, objs);
  if (next_objs) {
    var attrs32934 = link_fn.call(null, type, first_obj);
    if (cljs.core.map_QMARK_.call(null, attrs32934)) {
      return React.DOM.div(sablono.interpreter.attributes.call(null, attrs32934), React.DOM.a({"href":owner_path}, "\u00a0(more...)"));
    } else {
      return React.DOM.div(null, sablono.interpreter.interpret.call(null, attrs32934), React.DOM.a({"href":owner_path}, "\u00a0(more...)"));
    }
  } else {
    return link_fn.call(null, type, first_obj);
  }
};
clustermap.components.full_report.company_list.pos_neg = function pos_neg(value) {
  if (value == null) {
    return null;
  } else {
    if (value > 0) {
      return React.DOM.i({"className":"icon-positive"});
    } else {
      if (value < 0) {
        return React.DOM.i({"className":"icon-negative"});
      } else {
        if (true) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
clustermap.components.full_report.company_list.portfolio_company = function portfolio_company(company, owner, p__32943) {
  var map__32958 = p__32943;
  var map__32958__$1 = cljs.core.seq_QMARK_.call(null, map__32958) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32958) : map__32958;
  var opts = map__32958__$1;
  var path_fn = cljs.core.get.call(null, map__32958__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
  var link_fn = cljs.core.get.call(null, map__32958__$1, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301));
  var company_path = path_fn.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), company);
  if (typeof clustermap.components.full_report.company_list.t32959 !== "undefined") {
  } else {
    clustermap.components.full_report.company_list.t32959 = function(company_path, link_fn, path_fn, opts, map__32958, p__32943, owner, company, portfolio_company, meta32960) {
      this.company_path = company_path;
      this.link_fn = link_fn;
      this.path_fn = path_fn;
      this.opts = opts;
      this.map__32958 = map__32958;
      this.p__32943 = p__32943;
      this.owner = owner;
      this.company = company;
      this.portfolio_company = portfolio_company;
      this.meta32960 = meta32960;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.company_list.t32959.cljs$lang$type = true;
    clustermap.components.full_report.company_list.t32959.cljs$lang$ctorStr = "clustermap.components.full-report.company-list/t32959";
    clustermap.components.full_report.company_list.t32959.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.company-list/t32959");
    };
    clustermap.components.full_report.company_list.t32959.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.company_list.t32959.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.tr(null, function() {
        var attrs32962 = self__.link_fn.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), self__.company);
        if (cljs.core.map_QMARK_.call(null, attrs32962)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32962), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32962));
        }
      }(), function() {
        var attrs32963 = clustermap.components.full_report.company_list.render_many_links.call(null, self__.link_fn, self__.company_path, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), (new cljs.core.Keyword(null, "investor_companies", "investor_companies", 1928918630)).cljs$core$IFn$_invoke$arity$1(self__.company));
        if (cljs.core.map_QMARK_.call(null, attrs32963)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32963), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32963));
        }
      }(), function() {
        var attrs32964 = clustermap.components.full_report.company_list.render_many_links.call(null, self__.link_fn, self__.company_path, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), function() {
          var G__32971 = self__.company;
          var G__32971__$1 = G__32971 == null ? null : (new cljs.core.Keyword(null, "boundarylines", "boundarylines", 2397299847)).cljs$core$IFn$_invoke$arity$1(G__32971);
          var G__32971__$2 = G__32971__$1 == null ? null : cljs.core.filter.call(null, function(G__32971, G__32971__$1) {
            return function(bl) {
              return cljs.core._EQ_.call(null, "uk_constituencies", (new cljs.core.Keyword(null, "collection_id", "collection_id", 4487629262)).cljs$core$IFn$_invoke$arity$1(bl));
            };
          }(G__32971, G__32971__$1), G__32971__$1);
          return G__32971__$2;
        }());
        if (cljs.core.map_QMARK_.call(null, attrs32964)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32964), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32964));
        }
      }(), function() {
        var attrs32965 = clustermap.formats.money.fmoney.call(null, (new cljs.core.Keyword(null, "latest_turnover", "latest_turnover", 2012435451)).cljs$core$IFn$_invoke$arity$1(self__.company), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs32965)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32965), React.DOM.small(null, "\u00a0(", sablono.interpreter.interpret.call(null, function() {
            var or__3406__auto__ = clustermap.formats.time.get_year.call(null, (new cljs.core.Keyword(null, "latest_accounts_date", "latest_accounts_date", 2789706017)).cljs$core$IFn$_invoke$arity$1(self__.company));
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return "no info";
            }
          }()), ")"));
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32965), React.DOM.small(null, "\u00a0(", sablono.interpreter.interpret.call(null, function() {
            var or__3406__auto__ = clustermap.formats.time.get_year.call(null, (new cljs.core.Keyword(null, "latest_accounts_date", "latest_accounts_date", 2789706017)).cljs$core$IFn$_invoke$arity$1(self__.company));
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return "no info";
            }
          }()), ")"));
        }
      }(), function() {
        var attrs32966 = clustermap.components.full_report.company_list.pos_neg.call(null, (new cljs.core.Keyword(null, "latest_turnover_delta", "latest_turnover_delta", 4599982068)).cljs$core$IFn$_invoke$arity$1(self__.company));
        if (cljs.core.map_QMARK_.call(null, attrs32966)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32966), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32966));
        }
      }(), function() {
        var attrs32967 = clustermap.formats.money.fmoney.call(null, (new cljs.core.Keyword(null, "latest_turnover_delta", "latest_turnover_delta", 4599982068)).cljs$core$IFn$_invoke$arity$1(self__.company), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs32967)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32967), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32967));
        }
      }(), function() {
        var attrs32968 = clustermap.formats.number.fnum.call(null, (new cljs.core.Keyword(null, "latest_employee_count", "latest_employee_count", 905794408)).cljs$core$IFn$_invoke$arity$1(self__.company), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs32968)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32968), React.DOM.small(null, "\u00a0(", sablono.interpreter.interpret.call(null, function() {
            var or__3406__auto__ = clustermap.formats.time.get_year.call(null, (new cljs.core.Keyword(null, "latest_accounts_date", "latest_accounts_date", 2789706017)).cljs$core$IFn$_invoke$arity$1(self__.company));
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return "no info";
            }
          }()), ")"));
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32968), React.DOM.small(null, "\u00a0(", sablono.interpreter.interpret.call(null, function() {
            var or__3406__auto__ = clustermap.formats.time.get_year.call(null, (new cljs.core.Keyword(null, "latest_accounts_date", "latest_accounts_date", 2789706017)).cljs$core$IFn$_invoke$arity$1(self__.company));
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return "no info";
            }
          }()), ")"));
        }
      }(), function() {
        var attrs32969 = clustermap.components.full_report.company_list.pos_neg.call(null, (new cljs.core.Keyword(null, "latest_employee_count_delta", "latest_employee_count_delta", 1082401185)).cljs$core$IFn$_invoke$arity$1(self__.company));
        if (cljs.core.map_QMARK_.call(null, attrs32969)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32969), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32969));
        }
      }(), function() {
        var attrs32970 = clustermap.formats.number.fnum.call(null, (new cljs.core.Keyword(null, "latest_employee_count_delta", "latest_employee_count_delta", 1082401185)).cljs$core$IFn$_invoke$arity$1(self__.company), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs32970)) {
          return React.DOM.td(sablono.interpreter.attributes.call(null, attrs32970), null);
        } else {
          return React.DOM.td(null, sablono.interpreter.interpret.call(null, attrs32970));
        }
      }());
    };
    clustermap.components.full_report.company_list.t32959.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32961) {
      var self__ = this;
      var _32961__$1 = this;
      return self__.meta32960;
    };
    clustermap.components.full_report.company_list.t32959.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32961, meta32960__$1) {
      var self__ = this;
      var _32961__$1 = this;
      return new clustermap.components.full_report.company_list.t32959(self__.company_path, self__.link_fn, self__.path_fn, self__.opts, self__.map__32958, self__.p__32943, self__.owner, self__.company, self__.portfolio_company, meta32960__$1);
    };
    clustermap.components.full_report.company_list.__GT_t32959 = function __GT_t32959(company_path__$1, link_fn__$1, path_fn__$1, opts__$1, map__32958__$2, p__32943__$1, owner__$1, company__$1, portfolio_company__$1, meta32960) {
      return new clustermap.components.full_report.company_list.t32959(company_path__$1, link_fn__$1, path_fn__$1, opts__$1, map__32958__$2, p__32943__$1, owner__$1, company__$1, portfolio_company__$1, meta32960);
    };
  }
  return new clustermap.components.full_report.company_list.t32959(company_path, link_fn, path_fn, opts, map__32958__$1, p__32943, owner, company, portfolio_company, null);
};
clustermap.components.full_report.company_list.company_list = function company_list(companies, owner, opts) {
  if (typeof clustermap.components.full_report.company_list.t32978 !== "undefined") {
  } else {
    clustermap.components.full_report.company_list.t32978 = function(opts, owner, companies, company_list, meta32979) {
      this.opts = opts;
      this.owner = owner;
      this.companies = companies;
      this.company_list = company_list;
      this.meta32979 = meta32979;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.company_list.t32978.cljs$lang$type = true;
    clustermap.components.full_report.company_list.t32978.cljs$lang$ctorStr = "clustermap.components.full-report.company-list/t32978";
    clustermap.components.full_report.company_list.t32978.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.company-list/t32978");
    };
    clustermap.components.full_report.company_list.t32978.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.company_list.t32978.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div({"className":"full-report-list"}, React.DOM.div({"className":"table-responsive"}, React.DOM.table({"className":"table"}, React.DOM.thead(null, React.DOM.tr(null, React.DOM.th(null, "Portfolio Company"), React.DOM.th(null, "Investor"), React.DOM.th(null, "Constituency"), React.DOM.th(null, "Revenue"), React.DOM.th({"colSpan":"2"}, "Rev. change"), React.DOM.th(null, "Employees"), React.DOM.th({"colSpan":"2"}, "Emp. change"))), function() {
        var attrs32983 = om.core.build_all.call(null, clustermap.components.full_report.company_list.portfolio_company, (new cljs.core.Keyword(null, "records", "records", 2096501172)).cljs$core$IFn$_invoke$arity$1(self__.companies), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "company_no", "company_no", 4461198389), new cljs.core.Keyword(null, "opts", "opts", 1017322386), self__.opts], null));
        if (cljs.core.map_QMARK_.call(null, attrs32983)) {
          return React.DOM.tbody(sablono.interpreter.attributes.call(null, attrs32983), null);
        } else {
          return React.DOM.tbody(null, sablono.interpreter.interpret.call(null, attrs32983));
        }
      }())));
    };
    clustermap.components.full_report.company_list.t32978.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32980) {
      var self__ = this;
      var _32980__$1 = this;
      return self__.meta32979;
    };
    clustermap.components.full_report.company_list.t32978.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32980, meta32979__$1) {
      var self__ = this;
      var _32980__$1 = this;
      return new clustermap.components.full_report.company_list.t32978(self__.opts, self__.owner, self__.companies, self__.company_list, meta32979__$1);
    };
    clustermap.components.full_report.company_list.__GT_t32978 = function __GT_t32978(opts__$1, owner__$1, companies__$1, company_list__$1, meta32979) {
      return new clustermap.components.full_report.company_list.t32978(opts__$1, owner__$1, companies__$1, company_list__$1, meta32979);
    };
  }
  return new clustermap.components.full_report.company_list.t32978(opts, owner, companies, company_list, null);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj37967 = {};
  return obj37967;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3394__auto__ = reader;
    if (and__3394__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4027__auto__ = reader == null ? null : reader;
    return function() {
      var or__3406__auto__ = cljs.reader.read_char[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.reader.read_char["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3394__auto__ = reader;
    if (and__3394__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4027__auto__ = reader == null ? null : reader;
    return function() {
      var or__3406__auto__ = cljs.reader.unread[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.reader.unread["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3406__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__37968) {
    var rdr = cljs.core.first(arglist__37968);
    var msg = cljs.core.rest(arglist__37968);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3394__auto__ = !(ch === "#");
  if (and__3394__auto__) {
    var and__3394__auto____$1 = !(ch === "'");
    if (and__3394__auto____$1) {
      var and__3394__auto____$2 = !(ch === ":");
      if (and__3394__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3394__auto____$2;
      }
    } else {
      return and__3394__auto____$1;
    }
  } else {
    return and__3394__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__37969 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__37970 = cljs.reader.read_char.call(null, rdr);
      sb = G__37969;
      ch = G__37970;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__37971 = cljs.reader.read_char.call(null, rdr);
      ch = G__37971;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__37972 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__37972;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__37973 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__37973;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3406__auto__ = ch == null;
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3406__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__37974 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__37975 = cljs.reader.read_char.call(null, reader);
      buffer = G__37974;
      ch = G__37975;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__37976 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__37977 = cljs.reader.read_char.call(null, reader);
        buffer = G__37976;
        ch = G__37977;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__37978 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__37979 = cljs.reader.read_char.call(null, reader);
            buffer = G__37978;
            ch = G__37979;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__37981 = o;
    if (G__37981) {
      var bit__4050__auto__ = G__37981.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4050__auto__ || G__37981.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__37981.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__37981);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__37981);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__37982 = reader;
        var G__37983 = eof_is_error;
        var G__37984 = sentinel;
        var G__37985 = is_recursive;
        reader = G__37982;
        eof_is_error = G__37983;
        sentinel = G__37984;
        is_recursive = G__37985;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__37986 = cljs.reader.read_comment.call(null, reader, ch);
          var G__37987 = eof_is_error;
          var G__37988 = sentinel;
          var G__37989 = is_recursive;
          reader = G__37986;
          eof_is_error = G__37987;
          sentinel = G__37988;
          is_recursive = G__37989;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__37990 = reader;
              var G__37991 = eof_is_error;
              var G__37992 = sentinel;
              var G__37993 = is_recursive;
              reader = G__37990;
              eof_is_error = G__37991;
              sentinel = G__37992;
              is_recursive = G__37993;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__37994 = b.append("0");
            b = G__37994;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__37996 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__37996, 0, null);
  var years = cljs.core.nth.call(null, vec__37996, 1, null);
  var months = cljs.core.nth.call(null, vec__37996, 2, null);
  var days = cljs.core.nth.call(null, vec__37996, 3, null);
  var hours = cljs.core.nth.call(null, vec__37996, 4, null);
  var minutes = cljs.core.nth.call(null, vec__37996, 5, null);
  var seconds = cljs.core.nth.call(null, vec__37996, 6, null);
  var fraction = cljs.core.nth.call(null, vec__37996, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__37996, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__37996, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__37996, 10, null);
  var v = vec__37996;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3406__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__37998 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__37998, 0, null);
    var months = cljs.core.nth.call(null, vec__37998, 1, null);
    var days = cljs.core.nth.call(null, vec__37998, 2, null);
    var hours = cljs.core.nth.call(null, vec__37998, 3, null);
    var minutes = cljs.core.nth.call(null, vec__37998, 4, null);
    var seconds = cljs.core.nth.call(null, vec__37998, 5, null);
    var ms = cljs.core.nth.call(null, vec__37998, 6, null);
    var offset = cljs.core.nth.call(null, vec__37998, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__38011_38023 = cljs.core.seq.call(null, form);
    var chunk__38012_38024 = null;
    var count__38013_38025 = 0;
    var i__38014_38026 = 0;
    while (true) {
      if (i__38014_38026 < count__38013_38025) {
        var x_38027 = cljs.core._nth.call(null, chunk__38012_38024, i__38014_38026);
        arr.push(x_38027);
        var G__38028 = seq__38011_38023;
        var G__38029 = chunk__38012_38024;
        var G__38030 = count__38013_38025;
        var G__38031 = i__38014_38026 + 1;
        seq__38011_38023 = G__38028;
        chunk__38012_38024 = G__38029;
        count__38013_38025 = G__38030;
        i__38014_38026 = G__38031;
        continue;
      } else {
        var temp__4092__auto___38032 = cljs.core.seq.call(null, seq__38011_38023);
        if (temp__4092__auto___38032) {
          var seq__38011_38033__$1 = temp__4092__auto___38032;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38011_38033__$1)) {
            var c__4148__auto___38034 = cljs.core.chunk_first.call(null, seq__38011_38033__$1);
            var G__38035 = cljs.core.chunk_rest.call(null, seq__38011_38033__$1);
            var G__38036 = c__4148__auto___38034;
            var G__38037 = cljs.core.count.call(null, c__4148__auto___38034);
            var G__38038 = 0;
            seq__38011_38023 = G__38035;
            chunk__38012_38024 = G__38036;
            count__38013_38025 = G__38037;
            i__38014_38026 = G__38038;
            continue;
          } else {
            var x_38039 = cljs.core.first.call(null, seq__38011_38033__$1);
            arr.push(x_38039);
            var G__38040 = cljs.core.next.call(null, seq__38011_38033__$1);
            var G__38041 = null;
            var G__38042 = 0;
            var G__38043 = 0;
            seq__38011_38023 = G__38040;
            chunk__38012_38024 = G__38041;
            count__38013_38025 = G__38042;
            i__38014_38026 = G__38043;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj38016 = {};
        return obj38016;
      }();
      var seq__38017_38044 = cljs.core.seq.call(null, form);
      var chunk__38018_38045 = null;
      var count__38019_38046 = 0;
      var i__38020_38047 = 0;
      while (true) {
        if (i__38020_38047 < count__38019_38046) {
          var vec__38021_38048 = cljs.core._nth.call(null, chunk__38018_38045, i__38020_38047);
          var k_38049 = cljs.core.nth.call(null, vec__38021_38048, 0, null);
          var v_38050 = cljs.core.nth.call(null, vec__38021_38048, 1, null);
          obj[cljs.core.name.call(null, k_38049)] = v_38050;
          var G__38051 = seq__38017_38044;
          var G__38052 = chunk__38018_38045;
          var G__38053 = count__38019_38046;
          var G__38054 = i__38020_38047 + 1;
          seq__38017_38044 = G__38051;
          chunk__38018_38045 = G__38052;
          count__38019_38046 = G__38053;
          i__38020_38047 = G__38054;
          continue;
        } else {
          var temp__4092__auto___38055 = cljs.core.seq.call(null, seq__38017_38044);
          if (temp__4092__auto___38055) {
            var seq__38017_38056__$1 = temp__4092__auto___38055;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__38017_38056__$1)) {
              var c__4148__auto___38057 = cljs.core.chunk_first.call(null, seq__38017_38056__$1);
              var G__38058 = cljs.core.chunk_rest.call(null, seq__38017_38056__$1);
              var G__38059 = c__4148__auto___38057;
              var G__38060 = cljs.core.count.call(null, c__4148__auto___38057);
              var G__38061 = 0;
              seq__38017_38044 = G__38058;
              chunk__38018_38045 = G__38059;
              count__38019_38046 = G__38060;
              i__38020_38047 = G__38061;
              continue;
            } else {
              var vec__38022_38062 = cljs.core.first.call(null, seq__38017_38056__$1);
              var k_38063 = cljs.core.nth.call(null, vec__38022_38062, 0, null);
              var v_38064 = cljs.core.nth.call(null, vec__38022_38062, 1, null);
              obj[cljs.core.name.call(null, k_38063)] = v_38064;
              var G__38065 = cljs.core.next.call(null, seq__38017_38056__$1);
              var G__38066 = null;
              var G__38067 = 0;
              var G__38068 = 0;
              seq__38017_38044 = G__38065;
              chunk__38018_38045 = G__38066;
              count__38019_38046 = G__38067;
              i__38020_38047 = G__38068;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("jayq.core");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
jayq.core.crate_meta = function crate_meta(func) {
  return func.prototype._crateGroup;
};
jayq.core.__GT_selector = function __GT_selector(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    if (cljs.core.fn_QMARK_.call(null, sel)) {
      var temp__4090__auto__ = jayq.core.crate_meta.call(null, sel);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var cm = temp__4090__auto__;
        return[cljs.core.str("[crateGroup\x3d"), cljs.core.str(cm), cljs.core.str("]")].join("");
      } else {
        return sel;
      }
    } else {
      if (sel instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, sel);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return sel;
        } else {
          return null;
        }
      }
    }
  }
};
jayq.core.$ = function() {
  var $ = null;
  var $__1 = function(sel) {
    return jQuery(jayq.core.__GT_selector.call(null, sel));
  };
  var $__2 = function(sel, context) {
    return jQuery(jayq.core.__GT_selector.call(null, sel), context);
  };
  $ = function(sel, context) {
    switch(arguments.length) {
      case 1:
        return $__1.call(this, sel);
      case 2:
        return $__2.call(this, sel, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  $.cljs$core$IFn$_invoke$arity$1 = $__1;
  $.cljs$core$IFn$_invoke$arity$2 = $__2;
  return $;
}();
jQuery.prototype.cljs$core$IFn$ = true;
jQuery.prototype.call = function() {
  var G__37906 = null;
  var G__37906__2 = function(self__, k) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__37906__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__37906 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__37906__2.call(this, self__, k);
      case 3:
        return G__37906__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__37906;
}();
jQuery.prototype.apply = function(self__, args37905) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args37905)));
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
jQuery.prototype.cljs$core$IReduce$ = true;
jQuery.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
jQuery.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
jQuery.prototype.cljs$core$ILookup$ = true;
jQuery.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var this$__$1 = this;
  var or__3406__auto__ = this$__$1.slice(k, k + 1);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
jQuery.prototype.cljs$core$ISequential$ = true;
jQuery.prototype.cljs$core$IIndexed$ = true;
jQuery.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    if (void 0 === not_found) {
      return null;
    } else {
      return not_found;
    }
  }
};
jQuery.prototype.cljs$core$ICounted$ = true;
jQuery.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.length;
};
jQuery.prototype.cljs$core$ISeq$ = true;
jQuery.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.get(0);
};
jQuery.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.count.call(null, this$__$1) > 1) {
    return this$__$1.slice(1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
jQuery.prototype.cljs$core$ISeqable$ = true;
jQuery.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.truth_(this$__$1.get(0))) {
    return this$__$1;
  } else {
    return null;
  }
};
jayq.core.anim = function anim($elem, props, dur) {
  return $elem.animate(cljs.core.clj__GT_js.call(null, props), dur);
};
jayq.core.text = function() {
  var text = null;
  var text__1 = function($elem) {
    return $elem.text();
  };
  var text__2 = function($elem, txt) {
    return $elem.text(txt);
  };
  text = function($elem, txt) {
    switch(arguments.length) {
      case 1:
        return text__1.call(this, $elem);
      case 2:
        return text__2.call(this, $elem, txt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text.cljs$core$IFn$_invoke$arity$1 = text__1;
  text.cljs$core$IFn$_invoke$arity$2 = text__2;
  return text;
}();
jayq.core.css = function() {
  var css = null;
  var css__2 = function($elem, opts) {
    return $elem.css(cljs.core.clj__GT_js.call(null, opts));
  };
  var css__3 = function($elem, p, v) {
    return $elem.css(cljs.core.name.call(null, p), v);
  };
  css = function($elem, p, v) {
    switch(arguments.length) {
      case 2:
        return css__2.call(this, $elem, p);
      case 3:
        return css__3.call(this, $elem, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  css.cljs$core$IFn$_invoke$arity$2 = css__2;
  css.cljs$core$IFn$_invoke$arity$3 = css__3;
  return css;
}();
jayq.core.attr = function() {
  var attr = null;
  var attr__2 = function($elem, x) {
    return $elem.attr(cljs.core.clj__GT_js.call(null, x));
  };
  var attr__3 = function($elem, n, v) {
    return $elem.attr(cljs.core.name.call(null, n), v);
  };
  attr = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return attr__2.call(this, $elem, n);
      case 3:
        return attr__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  attr.cljs$core$IFn$_invoke$arity$2 = attr__2;
  attr.cljs$core$IFn$_invoke$arity$3 = attr__3;
  return attr;
}();
jayq.core.prop = function() {
  var prop = null;
  var prop__2 = function($elem, x) {
    return $elem.prop(cljs.core.clj__GT_js.call(null, x));
  };
  var prop__3 = function($elem, n, v) {
    return $elem.prop(cljs.core.name.call(null, n), v);
  };
  prop = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return prop__2.call(this, $elem, n);
      case 3:
        return prop__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prop.cljs$core$IFn$_invoke$arity$2 = prop__2;
  prop.cljs$core$IFn$_invoke$arity$3 = prop__3;
  return prop;
}();
jayq.core.remove_attr = function remove_attr($elem, a) {
  return $elem.removeAttr(cljs.core.name.call(null, a));
};
jayq.core.remove_prop = function remove_prop($elem, a) {
  return $elem.removeProp(cljs.core.name.call(null, a));
};
jayq.core.data = function() {
  var data = null;
  var data__1 = function($elem) {
    return $elem.data();
  };
  var data__2 = function($elem, k) {
    return $elem.data(cljs.core.clj__GT_js.call(null, k));
  };
  var data__3 = function($elem, k, v) {
    return $elem.data(cljs.core.name.call(null, k), cljs.core.clj__GT_js.call(null, v));
  };
  data = function($elem, k, v) {
    switch(arguments.length) {
      case 1:
        return data__1.call(this, $elem);
      case 2:
        return data__2.call(this, $elem, k);
      case 3:
        return data__3.call(this, $elem, k, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  data.cljs$core$IFn$_invoke$arity$1 = data__1;
  data.cljs$core$IFn$_invoke$arity$2 = data__2;
  data.cljs$core$IFn$_invoke$arity$3 = data__3;
  return data;
}();
jayq.core.add_class = function add_class($elem, cl) {
  return $elem.addClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class = function remove_class($elem, cl) {
  return $elem.removeClass(cljs.core.name.call(null, cl));
};
jayq.core.toggle_class = function toggle_class($elem, cl) {
  return $elem.toggleClass(cljs.core.name.call(null, cl));
};
jayq.core.has_class = function has_class($elem, cl) {
  return $elem.hasClass(cljs.core.name.call(null, cl));
};
jayq.core.is = function is($elem, selector) {
  return $elem.is(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.after = function after($elem, content) {
  return $elem.after(content);
};
jayq.core.before = function before($elem, content) {
  return $elem.before(content);
};
jayq.core.append = function append($elem, content) {
  return $elem.append(content);
};
jayq.core.prepend = function prepend($elem, content) {
  return $elem.prepend(content);
};
jayq.core.append_to = function append_to($elem, target) {
  return $elem.appendTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.prepend_to = function prepend_to($elem, target) {
  return $elem.prependTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_before = function insert_before($elem, target) {
  return $elem.insertBefore(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_after = function insert_after($elem, target) {
  return $elem.insertAfter(jayq.core.__GT_selector.call(null, target));
};
jayq.core.replace_with = function replace_with($elem, content) {
  return $elem.replaceWith(content);
};
jayq.core.remove = function remove($elem) {
  return $elem.remove();
};
jayq.core.hide = function() {
  var hide__delegate = function($elem, p__37907) {
    var vec__37909 = p__37907;
    var speed = cljs.core.nth.call(null, vec__37909, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37909, 1, null);
    return $elem.hide(speed, on_finish);
  };
  var hide = function($elem, var_args) {
    var p__37907 = null;
    if (arguments.length > 1) {
      p__37907 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hide__delegate.call(this, $elem, p__37907);
  };
  hide.cljs$lang$maxFixedArity = 1;
  hide.cljs$lang$applyTo = function(arglist__37910) {
    var $elem = cljs.core.first(arglist__37910);
    var p__37907 = cljs.core.rest(arglist__37910);
    return hide__delegate($elem, p__37907);
  };
  hide.cljs$core$IFn$_invoke$arity$variadic = hide__delegate;
  return hide;
}();
jayq.core.show = function() {
  var show__delegate = function($elem, p__37911) {
    var vec__37913 = p__37911;
    var speed = cljs.core.nth.call(null, vec__37913, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37913, 1, null);
    return $elem.show(speed, on_finish);
  };
  var show = function($elem, var_args) {
    var p__37911 = null;
    if (arguments.length > 1) {
      p__37911 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return show__delegate.call(this, $elem, p__37911);
  };
  show.cljs$lang$maxFixedArity = 1;
  show.cljs$lang$applyTo = function(arglist__37914) {
    var $elem = cljs.core.first(arglist__37914);
    var p__37911 = cljs.core.rest(arglist__37914);
    return show__delegate($elem, p__37911);
  };
  show.cljs$core$IFn$_invoke$arity$variadic = show__delegate;
  return show;
}();
jayq.core.toggle = function() {
  var toggle__delegate = function($elem, p__37915) {
    var vec__37917 = p__37915;
    var speed = cljs.core.nth.call(null, vec__37917, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37917, 1, null);
    return $elem.toggle(speed, on_finish);
  };
  var toggle = function($elem, var_args) {
    var p__37915 = null;
    if (arguments.length > 1) {
      p__37915 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return toggle__delegate.call(this, $elem, p__37915);
  };
  toggle.cljs$lang$maxFixedArity = 1;
  toggle.cljs$lang$applyTo = function(arglist__37918) {
    var $elem = cljs.core.first(arglist__37918);
    var p__37915 = cljs.core.rest(arglist__37918);
    return toggle__delegate($elem, p__37915);
  };
  toggle.cljs$core$IFn$_invoke$arity$variadic = toggle__delegate;
  return toggle;
}();
jayq.core.fade_out = function() {
  var fade_out__delegate = function($elem, p__37919) {
    var vec__37921 = p__37919;
    var speed = cljs.core.nth.call(null, vec__37921, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37921, 1, null);
    return $elem.fadeOut(speed, on_finish);
  };
  var fade_out = function($elem, var_args) {
    var p__37919 = null;
    if (arguments.length > 1) {
      p__37919 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_out__delegate.call(this, $elem, p__37919);
  };
  fade_out.cljs$lang$maxFixedArity = 1;
  fade_out.cljs$lang$applyTo = function(arglist__37922) {
    var $elem = cljs.core.first(arglist__37922);
    var p__37919 = cljs.core.rest(arglist__37922);
    return fade_out__delegate($elem, p__37919);
  };
  fade_out.cljs$core$IFn$_invoke$arity$variadic = fade_out__delegate;
  return fade_out;
}();
jayq.core.fade_in = function() {
  var fade_in__delegate = function($elem, p__37923) {
    var vec__37925 = p__37923;
    var speed = cljs.core.nth.call(null, vec__37925, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37925, 1, null);
    return $elem.fadeIn(speed, on_finish);
  };
  var fade_in = function($elem, var_args) {
    var p__37923 = null;
    if (arguments.length > 1) {
      p__37923 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_in__delegate.call(this, $elem, p__37923);
  };
  fade_in.cljs$lang$maxFixedArity = 1;
  fade_in.cljs$lang$applyTo = function(arglist__37926) {
    var $elem = cljs.core.first(arglist__37926);
    var p__37923 = cljs.core.rest(arglist__37926);
    return fade_in__delegate($elem, p__37923);
  };
  fade_in.cljs$core$IFn$_invoke$arity$variadic = fade_in__delegate;
  return fade_in;
}();
jayq.core.slide_up = function() {
  var slide_up__delegate = function($elem, p__37927) {
    var vec__37929 = p__37927;
    var speed = cljs.core.nth.call(null, vec__37929, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37929, 1, null);
    return $elem.slideUp(speed, on_finish);
  };
  var slide_up = function($elem, var_args) {
    var p__37927 = null;
    if (arguments.length > 1) {
      p__37927 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_up__delegate.call(this, $elem, p__37927);
  };
  slide_up.cljs$lang$maxFixedArity = 1;
  slide_up.cljs$lang$applyTo = function(arglist__37930) {
    var $elem = cljs.core.first(arglist__37930);
    var p__37927 = cljs.core.rest(arglist__37930);
    return slide_up__delegate($elem, p__37927);
  };
  slide_up.cljs$core$IFn$_invoke$arity$variadic = slide_up__delegate;
  return slide_up;
}();
jayq.core.slide_down = function() {
  var slide_down__delegate = function($elem, p__37931) {
    var vec__37933 = p__37931;
    var speed = cljs.core.nth.call(null, vec__37933, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__37933, 1, null);
    return $elem.slideDown(speed, on_finish);
  };
  var slide_down = function($elem, var_args) {
    var p__37931 = null;
    if (arguments.length > 1) {
      p__37931 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_down__delegate.call(this, $elem, p__37931);
  };
  slide_down.cljs$lang$maxFixedArity = 1;
  slide_down.cljs$lang$applyTo = function(arglist__37934) {
    var $elem = cljs.core.first(arglist__37934);
    var p__37931 = cljs.core.rest(arglist__37934);
    return slide_down__delegate($elem, p__37931);
  };
  slide_down.cljs$core$IFn$_invoke$arity$variadic = slide_down__delegate;
  return slide_down;
}();
jayq.core.siblings = function() {
  var siblings = null;
  var siblings__1 = function($elem) {
    return $elem.siblings();
  };
  var siblings__2 = function($elem, selector) {
    return $elem.siblings(cljs.core.name.call(null, selector));
  };
  siblings = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return siblings__1.call(this, $elem);
      case 2:
        return siblings__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  siblings.cljs$core$IFn$_invoke$arity$1 = siblings__1;
  siblings.cljs$core$IFn$_invoke$arity$2 = siblings__2;
  return siblings;
}();
jayq.core.parent = function parent($elem) {
  return $elem.parent();
};
jayq.core.parents = function() {
  var parents = null;
  var parents__1 = function($elem) {
    return $elem.parents();
  };
  var parents__2 = function($elem, selector) {
    return $elem.parents(cljs.core.name.call(null, selector));
  };
  parents = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, $elem);
      case 2:
        return parents__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
jayq.core.parents_until = function() {
  var parents_until = null;
  var parents_until__1 = function($elem) {
    return $elem.parentsUntil();
  };
  var parents_until__2 = function($elem, selector) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var parents_until__3 = function($elem, selector, filtr) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  parents_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return parents_until__1.call(this, $elem);
      case 2:
        return parents_until__2.call(this, $elem, selector);
      case 3:
        return parents_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents_until.cljs$core$IFn$_invoke$arity$1 = parents_until__1;
  parents_until.cljs$core$IFn$_invoke$arity$2 = parents_until__2;
  parents_until.cljs$core$IFn$_invoke$arity$3 = parents_until__3;
  return parents_until;
}();
jayq.core.children = function() {
  var children = null;
  var children__1 = function($elem) {
    return $elem.children();
  };
  var children__2 = function($elem, selector) {
    return $elem.children(cljs.core.name.call(null, selector));
  };
  children = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return children__1.call(this, $elem);
      case 2:
        return children__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  children.cljs$core$IFn$_invoke$arity$1 = children__1;
  children.cljs$core$IFn$_invoke$arity$2 = children__2;
  return children;
}();
jayq.core.next = function() {
  var next = null;
  var next__1 = function($elem) {
    return $elem.next();
  };
  var next__2 = function($elem, selector) {
    return $elem.next(cljs.core.name.call(null, selector));
  };
  next = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next__1.call(this, $elem);
      case 2:
        return next__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next.cljs$core$IFn$_invoke$arity$1 = next__1;
  next.cljs$core$IFn$_invoke$arity$2 = next__2;
  return next;
}();
jayq.core.prev = function() {
  var prev = null;
  var prev__1 = function($elem) {
    return $elem.prev();
  };
  var prev__2 = function($elem, selector) {
    return $elem.prev(cljs.core.name.call(null, selector));
  };
  prev = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev__1.call(this, $elem);
      case 2:
        return prev__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev.cljs$core$IFn$_invoke$arity$1 = prev__1;
  prev.cljs$core$IFn$_invoke$arity$2 = prev__2;
  return prev;
}();
jayq.core.next_all = function() {
  var next_all = null;
  var next_all__1 = function($elem) {
    return $elem.nextAll();
  };
  var next_all__2 = function($elem, selector) {
    return $elem.nextAll(cljs.core.name.call(null, selector));
  };
  next_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next_all__1.call(this, $elem);
      case 2:
        return next_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_all.cljs$core$IFn$_invoke$arity$1 = next_all__1;
  next_all.cljs$core$IFn$_invoke$arity$2 = next_all__2;
  return next_all;
}();
jayq.core.prev_all = function() {
  var prev_all = null;
  var prev_all__1 = function($elem) {
    return $elem.prevAll();
  };
  var prev_all__2 = function($elem, selector) {
    return $elem.prevAll(cljs.core.name.call(null, selector));
  };
  prev_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev_all__1.call(this, $elem);
      case 2:
        return prev_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_all.cljs$core$IFn$_invoke$arity$1 = prev_all__1;
  prev_all.cljs$core$IFn$_invoke$arity$2 = prev_all__2;
  return prev_all;
}();
jayq.core.next_until = function() {
  var next_until = null;
  var next_until__1 = function($elem) {
    return $elem.nextUntil();
  };
  var next_until__2 = function($elem, selector) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var next_until__3 = function($elem, selector, filtr) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  next_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return next_until__1.call(this, $elem);
      case 2:
        return next_until__2.call(this, $elem, selector);
      case 3:
        return next_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_until.cljs$core$IFn$_invoke$arity$1 = next_until__1;
  next_until.cljs$core$IFn$_invoke$arity$2 = next_until__2;
  next_until.cljs$core$IFn$_invoke$arity$3 = next_until__3;
  return next_until;
}();
jayq.core.prev_until = function() {
  var prev_until = null;
  var prev_until__1 = function($elem) {
    return $elem.prevUntil();
  };
  var prev_until__2 = function($elem, selector) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var prev_until__3 = function($elem, selector, filtr) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  prev_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return prev_until__1.call(this, $elem);
      case 2:
        return prev_until__2.call(this, $elem, selector);
      case 3:
        return prev_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_until.cljs$core$IFn$_invoke$arity$1 = prev_until__1;
  prev_until.cljs$core$IFn$_invoke$arity$2 = prev_until__2;
  prev_until.cljs$core$IFn$_invoke$arity$3 = prev_until__3;
  return prev_until;
}();
jayq.core.find = function find($elem, selector) {
  return $elem.find(cljs.core.name.call(null, selector));
};
jayq.core.closest = function() {
  var closest__delegate = function($elem, selector, p__37935) {
    var vec__37937 = p__37935;
    var context = cljs.core.nth.call(null, vec__37937, 0, null);
    return $elem.closest(jayq.core.__GT_selector.call(null, selector), context);
  };
  var closest = function($elem, selector, var_args) {
    var p__37935 = null;
    if (arguments.length > 2) {
      p__37935 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return closest__delegate.call(this, $elem, selector, p__37935);
  };
  closest.cljs$lang$maxFixedArity = 2;
  closest.cljs$lang$applyTo = function(arglist__37938) {
    var $elem = cljs.core.first(arglist__37938);
    arglist__37938 = cljs.core.next(arglist__37938);
    var selector = cljs.core.first(arglist__37938);
    var p__37935 = cljs.core.rest(arglist__37938);
    return closest__delegate($elem, selector, p__37935);
  };
  closest.cljs$core$IFn$_invoke$arity$variadic = closest__delegate;
  return closest;
}();
jayq.core.clone = function clone($elem) {
  return $elem.clone();
};
jayq.core.html = function() {
  var html = null;
  var html__1 = function($elem) {
    return $elem.html();
  };
  var html__2 = function($elem, v) {
    return $elem.html(v);
  };
  html = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return html__1.call(this, $elem);
      case 2:
        return html__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  html.cljs$core$IFn$_invoke$arity$1 = html__1;
  html.cljs$core$IFn$_invoke$arity$2 = html__2;
  return html;
}();
jayq.core.inner = jayq.core.html;
jayq.core.empty = function empty($elem) {
  return $elem.empty();
};
jayq.core.val = function() {
  var val = null;
  var val__1 = function($elem) {
    return $elem.val();
  };
  var val__2 = function($elem, v) {
    return $elem.val(v);
  };
  val = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return val__1.call(this, $elem);
      case 2:
        return val__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  val.cljs$core$IFn$_invoke$arity$1 = val__1;
  val.cljs$core$IFn$_invoke$arity$2 = val__2;
  return val;
}();
jayq.core.serialize = function serialize($elem) {
  return $elem.serialize();
};
jayq.core.queue = function() {
  var queue = null;
  var queue__1 = function($elem) {
    return $elem.queue();
  };
  var queue__2 = function($elem, x) {
    return $elem.queue(x);
  };
  var queue__3 = function($elem, x, y) {
    return $elem.queue(x, y);
  };
  queue = function($elem, x, y) {
    switch(arguments.length) {
      case 1:
        return queue__1.call(this, $elem);
      case 2:
        return queue__2.call(this, $elem, x);
      case 3:
        return queue__3.call(this, $elem, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  queue.cljs$core$IFn$_invoke$arity$1 = queue__1;
  queue.cljs$core$IFn$_invoke$arity$2 = queue__2;
  queue.cljs$core$IFn$_invoke$arity$3 = queue__3;
  return queue;
}();
jayq.core.dequeue = function() {
  var dequeue = null;
  var dequeue__1 = function($elem) {
    return $elem.dequeue();
  };
  var dequeue__2 = function($elem, queue_name) {
    return $elem.dequeue(queue_name);
  };
  dequeue = function($elem, queue_name) {
    switch(arguments.length) {
      case 1:
        return dequeue__1.call(this, $elem);
      case 2:
        return dequeue__2.call(this, $elem, queue_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dequeue.cljs$core$IFn$_invoke$arity$1 = dequeue__1;
  dequeue.cljs$core$IFn$_invoke$arity$2 = dequeue__2;
  return dequeue;
}();
jayq.core.document_ready = function document_ready(func) {
  return jayq.core.$.call(null, document).ready(func);
};
jayq.core.mimetype_converter = function mimetype_converter(s) {
  return cljs.reader.read_string.call(null, [cljs.core.str(s)].join(""));
};
jQuery.ajaxSetup(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "accepts", "accepts", 4131250141), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "edn", "edn", 1014004513), "application/edn, text/edn", new cljs.core.Keyword(null, "clojure", "clojure", 1880188502), "application/clojure, text/clojure"], null), new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.PersistentArrayMap(null, 1, ["clojure", 
/edn|clojure/], null), new cljs.core.Keyword(null, "converters", "converters", 3057163845), new cljs.core.PersistentArrayMap(null, 2, ["text edn", jayq.core.mimetype_converter, "text clojure", jayq.core.mimetype_converter], null)], null)));
jayq.core.clj_content_type_QMARK_ = function clj_content_type_QMARK_(x) {
  return cljs.core.re_find.call(null, /^(text|application)\/(clojure|edn)/, x);
};
jayq.core.__GT_content_type = function __GT_content_type(ct) {
  if (typeof ct === "string") {
    return ct;
  } else {
    if (ct instanceof cljs.core.Keyword) {
      return cljs.core.subs.call(null, [cljs.core.str(ct)].join(""), 1);
    } else {
      return null;
    }
  }
};
jayq.core.preprocess_request = function preprocess_request(p__37941) {
  var map__37943 = p__37941;
  var map__37943__$1 = cljs.core.seq_QMARK_.call(null, map__37943) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37943) : map__37943;
  var request = map__37943__$1;
  var contentType = cljs.core.get.call(null, map__37943__$1, new cljs.core.Keyword(null, "contentType", "contentType", 624772805));
  var data = cljs.core.get.call(null, map__37943__$1, new cljs.core.Keyword(null, "data", "data", 1016980252));
  var ct = jayq.core.__GT_content_type.call(null, contentType);
  return function(p1__37940_SHARP_) {
    if (cljs.core.truth_(jayq.core.clj_content_type_QMARK_.call(null, ct))) {
      return cljs.core.assoc.call(null, p1__37940_SHARP_, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.pr_str.call(null, data));
    } else {
      return p1__37940_SHARP_;
    }
  }.call(null, function(p1__37939_SHARP_) {
    if (cljs.core.truth_(ct)) {
      return cljs.core.assoc.call(null, p1__37939_SHARP_, new cljs.core.Keyword(null, "contentType", "contentType", 624772805), ct);
    } else {
      return p1__37939_SHARP_;
    }
  }.call(null, request));
};
jayq.core.__GT_ajax_settings = function __GT_ajax_settings(request) {
  return cljs.core.clj__GT_js.call(null, jayq.core.preprocess_request.call(null, request));
};
jayq.core.ajax = function() {
  var ajax = null;
  var ajax__1 = function(settings) {
    return jQuery.ajax(jayq.core.__GT_ajax_settings.call(null, settings));
  };
  var ajax__2 = function(url, settings) {
    return jQuery.ajax(url, jayq.core.__GT_ajax_settings.call(null, settings));
  };
  ajax = function(url, settings) {
    switch(arguments.length) {
      case 1:
        return ajax__1.call(this, url);
      case 2:
        return ajax__2.call(this, url, settings);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax.cljs$core$IFn$_invoke$arity$1 = ajax__1;
  ajax.cljs$core$IFn$_invoke$arity$2 = ajax__2;
  return ajax;
}();
jayq.core.xhr = function xhr(p__37944, content, callback) {
  var vec__37946 = p__37944;
  var method = cljs.core.nth.call(null, vec__37946, 0, null);
  var uri = cljs.core.nth.call(null, vec__37946, 1, null);
  var params = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), clojure.string.upper_case.call(null, cljs.core.name.call(null, method)), new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.clj__GT_js.call(null, content), new cljs.core.Keyword(null, "success", "success", 3441701749), callback], null));
  return jQuery.ajax(uri, params);
};
jayq.core.read = function read($elem) {
  return cljs.reader.read_string.call(null, jayq.core.html.call(null, $elem));
};
jayq.core.bind = function bind($elem, ev, func) {
  return $elem.bind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind = function() {
  var unbind__delegate = function($elem, ev, p__37947) {
    var vec__37949 = p__37947;
    var func = cljs.core.nth.call(null, vec__37949, 0, null);
    return $elem.unbind(cljs.core.name.call(null, ev), func);
  };
  var unbind = function($elem, ev, var_args) {
    var p__37947 = null;
    if (arguments.length > 2) {
      p__37947 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return unbind__delegate.call(this, $elem, ev, p__37947);
  };
  unbind.cljs$lang$maxFixedArity = 2;
  unbind.cljs$lang$applyTo = function(arglist__37950) {
    var $elem = cljs.core.first(arglist__37950);
    arglist__37950 = cljs.core.next(arglist__37950);
    var ev = cljs.core.first(arglist__37950);
    var p__37947 = cljs.core.rest(arglist__37950);
    return unbind__delegate($elem, ev, p__37947);
  };
  unbind.cljs$core$IFn$_invoke$arity$variadic = unbind__delegate;
  return unbind;
}();
jayq.core.trigger = function trigger($elem, ev) {
  return $elem.trigger(cljs.core.name.call(null, ev));
};
jayq.core.delegate = function delegate($elem, sel, ev, func) {
  return $elem.delegate(jayq.core.__GT_selector.call(null, sel), cljs.core.name.call(null, ev), func);
};
jayq.core.__GT_event = function __GT_event(e) {
  if (cljs.core.coll_QMARK_.call(null, e)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.name, e));
  } else {
    return cljs.core.clj__GT_js.call(null, e);
  }
};
jayq.core.on = function() {
  var on__delegate = function($elem, events, p__37951) {
    var vec__37953 = p__37951;
    var sel = cljs.core.nth.call(null, vec__37953, 0, null);
    var data = cljs.core.nth.call(null, vec__37953, 1, null);
    var handler = cljs.core.nth.call(null, vec__37953, 2, null);
    return $elem.on(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var on = function($elem, events, var_args) {
    var p__37951 = null;
    if (arguments.length > 2) {
      p__37951 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return on__delegate.call(this, $elem, events, p__37951);
  };
  on.cljs$lang$maxFixedArity = 2;
  on.cljs$lang$applyTo = function(arglist__37954) {
    var $elem = cljs.core.first(arglist__37954);
    arglist__37954 = cljs.core.next(arglist__37954);
    var events = cljs.core.first(arglist__37954);
    var p__37951 = cljs.core.rest(arglist__37954);
    return on__delegate($elem, events, p__37951);
  };
  on.cljs$core$IFn$_invoke$arity$variadic = on__delegate;
  return on;
}();
jayq.core.one = function() {
  var one__delegate = function($elem, events, p__37955) {
    var vec__37957 = p__37955;
    var sel = cljs.core.nth.call(null, vec__37957, 0, null);
    var data = cljs.core.nth.call(null, vec__37957, 1, null);
    var handler = cljs.core.nth.call(null, vec__37957, 2, null);
    return $elem.one(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var one = function($elem, events, var_args) {
    var p__37955 = null;
    if (arguments.length > 2) {
      p__37955 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return one__delegate.call(this, $elem, events, p__37955);
  };
  one.cljs$lang$maxFixedArity = 2;
  one.cljs$lang$applyTo = function(arglist__37958) {
    var $elem = cljs.core.first(arglist__37958);
    arglist__37958 = cljs.core.next(arglist__37958);
    var events = cljs.core.first(arglist__37958);
    var p__37955 = cljs.core.rest(arglist__37958);
    return one__delegate($elem, events, p__37955);
  };
  one.cljs$core$IFn$_invoke$arity$variadic = one__delegate;
  return one;
}();
jayq.core.off = function() {
  var off__delegate = function($elem, events, p__37959) {
    var vec__37961 = p__37959;
    var sel = cljs.core.nth.call(null, vec__37961, 0, null);
    var handler = cljs.core.nth.call(null, vec__37961, 1, null);
    return $elem.off(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), handler);
  };
  var off = function($elem, events, var_args) {
    var p__37959 = null;
    if (arguments.length > 2) {
      p__37959 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return off__delegate.call(this, $elem, events, p__37959);
  };
  off.cljs$lang$maxFixedArity = 2;
  off.cljs$lang$applyTo = function(arglist__37962) {
    var $elem = cljs.core.first(arglist__37962);
    arglist__37962 = cljs.core.next(arglist__37962);
    var events = cljs.core.first(arglist__37962);
    var p__37959 = cljs.core.rest(arglist__37962);
    return off__delegate($elem, events, p__37959);
  };
  off.cljs$core$IFn$_invoke$arity$variadic = off__delegate;
  return off;
}();
jayq.core.prevent = function prevent(e) {
  return e.preventDefault();
};
jayq.core.height = function() {
  var height = null;
  var height__1 = function($elem) {
    return $elem.height();
  };
  var height__2 = function($elem, x) {
    return $elem.height(x);
  };
  height = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return height__1.call(this, $elem);
      case 2:
        return height__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  height.cljs$core$IFn$_invoke$arity$1 = height__1;
  height.cljs$core$IFn$_invoke$arity$2 = height__2;
  return height;
}();
jayq.core.width = function() {
  var width = null;
  var width__1 = function($elem) {
    return $elem.width();
  };
  var width__2 = function($elem, x) {
    return $elem.width(x);
  };
  width = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return width__1.call(this, $elem);
      case 2:
        return width__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  width.cljs$core$IFn$_invoke$arity$1 = width__1;
  width.cljs$core$IFn$_invoke$arity$2 = width__2;
  return width;
}();
jayq.core.inner_height = function inner_height($elem) {
  return $elem.innerHeight();
};
jayq.core.inner_width = function inner_width($elem) {
  return $elem.innerWidth();
};
jayq.core.outer_height = function outer_height($elem) {
  return $elem.outerHeight();
};
jayq.core.outer_width = function outer_width($elem) {
  return $elem.outerWidth();
};
jayq.core.offset = function() {
  var offset = null;
  var offset__1 = function($elem) {
    return cljs.core.js__GT_clj.call(null, $elem.offset(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
  };
  var offset__2 = function($elem, coords) {
    return cljs.core.clj__GT_js.call(null, coords).offset();
  };
  offset = function($elem, coords) {
    switch(arguments.length) {
      case 1:
        return offset__1.call(this, $elem);
      case 2:
        return offset__2.call(this, $elem, coords);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  offset.cljs$core$IFn$_invoke$arity$1 = offset__1;
  offset.cljs$core$IFn$_invoke$arity$2 = offset__2;
  return offset;
}();
jayq.core.offset_parent = function offset_parent($elem) {
  return $elem.offsetParent();
};
jayq.core.position = function position($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.position(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
jayq.core.scroll_left = function() {
  var scroll_left = null;
  var scroll_left__1 = function($elem) {
    return $elem.scrollLeft();
  };
  var scroll_left__2 = function($elem, x) {
    return $elem.scrollLeft(x);
  };
  scroll_left = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_left__1.call(this, $elem);
      case 2:
        return scroll_left__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_left.cljs$core$IFn$_invoke$arity$1 = scroll_left__1;
  scroll_left.cljs$core$IFn$_invoke$arity$2 = scroll_left__2;
  return scroll_left;
}();
jayq.core.scroll_top = function() {
  var scroll_top = null;
  var scroll_top__1 = function($elem) {
    return $elem.scrollTop();
  };
  var scroll_top__2 = function($elem, x) {
    return $elem.scrollTop(x);
  };
  scroll_top = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_top__1.call(this, $elem);
      case 2:
        return scroll_top__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_top.cljs$core$IFn$_invoke$arity$1 = scroll_top__1;
  scroll_top.cljs$core$IFn$_invoke$arity$2 = scroll_top__2;
  return scroll_top;
}();
jayq.core.$deferred = $.Deferred;
jayq.core.$when = $.when;
jayq.core.then = function() {
  var then = null;
  var then__3 = function(deferred, done_fn, fail_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn));
  };
  var then__4 = function(deferred, done_fn, fail_fn, progress_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn), cljs.core.clj__GT_js.call(null, progress_fn));
  };
  then = function(deferred, done_fn, fail_fn, progress_fn) {
    switch(arguments.length) {
      case 3:
        return then__3.call(this, deferred, done_fn, fail_fn);
      case 4:
        return then__4.call(this, deferred, done_fn, fail_fn, progress_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  then.cljs$core$IFn$_invoke$arity$3 = then__3;
  then.cljs$core$IFn$_invoke$arity$4 = then__4;
  return then;
}();
jayq.core.done = function() {
  var done__delegate = function(deferred, fns_args) {
    return deferred.done.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var done = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return done__delegate.call(this, deferred, fns_args);
  };
  done.cljs$lang$maxFixedArity = 1;
  done.cljs$lang$applyTo = function(arglist__37963) {
    var deferred = cljs.core.first(arglist__37963);
    var fns_args = cljs.core.rest(arglist__37963);
    return done__delegate(deferred, fns_args);
  };
  done.cljs$core$IFn$_invoke$arity$variadic = done__delegate;
  return done;
}();
jayq.core.fail = function() {
  var fail__delegate = function(deferred, fns_args) {
    return deferred.fail.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var fail = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fail__delegate.call(this, deferred, fns_args);
  };
  fail.cljs$lang$maxFixedArity = 1;
  fail.cljs$lang$applyTo = function(arglist__37964) {
    var deferred = cljs.core.first(arglist__37964);
    var fns_args = cljs.core.rest(arglist__37964);
    return fail__delegate(deferred, fns_args);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
jayq.core.progress = function progress(deferred, fns_args) {
  return deferred.progress(cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.promise = function() {
  var promise = null;
  var promise__1 = function(deferred) {
    return deferred.promise();
  };
  var promise__2 = function(deferred, type) {
    return deferred.promise(type);
  };
  var promise__3 = function(deferred, type, target) {
    return deferred.promise(type, target);
  };
  promise = function(deferred, type, target) {
    switch(arguments.length) {
      case 1:
        return promise__1.call(this, deferred);
      case 2:
        return promise__2.call(this, deferred, type);
      case 3:
        return promise__3.call(this, deferred, type, target);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  promise.cljs$core$IFn$_invoke$arity$1 = promise__1;
  promise.cljs$core$IFn$_invoke$arity$2 = promise__2;
  promise.cljs$core$IFn$_invoke$arity$3 = promise__3;
  return promise;
}();
jayq.core.always = function() {
  var always__delegate = function(deferred, fns_args) {
    return deferred.always.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var always = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return always__delegate.call(this, deferred, fns_args);
  };
  always.cljs$lang$maxFixedArity = 1;
  always.cljs$lang$applyTo = function(arglist__37965) {
    var deferred = cljs.core.first(arglist__37965);
    var fns_args = cljs.core.rest(arglist__37965);
    return always__delegate(deferred, fns_args);
  };
  always.cljs$core$IFn$_invoke$arity$variadic = always__delegate;
  return always;
}();
jayq.core.reject = function reject(deferred, args) {
  return deferred.reject(args);
};
jayq.core.reject_with = function reject_with(deferred, context, args) {
  return deferred.rejectWith(context, args);
};
jayq.core.notify = function notify(deferred, args) {
  return deferred.notify(args);
};
jayq.core.notify_with = function notify_with(deferred, context, args) {
  return deferred.notifyWith(context, args);
};
jayq.core.resolve = function resolve(deferred, args) {
  return deferred.resolve(args);
};
jayq.core.resolve_with = function resolve_with(deferred, context, args) {
  return deferred.resolveWith(context, args);
};
jayq.core.pipe = function() {
  var pipe = null;
  var pipe__2 = function(deferred, done_filter) {
    return deferred.pipe(done_filter);
  };
  var pipe__3 = function(deferred, done_filter, fail_filter) {
    return deferred.pipe(done_filter, fail_filter);
  };
  var pipe__4 = function(deferred, done_filter, fail_filter, progress_filter) {
    return deferred.pipe(done_filter, fail_filter, progress_filter);
  };
  pipe = function(deferred, done_filter, fail_filter, progress_filter) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, deferred, done_filter);
      case 3:
        return pipe__3.call(this, deferred, done_filter, fail_filter);
      case 4:
        return pipe__4.call(this, deferred, done_filter, fail_filter, progress_filter);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  pipe.cljs$core$IFn$_invoke$arity$4 = pipe__4;
  return pipe;
}();
jayq.core.state = function state(deferred) {
  return cljs.core.keyword.call(null, deferred.state());
};
jayq.core.deferred_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), jayq.core.$when, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  var dfd = jayq.core.$deferred.call(null);
  jayq.core.done.call(null, x, function(v) {
    return jayq.core.done.call(null, f.call(null, v), cljs.core.partial.call(null, jayq.core.resolve, dfd));
  });
  return jayq.core.promise.call(null, dfd);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
jayq.core.ajax_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), cljs.core.identity, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  return jayq.core.done.call(null, jayq.core.ajax.call(null, x), f);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
goog.provide("clustermap.components.timeline_chart");
goog.require("cljs.core");
goog.require("sablono.core");
goog.require("jayq.core");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("om.dom");
goog.require("om.core");
goog.require("om.core");
goog.require("hiccups.runtime");
goog.require("hiccups.runtime");
goog.require("clojure.set");
goog.require("om.dom");
goog.require("clojure.set");
goog.require("jayq.core");
clustermap.components.timeline_chart.create_chart = function create_chart(data, node, p__33662) {
  var map__33664 = p__33662;
  var map__33664__$1 = cljs.core.seq_QMARK_.call(null, map__33664) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33664) : map__33664;
  var opts = map__33664__$1;
  var y1_title = cljs.core.get.call(null, map__33664__$1, new cljs.core.Keyword(null, "y1-title", "y1-title", 3377247893));
  var y0_title = cljs.core.get.call(null, map__33664__$1, new cljs.core.Keyword(null, "y0-title", "y0-title", 2489744212));
  var x_labels = cljs.core.map.call(null, new cljs.core.Keyword(null, "date", "date", 1016980256), data);
  var stats = cljs.core.map.call(null, new cljs.core.Keyword(null, "stats", "stats", 1123661841), data);
  var y_median = cljs.core.map.call(null, function(x_labels, stats) {
    return function(p1__33660_SHARP_) {
      return cljs.core.get_in.call(null, p1__33660_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stats", "stats", 1123661841), new cljs.core.Keyword(null, "median", "median", 4230840444)], null));
    };
  }(x_labels, stats), data);
  var y_mean = cljs.core.map.call(null, function(x_labels, stats, y_median) {
    return function(p1__33661_SHARP_) {
      return cljs.core.get_in.call(null, p1__33661_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stats", "stats", 1123661841), new cljs.core.Keyword(null, "mean", "mean", 1017251639)], null));
    };
  }(x_labels, stats, y_median), data);
  return jayq.core.$.call(null, node).highcharts(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "chart", "chart", 1108527952), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", 1127031096), null, new cljs.core.Keyword(null, "height", "height", 4087841945), 300], null), new cljs.core.Keyword(null, "title", "title", 1124275658), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", 
  "text", 1017460895), null], null), new cljs.core.Keyword(null, "xAxis", "xAxis", 1126781867), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "categories", "categories", 2310420878), x_labels, new cljs.core.Keyword(null, "labels", "labels", 4198454129), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "rotation", "rotation", 973603568), 270], null)], null), new cljs.core.Keyword(null, "yAxis", "yAxis", 1127705388), new cljs.core.PersistentVector(null, 
  1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "title", "title", 1124275658), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", 1017460895), y0_title], null), new cljs.core.Keyword(null, "min", "min", 1014012356), 0], null)], null), new cljs.core.Keyword(null, "series", "series", 4403032553), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 
  4, [new cljs.core.Keyword(null, "name", "name", 1017277949), [cljs.core.str("Mean "), cljs.core.str(y0_title)].join(""), new cljs.core.Keyword(null, "type", "type", 1017479852), "line", new cljs.core.Keyword(null, "yAxis", "yAxis", 1127705388), 0, new cljs.core.Keyword(null, "data", "data", 1016980252), y_mean], null)], null)], null)));
};
clustermap.components.timeline_chart.timeline_chart = function timeline_chart(data, owner, p__33665) {
  var map__33670 = p__33665;
  var map__33670__$1 = cljs.core.seq_QMARK_.call(null, map__33670) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33670) : map__33670;
  var opts = map__33670__$1;
  var id = cljs.core.get.call(null, map__33670__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  if (typeof clustermap.components.timeline_chart.t33671 !== "undefined") {
  } else {
    clustermap.components.timeline_chart.t33671 = function(id, opts, map__33670, p__33665, owner, data, timeline_chart, meta33672) {
      this.id = id;
      this.opts = opts;
      this.map__33670 = map__33670;
      this.p__33665 = p__33665;
      this.owner = owner;
      this.data = data;
      this.timeline_chart = timeline_chart;
      this.meta33672 = meta33672;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.timeline_chart.t33671.cljs$lang$type = true;
    clustermap.components.timeline_chart.t33671.cljs$lang$ctorStr = "clustermap.components.timeline-chart/t33671";
    clustermap.components.timeline_chart.t33671.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.timeline-chart/t33671");
    };
    clustermap.components.timeline_chart.t33671.prototype.om$core$IDidUpdate$ = true;
    clustermap.components.timeline_chart.t33671.prototype.om$core$IDidUpdate$did_update$arity$4 = function(this$, prev_props, prev_state, root_node) {
      var self__ = this;
      var this$__$1 = this;
      return clustermap.components.timeline_chart.create_chart.call(null, self__.data, om.core.get_node.call(null, self__.owner, "chart"), self__.opts);
    };
    clustermap.components.timeline_chart.t33671.prototype.om$core$IDidMount$ = true;
    clustermap.components.timeline_chart.t33671.prototype.om$core$IDidMount$did_mount$arity$2 = function(this$, node) {
      var self__ = this;
      var this$__$1 = this;
      clustermap.components.timeline_chart.create_chart.call(null, self__.data, om.core.get_node.call(null, self__.owner, "chart"), self__.opts);
      return jayq.core.$.call(null, document).on("clustermap-change-view", function(e) {
        var chart = jayq.core.$.call(null, om.core.get_node.call(null, self__.owner, "chart"));
        if (cljs.core.truth_(chart.is(":visible"))) {
          return chart.highcharts().reflow();
        } else {
          return null;
        }
      });
    };
    clustermap.components.timeline_chart.t33671.prototype.om$core$IRender$ = true;
    clustermap.components.timeline_chart.t33671.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return React.DOM.div({"className":"timeline-chart", "id":self__.id, "ref":"chart"});
    };
    clustermap.components.timeline_chart.t33671.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33673) {
      var self__ = this;
      var _33673__$1 = this;
      return self__.meta33672;
    };
    clustermap.components.timeline_chart.t33671.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33673, meta33672__$1) {
      var self__ = this;
      var _33673__$1 = this;
      return new clustermap.components.timeline_chart.t33671(self__.id, self__.opts, self__.map__33670, self__.p__33665, self__.owner, self__.data, self__.timeline_chart, meta33672__$1);
    };
    clustermap.components.timeline_chart.__GT_t33671 = function __GT_t33671(id__$1, opts__$1, map__33670__$2, p__33665__$1, owner__$1, data__$1, timeline_chart__$1, meta33672) {
      return new clustermap.components.timeline_chart.t33671(id__$1, opts__$1, map__33670__$2, p__33665__$1, owner__$1, data__$1, timeline_chart__$1, meta33672);
    };
  }
  return new clustermap.components.timeline_chart.t33671(id, opts, map__33670__$1, p__33665, owner, data, timeline_chart, null);
};
goog.provide("clustermap.components.full_report.charts");
goog.require("cljs.core");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("om.core");
goog.require("clustermap.components.timeline_chart");
goog.require("om.core");
goog.require("clustermap.components.timeline_chart");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("clustermap.formats.number");
clustermap.components.full_report.charts.charts = function charts(data, owner) {
  if (typeof clustermap.components.full_report.charts.t32929 !== "undefined") {
  } else {
    clustermap.components.full_report.charts.t32929 = function(owner, data, charts, meta32930) {
      this.owner = owner;
      this.data = data;
      this.charts = charts;
      this.meta32930 = meta32930;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.charts.t32929.cljs$lang$type = true;
    clustermap.components.full_report.charts.t32929.cljs$lang$ctorStr = "clustermap.components.full-report.charts/t32929";
    clustermap.components.full_report.charts.t32929.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report.charts/t32929");
    };
    clustermap.components.full_report.charts.t32929.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.charts.t32929.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      var attrs32932 = function() {
        var temp__4090__auto__ = (new cljs.core.Keyword(null, "selection-investment-account-timelines", "selection-investment-account-timelines", 1845704779)).cljs$core$IFn$_invoke$arity$1(self__.data);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var timelines = temp__4090__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.grid", "div.grid", 1323787765), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.tbl", "div.tbl", 2686480467), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.tbl-cell.charts", "div.tbl-cell.charts", 2527561447), new cljs.core.PersistentVector(null, 
          2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.tbl", "div.tbl", 2686480467), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.tbl-row", "div.tbl-row", 1065043552), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.tbl-cell", "div.tbl-cell", 2598766144), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Keyword(null, "div.box.box-first", "div.box.box-first", 2223624352), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "header", "header", 4087600639), "Turnover"], null), om.core.build.call(null, clustermap.components.timeline_chart.timeline_chart, (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(timelines), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
          "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), "turnover-timeline-chart", new cljs.core.Keyword(null, "y0-title", "y0-title", 2489744212), "Turnover", new cljs.core.Keyword(null, "y1-title", "y1-title", 3377247893), "# Filings"], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "turnover-timeline-chart"], null))], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Keyword(null, "div.tbl-cell", "div.tbl-cell", 2598766144), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.box.box-last", "div.box.box-last", 1468740554), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "header", "header", 4087600639), "Employment"], null), om.core.build.call(null, clustermap.components.timeline_chart.timeline_chart, (new cljs.core.Keyword(null, 
          "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(timelines), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), "employment-timeline-chart", new cljs.core.Keyword(null, "y0-title", "y0-title", 2489744212), "Employment", new cljs.core.Keyword(null, "y1-title", "y1-title", 3377247893), "# Filings"], null), new cljs.core.Keyword(null, 
          "react-key", "react-key", 4184082563), "employment-timeline-chart"], null))], null)], null)], null)], null)], null)], null)], null);
        } else {
          return null;
        }
      }();
      if (cljs.core.map_QMARK_.call(null, attrs32932)) {
        return React.DOM.div(sablono.interpreter.attributes.call(null, sablono.util.merge_with_class.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["full-report-charts"], null)], null), attrs32932)), null);
      } else {
        return React.DOM.div({"className":"full-report-charts"}, sablono.interpreter.interpret.call(null, attrs32932));
      }
    };
    clustermap.components.full_report.charts.t32929.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32931) {
      var self__ = this;
      var _32931__$1 = this;
      return self__.meta32930;
    };
    clustermap.components.full_report.charts.t32929.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32931, meta32930__$1) {
      var self__ = this;
      var _32931__$1 = this;
      return new clustermap.components.full_report.charts.t32929(self__.owner, self__.data, self__.charts, meta32930__$1);
    };
    clustermap.components.full_report.charts.__GT_t32929 = function __GT_t32929(owner__$1, data__$1, charts__$1, meta32930) {
      return new clustermap.components.full_report.charts.t32929(owner__$1, data__$1, charts__$1, meta32930);
    };
  }
  return new clustermap.components.full_report.charts.t32929(owner, data, charts, null);
};
goog.provide("clustermap.components.full_report");
goog.require("cljs.core");
goog.require("sablono.core");
goog.require("jayq.core");
goog.require("clustermap.components.full_report.company_site_list");
goog.require("sablono.core");
goog.require("clustermap.components.full_report.overview");
goog.require("sablono.core");
goog.require("clustermap.components.full_report.company_site_list");
goog.require("om.core");
goog.require("om.core");
goog.require("clustermap.components.full_report.overview");
goog.require("clustermap.components.full_report.company_list");
goog.require("clustermap.components.full_report.company_list");
goog.require("clustermap.components.full_report.charts");
goog.require("clustermap.components.full_report.charts");
goog.require("jayq.core");
clustermap.components.full_report.single_company_selection_QMARK_ = function single_company_selection_QMARK_(selector) {
  return cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, selector)) && cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), function() {
    var G__33154 = selector;
    var G__33154__$1 = G__33154 == null ? null : cljs.core.keys.call(null, G__33154);
    var G__33154__$2 = G__33154__$1 == null ? null : cljs.core.first.call(null, G__33154__$1);
    return G__33154__$2;
  }());
};
clustermap.components.full_report.full_report_component = function full_report_component(p__33155, owner) {
  var map__33162 = p__33155;
  var map__33162__$1 = cljs.core.seq_QMARK_.call(null, map__33162) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33162) : map__33162;
  var data = map__33162__$1;
  var all_portfolio_companies_summary = cljs.core.get.call(null, map__33162__$1, new cljs.core.Keyword(null, "all-portfolio-companies-summary", "all-portfolio-companies-summary", 3049476533));
  var selection = cljs.core.get.call(null, map__33162__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
  var selector = cljs.core.get.call(null, map__33162__$1, new cljs.core.Keyword(null, "selector", "selector", 2205476689));
  var map__33163 = om.core.get_shared.call(null, owner);
  var map__33163__$1 = cljs.core.seq_QMARK_.call(null, map__33163) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33163) : map__33163;
  var link_fn = cljs.core.get.call(null, map__33163__$1, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301));
  var path_fn = cljs.core.get.call(null, map__33163__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
  var comm = cljs.core.get.call(null, map__33163__$1, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
  if (typeof clustermap.components.full_report.t33164 !== "undefined") {
  } else {
    clustermap.components.full_report.t33164 = function(full_report_component, path_fn, data, all_portfolio_companies_summary, link_fn, map__33162, selector, map__33163, p__33155, selection, comm, owner, meta33165) {
      this.full_report_component = full_report_component;
      this.path_fn = path_fn;
      this.data = data;
      this.all_portfolio_companies_summary = all_portfolio_companies_summary;
      this.link_fn = link_fn;
      this.map__33162 = map__33162;
      this.selector = selector;
      this.map__33163 = map__33163;
      this.p__33155 = p__33155;
      this.selection = selection;
      this.comm = comm;
      this.owner = owner;
      this.meta33165 = meta33165;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.full_report.t33164.cljs$lang$type = true;
    clustermap.components.full_report.t33164.cljs$lang$ctorStr = "clustermap.components.full-report/t33164";
    clustermap.components.full_report.t33164.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.full-report/t33164");
    };
    clustermap.components.full_report.t33164.prototype.om$core$IDidUpdate$ = true;
    clustermap.components.full_report.t33164.prototype.om$core$IDidUpdate$did_update$arity$4 = function(this$, prev_props, prev_state, root_node) {
      var self__ = this;
      var this$__$1 = this;
      jayq.core.$.call(null, "[data-toggle\x3d'tooltip']", root_node).data("bs.tooltip", false);
      return jayq.core.$.call(null, "[data-toggle\x3d'tooltip']", root_node).tooltip();
    };
    clustermap.components.full_report.t33164.prototype.om$core$IRender$ = true;
    clustermap.components.full_report.t33164.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var attrs33167 = om.core.build.call(null, clustermap.components.full_report.overview.overview, self__.data, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "overview"], null));
      if (cljs.core.map_QMARK_.call(null, attrs33167)) {
        return React.DOM.div(sablono.interpreter.attributes.call(null, attrs33167), sablono.interpreter.interpret.call(null, om.core.build.call(null, clustermap.components.full_report.charts.charts, self__.data, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "details"], 
        null))), clustermap.components.full_report.single_company_selection_QMARK_.call(null, self__.selector) ? sablono.interpreter.interpret.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "selection-investments", "selection-investments", 2385751217)).cljs$core$IFn$_invoke$arity$1(self__.data)) ? om.core.build.call(null, clustermap.components.full_report.company_site_list.company_site_list, (new cljs.core.Keyword(null, "selection-investments", "selection-investments", 2385751217)).cljs$core$IFn$_invoke$arity$1(self__.data), 
        new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301), self__.link_fn, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "selection-investments"], null)) : null) : sablono.interpreter.interpret.call(null, 
        cljs.core.truth_((new cljs.core.Keyword(null, "selection-investment-aggs", "selection-investment-aggs", 989474685)).cljs$core$IFn$_invoke$arity$1(self__.data)) ? om.core.build.call(null, clustermap.components.full_report.company_list.company_list, (new cljs.core.Keyword(null, "selection-investment-aggs", "selection-investment-aggs", 989474685)).cljs$core$IFn$_invoke$arity$1(self__.data), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 
        3, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301), self__.link_fn, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "selection-investments-by-company"], null)) : null));
      } else {
        return React.DOM.div(null, sablono.interpreter.interpret.call(null, attrs33167), sablono.interpreter.interpret.call(null, om.core.build.call(null, clustermap.components.full_report.charts.charts, self__.data, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), 
        "details"], null))), clustermap.components.full_report.single_company_selection_QMARK_.call(null, self__.selector) ? sablono.interpreter.interpret.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "selection-investments", "selection-investments", 2385751217)).cljs$core$IFn$_invoke$arity$1(self__.data)) ? om.core.build.call(null, clustermap.components.full_report.company_site_list.company_site_list, (new cljs.core.Keyword(null, "selection-investments", "selection-investments", 2385751217)).cljs$core$IFn$_invoke$arity$1(self__.data), 
        new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301), self__.link_fn, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "selection-investments"], null)) : null) : sablono.interpreter.interpret.call(null, 
        cljs.core.truth_((new cljs.core.Keyword(null, "selection-investment-aggs", "selection-investment-aggs", 989474685)).cljs$core$IFn$_invoke$arity$1(self__.data)) ? om.core.build.call(null, clustermap.components.full_report.company_list.company_list, (new cljs.core.Keyword(null, "selection-investment-aggs", "selection-investment-aggs", 989474685)).cljs$core$IFn$_invoke$arity$1(self__.data), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 
        3, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301), self__.link_fn, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), "selection-investments-by-company"], null)) : null));
      }
    };
    clustermap.components.full_report.t33164.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33166) {
      var self__ = this;
      var _33166__$1 = this;
      return self__.meta33165;
    };
    clustermap.components.full_report.t33164.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33166, meta33165__$1) {
      var self__ = this;
      var _33166__$1 = this;
      return new clustermap.components.full_report.t33164(self__.full_report_component, self__.path_fn, self__.data, self__.all_portfolio_companies_summary, self__.link_fn, self__.map__33162, self__.selector, self__.map__33163, self__.p__33155, self__.selection, self__.comm, self__.owner, meta33165__$1);
    };
    clustermap.components.full_report.__GT_t33164 = function __GT_t33164(full_report_component__$1, path_fn__$1, data__$1, all_portfolio_companies_summary__$1, link_fn__$1, map__33162__$2, selector__$1, map__33163__$2, p__33155__$1, selection__$1, comm__$1, owner__$1, meta33165) {
      return new clustermap.components.full_report.t33164(full_report_component__$1, path_fn__$1, data__$1, all_portfolio_companies_summary__$1, link_fn__$1, map__33162__$2, selector__$1, map__33163__$2, p__33155__$1, selection__$1, comm__$1, owner__$1, meta33165);
    };
  }
  return new clustermap.components.full_report.t33164(full_report_component, path_fn, data, all_portfolio_companies_summary, link_fn, map__33162__$1, selector, map__33163__$1, p__33155, selection, comm, owner, null);
};
clustermap.components.full_report.mount = function mount(app_state, elem_id, shared) {
  return om.core.root.call(null, app_state, shared, clustermap.components.full_report.full_report_component, document.getElementById(elem_id));
};
goog.provide("clustermap.om");
goog.require("cljs.core");
clustermap.om.burrow = function burrow(component_fn, korks) {
  var use_korks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return function() {
    var G__33798__delegate = function(args) {
      return cljs.core.apply.call(null, component_fn, cljs.core.get_in.call(null, cljs.core.first.call(null, args), use_korks), cljs.core.rest.call(null, args));
    };
    var G__33798 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__33798__delegate.call(this, args);
    };
    G__33798.cljs$lang$maxFixedArity = 0;
    G__33798.cljs$lang$applyTo = function(arglist__33799) {
      var args = cljs.core.seq(arglist__33799);
      return G__33798__delegate(args);
    };
    G__33798.cljs$core$IFn$_invoke$arity$variadic = G__33798__delegate;
    return G__33798;
  }();
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t37484 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t37484 = function(f, fn_handler, meta37485) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta37485 = meta37485;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t37484.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t37484.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t37484";
    cljs.core.async.impl.ioc_helpers.t37484.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.ioc-helpers/t37484");
    };
    cljs.core.async.impl.ioc_helpers.t37484.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t37484.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t37484.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t37484.prototype.cljs$core$IMeta$_meta$arity$1 = function(_37486) {
      var self__ = this;
      var _37486__$1 = this;
      return self__.meta37485;
    };
    cljs.core.async.impl.ioc_helpers.t37484.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_37486, meta37485__$1) {
      var self__ = this;
      var _37486__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t37484(self__.f, self__.fn_handler, meta37485__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t37484 = function __GT_t37484(f__$1, fn_handler__$1, meta37485) {
      return new cljs.core.async.impl.ioc_helpers.t37484(f__$1, fn_handler__$1, meta37485);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t37484(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e37488) {
    if (e37488 instanceof Object) {
      var ex = e37488;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e37488;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_37491_37493 = state;
    statearr_37491_37493[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_37491_37493[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_37492_37494 = state;
    statearr_37492_37494[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_37492_37494[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_37497_37499 = state;
    statearr_37497_37499[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_37497_37499[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_37498_37500 = state;
    statearr_37498_37500[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_37498_37500[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__37501) {
    var map__37506 = p__37501;
    var map__37506__$1 = cljs.core.seq_QMARK_.call(null, map__37506) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37506) : map__37506;
    var opts = map__37506__$1;
    var statearr_37507_37510 = state;
    statearr_37507_37510[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_37508_37511 = state;
      statearr_37508_37511[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_37509_37512 = state;
      statearr_37509_37512[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__37501 = null;
    if (arguments.length > 3) {
      p__37501 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__37501);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__37513) {
    var state = cljs.core.first(arglist__37513);
    arglist__37513 = cljs.core.next(arglist__37513);
    var cont_block = cljs.core.first(arglist__37513);
    arglist__37513 = cljs.core.next(arglist__37513);
    var ports = cljs.core.first(arglist__37513);
    var p__37501 = cljs.core.rest(arglist__37513);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__37501);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3981__auto__) {
  var self__ = this;
  var this__3981__auto____$1 = this;
  var h__3817__auto__ = self__.__hash;
  if (!(h__3817__auto__ == null)) {
    return h__3817__auto__;
  } else {
    var h__3817__auto____$1 = cljs.core.hash_imap.call(null, this__3981__auto____$1);
    self__.__hash = h__3817__auto____$1;
    return h__3817__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3986__auto__, k__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3986__auto____$1, k__3987__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3988__auto__, k37515, else__3989__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k37515, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k37515, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k37515, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k37515, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k37515, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k37515, else__3989__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3993__auto__, k__3994__auto__, G__37514) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  var pred__37517 = cljs.core.keyword_identical_QMARK_;
  var expr__37518 = k__3994__auto__;
  if (cljs.core.truth_(pred__37517.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__37518))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__37514, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__37517.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__37518))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__37514, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__37517.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__37518))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__37514, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__37517.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__37518))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__37514, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__37517.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__37518))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__37514, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3994__auto__, G__37514), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4000__auto__, writer__4001__auto__, opts__4002__auto__) {
  var self__ = this;
  var this__4000__auto____$1 = this;
  var pr_pair__4003__auto__ = function(keyval__4004__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4001__auto__, cljs.core.pr_writer, "", " ", "", opts__4002__auto__, keyval__4004__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4001__auto__, pr_pair__4003__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4002__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3991__auto__, entry__3992__auto__) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3992__auto__)) {
    return cljs.core._assoc.call(null, this__3991__auto____$1, cljs.core._nth.call(null, entry__3992__auto__, 0), cljs.core._nth.call(null, entry__3992__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3991__auto____$1, entry__3992__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3998__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3990__auto__) {
  var self__ = this;
  var this__3990__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3982__auto__, other__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = other__3983__auto__;
    if (cljs.core.truth_(and__3394__auto__)) {
      return this__3982__auto____$1.constructor === other__3983__auto__.constructor && cljs.core.equiv_map.call(null, this__3982__auto____$1, other__3983__auto__);
    } else {
      return and__3394__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3985__auto__, G__37514) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__37514, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3995__auto__, k__3996__auto__) {
  var self__ = this;
  var this__3995__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__3996__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3995__auto____$1), self__.__meta), k__3996__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3996__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4020__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__37516) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__37516), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__37516), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__37516), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__37516), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__37516), null, cljs.core.dissoc.call(null, G__37516, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_37521 = state;
  statearr_37521[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_37521;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = exception;
      if (cljs.core.truth_(and__3394__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3394__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3394__auto__ = exception;
        if (cljs.core.truth_(and__3394__auto__)) {
          var and__3394__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3394__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3394__auto____$1;
          }
        } else {
          return and__3394__auto__;
        }
      }())) {
        var statearr_37527 = state;
        statearr_37527[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_37527[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_37527[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_37527[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_37527;
      } else {
        if (cljs.core.truth_(function() {
          var and__3394__auto__ = exception;
          if (cljs.core.truth_(and__3394__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3394__auto__;
          }
        }())) {
          var statearr_37528_37532 = state;
          statearr_37528_37532[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__37533 = state;
          state = G__37533;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3394__auto__ = exception;
            if (cljs.core.truth_(and__3394__auto__)) {
              var and__3394__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3394__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3394__auto____$1;
              }
            } else {
              return and__3394__auto__;
            }
          }())) {
            var statearr_37529 = state;
            statearr_37529[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_37529[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_37529;
          } else {
            if (cljs.core.truth_(function() {
              var and__3394__auto__ = cljs.core.not.call(null, exception);
              if (and__3394__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3394__auto__;
              }
            }())) {
              var statearr_37530 = state;
              statearr_37530[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_37530[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_37530;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_37531 = state;
                statearr_37531[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_37531[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_37531;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t37473 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t37473 = function(val, box, meta37474) {
      this.val = val;
      this.box = box;
      this.meta37474 = meta37474;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t37473.cljs$lang$type = true;
    cljs.core.async.impl.channels.t37473.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t37473";
    cljs.core.async.impl.channels.t37473.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.channels/t37473");
    };
    cljs.core.async.impl.channels.t37473.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t37473.prototype.cljs$core$IMeta$_meta$arity$1 = function(_37475) {
      var self__ = this;
      var _37475__$1 = this;
      return self__.meta37474;
    };
    cljs.core.async.impl.channels.t37473.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_37475, meta37474__$1) {
      var self__ = this;
      var _37475__$1 = this;
      return new cljs.core.async.impl.channels.t37473(self__.val, self__.box, meta37474__$1);
    };
    cljs.core.async.impl.channels.__GT_t37473 = function __GT_t37473(val__$1, box__$1, meta37474) {
      return new cljs.core.async.impl.channels.t37473(val__$1, box__$1, meta37474);
    };
  }
  return new cljs.core.async.impl.channels.t37473(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3971__auto__, writer__3972__auto__, opts__3973__auto__) {
  return cljs.core._write.call(null, writer__3972__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_37476 = self__.takes.pop();
      if (taker_37476 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_37476)) {
          var take_cb_37477 = cljs.core.async.impl.protocols.commit.call(null, taker_37476);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_37477, taker_37476) {
            return function() {
              return take_cb_37477.call(null, null);
            };
          }(take_cb_37477, taker_37476));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__37431 = level + 1;
        level = G__37431;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_37432 = 0;
    while (true) {
      if (i_37432 < arr.length) {
        arr[i_37432] = null;
        var G__37433 = i_37432 + 1;
        i_37432 = G__37433;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__37434 = x_SINGLEQUOTE_;
                x__$1 = G__37434;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__37435 = x__$1;
        var G__37436 = k;
        var G__37437 = level - 1;
        var G__37438 = update;
        x = G__37435;
        k = G__37436;
        level = G__37437;
        update = G__37438;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
  return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_37439 = self__.level + 1;
      while (true) {
        if (i_37439 <= new_level + 1) {
          update[i_37439] = self__.header;
          var G__37440 = i_37439 + 1;
          i_37439 = G__37440;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_37441 = 0;
    while (true) {
      if (i_37441 <= self__.level) {
        var links_37442 = update[i_37441].forward;
        if (links_37442[i_37441] === x__$1) {
          links_37442[i_37441] = x__$1.forward[i_37441];
          var G__37443 = i_37441 + 1;
          i_37441 = G__37443;
          continue;
        } else {
          var G__37444 = i_37441 + 1;
          i_37441 = G__37444;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__37445 = x_SINGLEQUOTE_;
              x__$1 = G__37445;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__37446 = nx;
        var G__37447 = level__$1 - 1;
        x = G__37446;
        level__$1 = G__37447;
        continue;
      } else {
        var G__37448 = x;
        var G__37449 = level__$1 - 1;
        x = G__37448;
        level__$1 = G__37449;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__37450 = x_SINGLEQUOTE_;
              x__$1 = G__37450;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__37451 = nx;
        var G__37452 = level__$1 - 1;
        x = G__37451;
        level__$1 = G__37452;
        continue;
      } else {
        var G__37453 = x;
        var G__37454 = level__$1 - 1;
        x = G__37453;
        level__$1 = G__37454;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3406__auto__ = cljs.core.truth_(function() {
    var and__3394__auto__ = me;
    if (cljs.core.truth_(and__3394__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3394__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t34880 !== "undefined") {
  } else {
    cljs.core.async.t34880 = function(f, fn_handler, meta34881) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta34881 = meta34881;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34880.cljs$lang$type = true;
    cljs.core.async.t34880.cljs$lang$ctorStr = "cljs.core.async/t34880";
    cljs.core.async.t34880.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34880");
    };
    cljs.core.async.t34880.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t34880.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t34880.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t34880.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34882) {
      var self__ = this;
      var _34882__$1 = this;
      return self__.meta34881;
    };
    cljs.core.async.t34880.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34882, meta34881__$1) {
      var self__ = this;
      var _34882__$1 = this;
      return new cljs.core.async.t34880(self__.f, self__.fn_handler, meta34881__$1);
    };
    cljs.core.async.__GT_t34880 = function __GT_t34880(f__$1, fn_handler__$1, meta34881) {
      return new cljs.core.async.t34880(f__$1, fn_handler__$1, meta34881);
    };
  }
  return new cljs.core.async.t34880(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__34884 = buff;
  if (G__34884) {
    var bit__4050__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3406__auto__ = bit__4050__auto__;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return G__34884.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__34884.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__34884);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__34884);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_34885 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_34885);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_34885);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = ret;
      if (cljs.core.truth_(and__3394__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3394__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4248__auto___34886 = n;
  var x_34887 = 0;
  while (true) {
    if (x_34887 < n__4248__auto___34886) {
      a[x_34887] = 0;
      var G__34888 = x_34887 + 1;
      x_34887 = G__34888;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__34889 = i + 1;
      i = G__34889;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t34893 !== "undefined") {
  } else {
    cljs.core.async.t34893 = function(flag, alt_flag, meta34894) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta34894 = meta34894;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34893.cljs$lang$type = true;
    cljs.core.async.t34893.cljs$lang$ctorStr = "cljs.core.async/t34893";
    cljs.core.async.t34893.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34893");
    };
    cljs.core.async.t34893.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t34893.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t34893.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t34893.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34895) {
      var self__ = this;
      var _34895__$1 = this;
      return self__.meta34894;
    };
    cljs.core.async.t34893.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34895, meta34894__$1) {
      var self__ = this;
      var _34895__$1 = this;
      return new cljs.core.async.t34893(self__.flag, self__.alt_flag, meta34894__$1);
    };
    cljs.core.async.__GT_t34893 = function __GT_t34893(flag__$1, alt_flag__$1, meta34894) {
      return new cljs.core.async.t34893(flag__$1, alt_flag__$1, meta34894);
    };
  }
  return new cljs.core.async.t34893(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t34899 !== "undefined") {
  } else {
    cljs.core.async.t34899 = function(cb, flag, alt_handler, meta34900) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta34900 = meta34900;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34899.cljs$lang$type = true;
    cljs.core.async.t34899.cljs$lang$ctorStr = "cljs.core.async/t34899";
    cljs.core.async.t34899.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34899");
    };
    cljs.core.async.t34899.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t34899.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t34899.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t34899.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34901) {
      var self__ = this;
      var _34901__$1 = this;
      return self__.meta34900;
    };
    cljs.core.async.t34899.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34901, meta34900__$1) {
      var self__ = this;
      var _34901__$1 = this;
      return new cljs.core.async.t34899(self__.cb, self__.flag, self__.alt_handler, meta34900__$1);
    };
    cljs.core.async.__GT_t34899 = function __GT_t34899(cb__$1, flag__$1, alt_handler__$1, meta34900) {
      return new cljs.core.async.t34899(cb__$1, flag__$1, alt_handler__$1, meta34900);
    };
  }
  return new cljs.core.async.t34899(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__34902_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__34902_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3406__auto__ = wport;
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__34903 = i + 1;
          i = G__34903;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3406__auto__ = ret;
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3394__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3394__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3394__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__34904) {
    var map__34906 = p__34904;
    var map__34906__$1 = cljs.core.seq_QMARK_.call(null, map__34906) ? cljs.core.apply.call(null, cljs.core.hash_map, map__34906) : map__34906;
    var opts = map__34906__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__34904 = null;
    if (arguments.length > 1) {
      p__34904 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__34904);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__34907) {
    var ports = cljs.core.first(arglist__34907);
    var p__34904 = cljs.core.rest(arglist__34907);
    return alts_BANG___delegate(ports, p__34904);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t34915 !== "undefined") {
  } else {
    cljs.core.async.t34915 = function(ch, f, map_LT_, meta34916) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta34916 = meta34916;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34915.cljs$lang$type = true;
    cljs.core.async.t34915.cljs$lang$ctorStr = "cljs.core.async/t34915";
    cljs.core.async.t34915.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34915");
    };
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t34918 !== "undefined") {
        } else {
          cljs.core.async.t34918 = function(fn1, _, meta34916, ch, f, map_LT_, meta34919) {
            this.fn1 = fn1;
            this._ = _;
            this.meta34916 = meta34916;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta34919 = meta34919;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t34918.cljs$lang$type = true;
          cljs.core.async.t34918.cljs$lang$ctorStr = "cljs.core.async/t34918";
          cljs.core.async.t34918.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
            return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34918");
          };
          cljs.core.async.t34918.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t34918.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t34918.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t34918.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__34908_SHARP_) {
                return f1.call(null, p1__34908_SHARP_ == null ? null : self__.f.call(null, p1__34908_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t34918.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34920) {
            var self__ = this;
            var _34920__$1 = this;
            return self__.meta34919;
          };
          cljs.core.async.t34918.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34920, meta34919__$1) {
            var self__ = this;
            var _34920__$1 = this;
            return new cljs.core.async.t34918(self__.fn1, self__._, self__.meta34916, self__.ch, self__.f, self__.map_LT_, meta34919__$1);
          };
          cljs.core.async.__GT_t34918 = function __GT_t34918(fn1__$1, ___$2, meta34916__$1, ch__$2, f__$2, map_LT___$2, meta34919) {
            return new cljs.core.async.t34918(fn1__$1, ___$2, meta34916__$1, ch__$2, f__$2, map_LT___$2, meta34919);
          };
        }
        return new cljs.core.async.t34918(fn1, ___$1, self__.meta34916, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3394__auto__ = ret;
        if (cljs.core.truth_(and__3394__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3394__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t34915.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t34915.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34917) {
      var self__ = this;
      var _34917__$1 = this;
      return self__.meta34916;
    };
    cljs.core.async.t34915.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34917, meta34916__$1) {
      var self__ = this;
      var _34917__$1 = this;
      return new cljs.core.async.t34915(self__.ch, self__.f, self__.map_LT_, meta34916__$1);
    };
    cljs.core.async.__GT_t34915 = function __GT_t34915(ch__$1, f__$1, map_LT___$1, meta34916) {
      return new cljs.core.async.t34915(ch__$1, f__$1, map_LT___$1, meta34916);
    };
  }
  return new cljs.core.async.t34915(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t34924 !== "undefined") {
  } else {
    cljs.core.async.t34924 = function(ch, f, map_GT_, meta34925) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta34925 = meta34925;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34924.cljs$lang$type = true;
    cljs.core.async.t34924.cljs$lang$ctorStr = "cljs.core.async/t34924";
    cljs.core.async.t34924.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34924");
    };
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t34924.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t34924.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34926) {
      var self__ = this;
      var _34926__$1 = this;
      return self__.meta34925;
    };
    cljs.core.async.t34924.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34926, meta34925__$1) {
      var self__ = this;
      var _34926__$1 = this;
      return new cljs.core.async.t34924(self__.ch, self__.f, self__.map_GT_, meta34925__$1);
    };
    cljs.core.async.__GT_t34924 = function __GT_t34924(ch__$1, f__$1, map_GT___$1, meta34925) {
      return new cljs.core.async.t34924(ch__$1, f__$1, map_GT___$1, meta34925);
    };
  }
  return new cljs.core.async.t34924(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t34930 !== "undefined") {
  } else {
    cljs.core.async.t34930 = function(ch, p, filter_GT_, meta34931) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta34931 = meta34931;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t34930.cljs$lang$type = true;
    cljs.core.async.t34930.cljs$lang$ctorStr = "cljs.core.async/t34930";
    cljs.core.async.t34930.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t34930");
    };
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t34930.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t34930.prototype.cljs$core$IMeta$_meta$arity$1 = function(_34932) {
      var self__ = this;
      var _34932__$1 = this;
      return self__.meta34931;
    };
    cljs.core.async.t34930.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_34932, meta34931__$1) {
      var self__ = this;
      var _34932__$1 = this;
      return new cljs.core.async.t34930(self__.ch, self__.p, self__.filter_GT_, meta34931__$1);
    };
    cljs.core.async.__GT_t34930 = function __GT_t34930(ch__$1, p__$1, filter_GT___$1, meta34931) {
      return new cljs.core.async.t34930(ch__$1, p__$1, filter_GT___$1, meta34931);
    };
  }
  return new cljs.core.async.t34930(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___35015 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_34994) {
          var state_val_34995 = state_34994[1];
          if (state_val_34995 === 1) {
            var state_34994__$1 = state_34994;
            var statearr_34996_35016 = state_34994__$1;
            statearr_34996_35016[2] = null;
            statearr_34996_35016[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34995 === 2) {
              var state_34994__$1 = state_34994;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34994__$1, 4, ch);
            } else {
              if (state_val_34995 === 3) {
                var inst_34992 = state_34994[2];
                var state_34994__$1 = state_34994;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34994__$1, inst_34992);
              } else {
                if (state_val_34995 === 4) {
                  var inst_34976 = state_34994[7];
                  var inst_34976__$1 = state_34994[2];
                  var inst_34977 = inst_34976__$1 == null;
                  var state_34994__$1 = function() {
                    var statearr_34997 = state_34994;
                    statearr_34997[7] = inst_34976__$1;
                    return statearr_34997;
                  }();
                  if (cljs.core.truth_(inst_34977)) {
                    var statearr_34998_35017 = state_34994__$1;
                    statearr_34998_35017[1] = 5;
                  } else {
                    var statearr_34999_35018 = state_34994__$1;
                    statearr_34999_35018[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_34995 === 5) {
                    var inst_34979 = cljs.core.async.close_BANG_.call(null, out);
                    var state_34994__$1 = state_34994;
                    var statearr_35000_35019 = state_34994__$1;
                    statearr_35000_35019[2] = inst_34979;
                    statearr_35000_35019[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_34995 === 6) {
                      var inst_34976 = state_34994[7];
                      var inst_34981 = p.call(null, inst_34976);
                      var state_34994__$1 = state_34994;
                      if (cljs.core.truth_(inst_34981)) {
                        var statearr_35001_35020 = state_34994__$1;
                        statearr_35001_35020[1] = 8;
                      } else {
                        var statearr_35002_35021 = state_34994__$1;
                        statearr_35002_35021[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_34995 === 7) {
                        var inst_34990 = state_34994[2];
                        var state_34994__$1 = state_34994;
                        var statearr_35003_35022 = state_34994__$1;
                        statearr_35003_35022[2] = inst_34990;
                        statearr_35003_35022[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34995 === 8) {
                          var inst_34976 = state_34994[7];
                          var state_34994__$1 = state_34994;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34994__$1, 11, out, inst_34976);
                        } else {
                          if (state_val_34995 === 9) {
                            var state_34994__$1 = state_34994;
                            var statearr_35004_35023 = state_34994__$1;
                            statearr_35004_35023[2] = null;
                            statearr_35004_35023[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_34995 === 10) {
                              var inst_34987 = state_34994[2];
                              var state_34994__$1 = function() {
                                var statearr_35005 = state_34994;
                                statearr_35005[8] = inst_34987;
                                return statearr_35005;
                              }();
                              var statearr_35006_35024 = state_34994__$1;
                              statearr_35006_35024[2] = null;
                              statearr_35006_35024[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_34995 === 11) {
                                var inst_34984 = state_34994[2];
                                var state_34994__$1 = state_34994;
                                var statearr_35007_35025 = state_34994__$1;
                                statearr_35007_35025[2] = inst_34984;
                                statearr_35007_35025[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_35011 = [null, null, null, null, null, null, null, null, null];
              statearr_35011[0] = state_machine__5507__auto__;
              statearr_35011[1] = 1;
              return statearr_35011;
            };
            var state_machine__5507__auto____1 = function(state_34994) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_34994);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e35012) {
                    if (e35012 instanceof Object) {
                      var ex__5510__auto__ = e35012;
                      var statearr_35013_35026 = state_34994;
                      statearr_35013_35026[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34994);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35012;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35027 = state_34994;
                  state_34994 = G__35027;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_34994) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_34994);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_35014 = f__5522__auto__.call(null);
        statearr_35014[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___35015;
        return statearr_35014;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_35179) {
        var state_val_35180 = state_35179[1];
        if (state_val_35180 === 1) {
          var state_35179__$1 = state_35179;
          var statearr_35181_35218 = state_35179__$1;
          statearr_35181_35218[2] = null;
          statearr_35181_35218[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_35180 === 2) {
            var state_35179__$1 = state_35179;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35179__$1, 4, in$);
          } else {
            if (state_val_35180 === 3) {
              var inst_35177 = state_35179[2];
              var state_35179__$1 = state_35179;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35179__$1, inst_35177);
            } else {
              if (state_val_35180 === 4) {
                var inst_35125 = state_35179[7];
                var inst_35125__$1 = state_35179[2];
                var inst_35126 = inst_35125__$1 == null;
                var state_35179__$1 = function() {
                  var statearr_35182 = state_35179;
                  statearr_35182[7] = inst_35125__$1;
                  return statearr_35182;
                }();
                if (cljs.core.truth_(inst_35126)) {
                  var statearr_35183_35219 = state_35179__$1;
                  statearr_35183_35219[1] = 5;
                } else {
                  var statearr_35184_35220 = state_35179__$1;
                  statearr_35184_35220[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_35180 === 5) {
                  var inst_35128 = cljs.core.async.close_BANG_.call(null, out);
                  var state_35179__$1 = state_35179;
                  var statearr_35185_35221 = state_35179__$1;
                  statearr_35185_35221[2] = inst_35128;
                  statearr_35185_35221[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35180 === 6) {
                    var inst_35125 = state_35179[7];
                    var inst_35130 = f.call(null, inst_35125);
                    var inst_35135 = cljs.core.seq.call(null, inst_35130);
                    var inst_35136 = inst_35135;
                    var inst_35137 = null;
                    var inst_35138 = 0;
                    var inst_35139 = 0;
                    var state_35179__$1 = function() {
                      var statearr_35186 = state_35179;
                      statearr_35186[8] = inst_35139;
                      statearr_35186[9] = inst_35138;
                      statearr_35186[10] = inst_35137;
                      statearr_35186[11] = inst_35136;
                      return statearr_35186;
                    }();
                    var statearr_35187_35222 = state_35179__$1;
                    statearr_35187_35222[2] = null;
                    statearr_35187_35222[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35180 === 7) {
                      var inst_35175 = state_35179[2];
                      var state_35179__$1 = state_35179;
                      var statearr_35188_35223 = state_35179__$1;
                      statearr_35188_35223[2] = inst_35175;
                      statearr_35188_35223[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35180 === 8) {
                        var inst_35139 = state_35179[8];
                        var inst_35138 = state_35179[9];
                        var inst_35141 = inst_35139 < inst_35138;
                        var inst_35142 = inst_35141;
                        var state_35179__$1 = state_35179;
                        if (cljs.core.truth_(inst_35142)) {
                          var statearr_35189_35224 = state_35179__$1;
                          statearr_35189_35224[1] = 10;
                        } else {
                          var statearr_35190_35225 = state_35179__$1;
                          statearr_35190_35225[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35180 === 9) {
                          var inst_35172 = state_35179[2];
                          var state_35179__$1 = function() {
                            var statearr_35191 = state_35179;
                            statearr_35191[12] = inst_35172;
                            return statearr_35191;
                          }();
                          var statearr_35192_35226 = state_35179__$1;
                          statearr_35192_35226[2] = null;
                          statearr_35192_35226[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35180 === 10) {
                            var inst_35139 = state_35179[8];
                            var inst_35137 = state_35179[10];
                            var inst_35144 = cljs.core._nth.call(null, inst_35137, inst_35139);
                            var state_35179__$1 = state_35179;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35179__$1, 13, out, inst_35144);
                          } else {
                            if (state_val_35180 === 11) {
                              var inst_35136 = state_35179[11];
                              var inst_35150 = state_35179[13];
                              var inst_35150__$1 = cljs.core.seq.call(null, inst_35136);
                              var state_35179__$1 = function() {
                                var statearr_35196 = state_35179;
                                statearr_35196[13] = inst_35150__$1;
                                return statearr_35196;
                              }();
                              if (inst_35150__$1) {
                                var statearr_35197_35227 = state_35179__$1;
                                statearr_35197_35227[1] = 14;
                              } else {
                                var statearr_35198_35228 = state_35179__$1;
                                statearr_35198_35228[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35180 === 12) {
                                var inst_35170 = state_35179[2];
                                var state_35179__$1 = state_35179;
                                var statearr_35199_35229 = state_35179__$1;
                                statearr_35199_35229[2] = inst_35170;
                                statearr_35199_35229[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_35180 === 13) {
                                  var inst_35139 = state_35179[8];
                                  var inst_35138 = state_35179[9];
                                  var inst_35137 = state_35179[10];
                                  var inst_35136 = state_35179[11];
                                  var inst_35146 = state_35179[2];
                                  var inst_35147 = inst_35139 + 1;
                                  var tmp35193 = inst_35138;
                                  var tmp35194 = inst_35137;
                                  var tmp35195 = inst_35136;
                                  var inst_35136__$1 = tmp35195;
                                  var inst_35137__$1 = tmp35194;
                                  var inst_35138__$1 = tmp35193;
                                  var inst_35139__$1 = inst_35147;
                                  var state_35179__$1 = function() {
                                    var statearr_35200 = state_35179;
                                    statearr_35200[8] = inst_35139__$1;
                                    statearr_35200[14] = inst_35146;
                                    statearr_35200[9] = inst_35138__$1;
                                    statearr_35200[10] = inst_35137__$1;
                                    statearr_35200[11] = inst_35136__$1;
                                    return statearr_35200;
                                  }();
                                  var statearr_35201_35230 = state_35179__$1;
                                  statearr_35201_35230[2] = null;
                                  statearr_35201_35230[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_35180 === 14) {
                                    var inst_35150 = state_35179[13];
                                    var inst_35152 = cljs.core.chunked_seq_QMARK_.call(null, inst_35150);
                                    var state_35179__$1 = state_35179;
                                    if (inst_35152) {
                                      var statearr_35202_35231 = state_35179__$1;
                                      statearr_35202_35231[1] = 17;
                                    } else {
                                      var statearr_35203_35232 = state_35179__$1;
                                      statearr_35203_35232[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_35180 === 15) {
                                      var state_35179__$1 = state_35179;
                                      var statearr_35204_35233 = state_35179__$1;
                                      statearr_35204_35233[2] = null;
                                      statearr_35204_35233[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_35180 === 16) {
                                        var inst_35168 = state_35179[2];
                                        var state_35179__$1 = state_35179;
                                        var statearr_35205_35234 = state_35179__$1;
                                        statearr_35205_35234[2] = inst_35168;
                                        statearr_35205_35234[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_35180 === 17) {
                                          var inst_35150 = state_35179[13];
                                          var inst_35154 = cljs.core.chunk_first.call(null, inst_35150);
                                          var inst_35155 = cljs.core.chunk_rest.call(null, inst_35150);
                                          var inst_35156 = cljs.core.count.call(null, inst_35154);
                                          var inst_35136 = inst_35155;
                                          var inst_35137 = inst_35154;
                                          var inst_35138 = inst_35156;
                                          var inst_35139 = 0;
                                          var state_35179__$1 = function() {
                                            var statearr_35206 = state_35179;
                                            statearr_35206[8] = inst_35139;
                                            statearr_35206[9] = inst_35138;
                                            statearr_35206[10] = inst_35137;
                                            statearr_35206[11] = inst_35136;
                                            return statearr_35206;
                                          }();
                                          var statearr_35207_35235 = state_35179__$1;
                                          statearr_35207_35235[2] = null;
                                          statearr_35207_35235[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_35180 === 18) {
                                            var inst_35150 = state_35179[13];
                                            var inst_35159 = cljs.core.first.call(null, inst_35150);
                                            var state_35179__$1 = state_35179;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35179__$1, 20, out, inst_35159);
                                          } else {
                                            if (state_val_35180 === 19) {
                                              var inst_35165 = state_35179[2];
                                              var state_35179__$1 = state_35179;
                                              var statearr_35208_35236 = state_35179__$1;
                                              statearr_35208_35236[2] = inst_35165;
                                              statearr_35208_35236[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_35180 === 20) {
                                                var inst_35150 = state_35179[13];
                                                var inst_35161 = state_35179[2];
                                                var inst_35162 = cljs.core.next.call(null, inst_35150);
                                                var inst_35136 = inst_35162;
                                                var inst_35137 = null;
                                                var inst_35138 = 0;
                                                var inst_35139 = 0;
                                                var state_35179__$1 = function() {
                                                  var statearr_35209 = state_35179;
                                                  statearr_35209[8] = inst_35139;
                                                  statearr_35209[9] = inst_35138;
                                                  statearr_35209[10] = inst_35137;
                                                  statearr_35209[11] = inst_35136;
                                                  statearr_35209[15] = inst_35161;
                                                  return statearr_35209;
                                                }();
                                                var statearr_35210_35237 = state_35179__$1;
                                                statearr_35210_35237[2] = null;
                                                statearr_35210_35237[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_35214 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_35214[0] = state_machine__5507__auto__;
            statearr_35214[1] = 1;
            return statearr_35214;
          };
          var state_machine__5507__auto____1 = function(state_35179) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_35179);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e35215) {
                  if (e35215 instanceof Object) {
                    var ex__5510__auto__ = e35215;
                    var statearr_35216_35238 = state_35179;
                    statearr_35216_35238[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35179);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e35215;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__35239 = state_35179;
                state_35179 = G__35239;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_35179) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_35179);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_35217 = f__5522__auto__.call(null);
      statearr_35217[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_35217;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5521__auto___35320 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_35299) {
          var state_val_35300 = state_35299[1];
          if (state_val_35300 === 1) {
            var state_35299__$1 = state_35299;
            var statearr_35301_35321 = state_35299__$1;
            statearr_35301_35321[2] = null;
            statearr_35301_35321[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35300 === 2) {
              var state_35299__$1 = state_35299;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35299__$1, 4, from);
            } else {
              if (state_val_35300 === 3) {
                var inst_35297 = state_35299[2];
                var state_35299__$1 = state_35299;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35299__$1, inst_35297);
              } else {
                if (state_val_35300 === 4) {
                  var inst_35282 = state_35299[7];
                  var inst_35282__$1 = state_35299[2];
                  var inst_35283 = inst_35282__$1 == null;
                  var state_35299__$1 = function() {
                    var statearr_35302 = state_35299;
                    statearr_35302[7] = inst_35282__$1;
                    return statearr_35302;
                  }();
                  if (cljs.core.truth_(inst_35283)) {
                    var statearr_35303_35322 = state_35299__$1;
                    statearr_35303_35322[1] = 5;
                  } else {
                    var statearr_35304_35323 = state_35299__$1;
                    statearr_35304_35323[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35300 === 5) {
                    var state_35299__$1 = state_35299;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_35305_35324 = state_35299__$1;
                      statearr_35305_35324[1] = 8;
                    } else {
                      var statearr_35306_35325 = state_35299__$1;
                      statearr_35306_35325[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35300 === 6) {
                      var inst_35282 = state_35299[7];
                      var state_35299__$1 = state_35299;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35299__$1, 11, to, inst_35282);
                    } else {
                      if (state_val_35300 === 7) {
                        var inst_35295 = state_35299[2];
                        var state_35299__$1 = state_35299;
                        var statearr_35307_35326 = state_35299__$1;
                        statearr_35307_35326[2] = inst_35295;
                        statearr_35307_35326[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35300 === 8) {
                          var inst_35286 = cljs.core.async.close_BANG_.call(null, to);
                          var state_35299__$1 = state_35299;
                          var statearr_35308_35327 = state_35299__$1;
                          statearr_35308_35327[2] = inst_35286;
                          statearr_35308_35327[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35300 === 9) {
                            var state_35299__$1 = state_35299;
                            var statearr_35309_35328 = state_35299__$1;
                            statearr_35309_35328[2] = null;
                            statearr_35309_35328[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35300 === 10) {
                              var inst_35289 = state_35299[2];
                              var state_35299__$1 = state_35299;
                              var statearr_35310_35329 = state_35299__$1;
                              statearr_35310_35329[2] = inst_35289;
                              statearr_35310_35329[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35300 === 11) {
                                var inst_35292 = state_35299[2];
                                var state_35299__$1 = function() {
                                  var statearr_35311 = state_35299;
                                  statearr_35311[8] = inst_35292;
                                  return statearr_35311;
                                }();
                                var statearr_35312_35330 = state_35299__$1;
                                statearr_35312_35330[2] = null;
                                statearr_35312_35330[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_35316 = [null, null, null, null, null, null, null, null, null];
              statearr_35316[0] = state_machine__5507__auto__;
              statearr_35316[1] = 1;
              return statearr_35316;
            };
            var state_machine__5507__auto____1 = function(state_35299) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_35299);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e35317) {
                    if (e35317 instanceof Object) {
                      var ex__5510__auto__ = e35317;
                      var statearr_35318_35331 = state_35299;
                      statearr_35318_35331[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35299);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35317;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35332 = state_35299;
                  state_35299 = G__35332;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_35299) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_35299);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_35319 = f__5522__auto__.call(null);
        statearr_35319[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___35320;
        return statearr_35319;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5521__auto___35419 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_35397) {
          var state_val_35398 = state_35397[1];
          if (state_val_35398 === 1) {
            var state_35397__$1 = state_35397;
            var statearr_35399_35420 = state_35397__$1;
            statearr_35399_35420[2] = null;
            statearr_35399_35420[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35398 === 2) {
              var state_35397__$1 = state_35397;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35397__$1, 4, ch);
            } else {
              if (state_val_35398 === 3) {
                var inst_35395 = state_35397[2];
                var state_35397__$1 = state_35397;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35397__$1, inst_35395);
              } else {
                if (state_val_35398 === 4) {
                  var inst_35378 = state_35397[7];
                  var inst_35378__$1 = state_35397[2];
                  var inst_35379 = inst_35378__$1 == null;
                  var state_35397__$1 = function() {
                    var statearr_35400 = state_35397;
                    statearr_35400[7] = inst_35378__$1;
                    return statearr_35400;
                  }();
                  if (cljs.core.truth_(inst_35379)) {
                    var statearr_35401_35421 = state_35397__$1;
                    statearr_35401_35421[1] = 5;
                  } else {
                    var statearr_35402_35422 = state_35397__$1;
                    statearr_35402_35422[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35398 === 5) {
                    var inst_35381 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_35382 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_35397__$1 = function() {
                      var statearr_35403 = state_35397;
                      statearr_35403[8] = inst_35381;
                      return statearr_35403;
                    }();
                    var statearr_35404_35423 = state_35397__$1;
                    statearr_35404_35423[2] = inst_35382;
                    statearr_35404_35423[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35398 === 6) {
                      var inst_35378 = state_35397[7];
                      var inst_35384 = p.call(null, inst_35378);
                      var state_35397__$1 = state_35397;
                      if (cljs.core.truth_(inst_35384)) {
                        var statearr_35405_35424 = state_35397__$1;
                        statearr_35405_35424[1] = 9;
                      } else {
                        var statearr_35406_35425 = state_35397__$1;
                        statearr_35406_35425[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35398 === 7) {
                        var inst_35393 = state_35397[2];
                        var state_35397__$1 = state_35397;
                        var statearr_35407_35426 = state_35397__$1;
                        statearr_35407_35426[2] = inst_35393;
                        statearr_35407_35426[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35398 === 8) {
                          var inst_35390 = state_35397[2];
                          var state_35397__$1 = function() {
                            var statearr_35408 = state_35397;
                            statearr_35408[9] = inst_35390;
                            return statearr_35408;
                          }();
                          var statearr_35409_35427 = state_35397__$1;
                          statearr_35409_35427[2] = null;
                          statearr_35409_35427[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35398 === 9) {
                            var state_35397__$1 = state_35397;
                            var statearr_35410_35428 = state_35397__$1;
                            statearr_35410_35428[2] = tc;
                            statearr_35410_35428[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35398 === 10) {
                              var state_35397__$1 = state_35397;
                              var statearr_35411_35429 = state_35397__$1;
                              statearr_35411_35429[2] = fc;
                              statearr_35411_35429[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35398 === 11) {
                                var inst_35378 = state_35397[7];
                                var inst_35388 = state_35397[2];
                                var state_35397__$1 = state_35397;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35397__$1, 8, inst_35388, inst_35378);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_35415 = [null, null, null, null, null, null, null, null, null, null];
              statearr_35415[0] = state_machine__5507__auto__;
              statearr_35415[1] = 1;
              return statearr_35415;
            };
            var state_machine__5507__auto____1 = function(state_35397) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_35397);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e35416) {
                    if (e35416 instanceof Object) {
                      var ex__5510__auto__ = e35416;
                      var statearr_35417_35430 = state_35397;
                      statearr_35417_35430[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35397);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35416;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35431 = state_35397;
                  state_35397 = G__35431;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_35397) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_35397);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_35418 = f__5522__auto__.call(null);
        statearr_35418[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___35419;
        return statearr_35418;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_35478) {
        var state_val_35479 = state_35478[1];
        if (state_val_35479 === 7) {
          var inst_35474 = state_35478[2];
          var state_35478__$1 = state_35478;
          var statearr_35480_35496 = state_35478__$1;
          statearr_35480_35496[2] = inst_35474;
          statearr_35480_35496[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_35479 === 6) {
            var inst_35467 = state_35478[7];
            var inst_35464 = state_35478[8];
            var inst_35471 = f.call(null, inst_35464, inst_35467);
            var inst_35464__$1 = inst_35471;
            var state_35478__$1 = function() {
              var statearr_35481 = state_35478;
              statearr_35481[8] = inst_35464__$1;
              return statearr_35481;
            }();
            var statearr_35482_35497 = state_35478__$1;
            statearr_35482_35497[2] = null;
            statearr_35482_35497[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35479 === 5) {
              var inst_35464 = state_35478[8];
              var state_35478__$1 = state_35478;
              var statearr_35483_35498 = state_35478__$1;
              statearr_35483_35498[2] = inst_35464;
              statearr_35483_35498[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35479 === 4) {
                var inst_35467 = state_35478[7];
                var inst_35467__$1 = state_35478[2];
                var inst_35468 = inst_35467__$1 == null;
                var state_35478__$1 = function() {
                  var statearr_35484 = state_35478;
                  statearr_35484[7] = inst_35467__$1;
                  return statearr_35484;
                }();
                if (cljs.core.truth_(inst_35468)) {
                  var statearr_35485_35499 = state_35478__$1;
                  statearr_35485_35499[1] = 5;
                } else {
                  var statearr_35486_35500 = state_35478__$1;
                  statearr_35486_35500[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_35479 === 3) {
                  var inst_35476 = state_35478[2];
                  var state_35478__$1 = state_35478;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35478__$1, inst_35476);
                } else {
                  if (state_val_35479 === 2) {
                    var state_35478__$1 = state_35478;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35478__$1, 4, ch);
                  } else {
                    if (state_val_35479 === 1) {
                      var inst_35464 = init;
                      var state_35478__$1 = function() {
                        var statearr_35487 = state_35478;
                        statearr_35487[8] = inst_35464;
                        return statearr_35487;
                      }();
                      var statearr_35488_35501 = state_35478__$1;
                      statearr_35488_35501[2] = null;
                      statearr_35488_35501[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_35492 = [null, null, null, null, null, null, null, null, null];
            statearr_35492[0] = state_machine__5507__auto__;
            statearr_35492[1] = 1;
            return statearr_35492;
          };
          var state_machine__5507__auto____1 = function(state_35478) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_35478);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e35493) {
                  if (e35493 instanceof Object) {
                    var ex__5510__auto__ = e35493;
                    var statearr_35494_35502 = state_35478;
                    statearr_35494_35502[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35478);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e35493;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__35503 = state_35478;
                state_35478 = G__35503;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_35478) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_35478);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_35495 = f__5522__auto__.call(null);
      statearr_35495[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_35495;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_35565) {
          var state_val_35566 = state_35565[1];
          if (state_val_35566 === 1) {
            var inst_35545 = cljs.core.seq.call(null, coll);
            var inst_35546 = inst_35545;
            var state_35565__$1 = function() {
              var statearr_35567 = state_35565;
              statearr_35567[7] = inst_35546;
              return statearr_35567;
            }();
            var statearr_35568_35586 = state_35565__$1;
            statearr_35568_35586[2] = null;
            statearr_35568_35586[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35566 === 2) {
              var inst_35546 = state_35565[7];
              var state_35565__$1 = state_35565;
              if (cljs.core.truth_(inst_35546)) {
                var statearr_35569_35587 = state_35565__$1;
                statearr_35569_35587[1] = 4;
              } else {
                var statearr_35570_35588 = state_35565__$1;
                statearr_35570_35588[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35566 === 3) {
                var inst_35563 = state_35565[2];
                var state_35565__$1 = state_35565;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35565__$1, inst_35563);
              } else {
                if (state_val_35566 === 4) {
                  var inst_35546 = state_35565[7];
                  var inst_35549 = cljs.core.first.call(null, inst_35546);
                  var state_35565__$1 = state_35565;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35565__$1, 7, ch, inst_35549);
                } else {
                  if (state_val_35566 === 5) {
                    var state_35565__$1 = state_35565;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_35571_35589 = state_35565__$1;
                      statearr_35571_35589[1] = 8;
                    } else {
                      var statearr_35572_35590 = state_35565__$1;
                      statearr_35572_35590[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35566 === 6) {
                      var inst_35561 = state_35565[2];
                      var state_35565__$1 = state_35565;
                      var statearr_35573_35591 = state_35565__$1;
                      statearr_35573_35591[2] = inst_35561;
                      statearr_35573_35591[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35566 === 7) {
                        var inst_35546 = state_35565[7];
                        var inst_35551 = state_35565[2];
                        var inst_35552 = cljs.core.next.call(null, inst_35546);
                        var inst_35546__$1 = inst_35552;
                        var state_35565__$1 = function() {
                          var statearr_35574 = state_35565;
                          statearr_35574[8] = inst_35551;
                          statearr_35574[7] = inst_35546__$1;
                          return statearr_35574;
                        }();
                        var statearr_35575_35592 = state_35565__$1;
                        statearr_35575_35592[2] = null;
                        statearr_35575_35592[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35566 === 8) {
                          var inst_35556 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_35565__$1 = state_35565;
                          var statearr_35576_35593 = state_35565__$1;
                          statearr_35576_35593[2] = inst_35556;
                          statearr_35576_35593[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35566 === 9) {
                            var state_35565__$1 = state_35565;
                            var statearr_35577_35594 = state_35565__$1;
                            statearr_35577_35594[2] = null;
                            statearr_35577_35594[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35566 === 10) {
                              var inst_35559 = state_35565[2];
                              var state_35565__$1 = state_35565;
                              var statearr_35578_35595 = state_35565__$1;
                              statearr_35578_35595[2] = inst_35559;
                              statearr_35578_35595[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_35582 = [null, null, null, null, null, null, null, null, null];
              statearr_35582[0] = state_machine__5507__auto__;
              statearr_35582[1] = 1;
              return statearr_35582;
            };
            var state_machine__5507__auto____1 = function(state_35565) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_35565);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e35583) {
                    if (e35583 instanceof Object) {
                      var ex__5510__auto__ = e35583;
                      var statearr_35584_35596 = state_35565;
                      statearr_35584_35596[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35565);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35583;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35597 = state_35565;
                  state_35565 = G__35597;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_35565) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_35565);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_35585 = f__5522__auto__.call(null);
        statearr_35585[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
        return statearr_35585;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return c__5521__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj35599 = {};
  return obj35599;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3394__auto__ = _;
    if (and__3394__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4027__auto__ = _ == null ? null : _;
    return function() {
      var or__3406__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj35601 = {};
  return obj35601;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t35825 !== "undefined") {
    } else {
      cljs.core.async.t35825 = function(cs, ch, mult, meta35826) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta35826 = meta35826;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t35825.cljs$lang$type = true;
      cljs.core.async.t35825.cljs$lang$ctorStr = "cljs.core.async/t35825";
      cljs.core.async.t35825.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
          return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t35825");
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t35825.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t35825.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_35827) {
          var self__ = this;
          var _35827__$1 = this;
          return self__.meta35826;
        };
      }(cs);
      cljs.core.async.t35825.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_35827, meta35826__$1) {
          var self__ = this;
          var _35827__$1 = this;
          return new cljs.core.async.t35825(self__.cs, self__.ch, self__.mult, meta35826__$1);
        };
      }(cs);
      cljs.core.async.__GT_t35825 = function(cs) {
        return function __GT_t35825(cs__$1, ch__$1, mult__$1, meta35826) {
          return new cljs.core.async.t35825(cs__$1, ch__$1, mult__$1, meta35826);
        };
      }(cs);
    }
    return new cljs.core.async.t35825(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5521__auto___36048 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_35962) {
        var state_val_35963 = state_35962[1];
        if (state_val_35963 === 32) {
          var inst_35906 = state_35962[7];
          var inst_35830 = state_35962[8];
          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_35962, 31, Object, null, 30);
          var inst_35913 = cljs.core.async.put_BANG_.call(null, inst_35906, inst_35830, done);
          var state_35962__$1 = state_35962;
          var statearr_35964_36049 = state_35962__$1;
          statearr_35964_36049[2] = inst_35913;
          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35962__$1);
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_35963 === 1) {
            var state_35962__$1 = state_35962;
            var statearr_35965_36050 = state_35962__$1;
            statearr_35965_36050[2] = null;
            statearr_35965_36050[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35963 === 33) {
              var inst_35919 = state_35962[9];
              var inst_35921 = cljs.core.chunked_seq_QMARK_.call(null, inst_35919);
              var state_35962__$1 = state_35962;
              if (inst_35921) {
                var statearr_35966_36051 = state_35962__$1;
                statearr_35966_36051[1] = 36;
              } else {
                var statearr_35967_36052 = state_35962__$1;
                statearr_35967_36052[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35963 === 2) {
                var state_35962__$1 = state_35962;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35962__$1, 4, ch);
              } else {
                if (state_val_35963 === 34) {
                  var state_35962__$1 = state_35962;
                  var statearr_35968_36053 = state_35962__$1;
                  statearr_35968_36053[2] = null;
                  statearr_35968_36053[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35963 === 3) {
                    var inst_35960 = state_35962[2];
                    var state_35962__$1 = state_35962;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35962__$1, inst_35960);
                  } else {
                    if (state_val_35963 === 35) {
                      var inst_35944 = state_35962[2];
                      var state_35962__$1 = state_35962;
                      var statearr_35969_36054 = state_35962__$1;
                      statearr_35969_36054[2] = inst_35944;
                      statearr_35969_36054[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35963 === 4) {
                        var inst_35830 = state_35962[8];
                        var inst_35830__$1 = state_35962[2];
                        var inst_35831 = inst_35830__$1 == null;
                        var state_35962__$1 = function() {
                          var statearr_35970 = state_35962;
                          statearr_35970[8] = inst_35830__$1;
                          return statearr_35970;
                        }();
                        if (cljs.core.truth_(inst_35831)) {
                          var statearr_35971_36055 = state_35962__$1;
                          statearr_35971_36055[1] = 5;
                        } else {
                          var statearr_35972_36056 = state_35962__$1;
                          statearr_35972_36056[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35963 === 36) {
                          var inst_35919 = state_35962[9];
                          var inst_35923 = cljs.core.chunk_first.call(null, inst_35919);
                          var inst_35924 = cljs.core.chunk_rest.call(null, inst_35919);
                          var inst_35925 = cljs.core.count.call(null, inst_35923);
                          var inst_35898 = inst_35924;
                          var inst_35899 = inst_35923;
                          var inst_35900 = inst_35925;
                          var inst_35901 = 0;
                          var state_35962__$1 = function() {
                            var statearr_35973 = state_35962;
                            statearr_35973[10] = inst_35898;
                            statearr_35973[11] = inst_35899;
                            statearr_35973[12] = inst_35900;
                            statearr_35973[13] = inst_35901;
                            return statearr_35973;
                          }();
                          var statearr_35974_36057 = state_35962__$1;
                          statearr_35974_36057[2] = null;
                          statearr_35974_36057[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35963 === 5) {
                            var inst_35837 = cljs.core.deref.call(null, cs);
                            var inst_35838 = cljs.core.seq.call(null, inst_35837);
                            var inst_35839 = inst_35838;
                            var inst_35840 = null;
                            var inst_35841 = 0;
                            var inst_35842 = 0;
                            var state_35962__$1 = function() {
                              var statearr_35975 = state_35962;
                              statearr_35975[14] = inst_35839;
                              statearr_35975[15] = inst_35842;
                              statearr_35975[16] = inst_35841;
                              statearr_35975[17] = inst_35840;
                              return statearr_35975;
                            }();
                            var statearr_35976_36058 = state_35962__$1;
                            statearr_35976_36058[2] = null;
                            statearr_35976_36058[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35963 === 37) {
                              var inst_35919 = state_35962[9];
                              var inst_35928 = cljs.core.first.call(null, inst_35919);
                              var state_35962__$1 = function() {
                                var statearr_35977 = state_35962;
                                statearr_35977[18] = inst_35928;
                                return statearr_35977;
                              }();
                              var statearr_35978_36059 = state_35962__$1;
                              statearr_35978_36059[2] = null;
                              statearr_35978_36059[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35963 === 6) {
                                var inst_35890 = state_35962[19];
                                var inst_35889 = cljs.core.deref.call(null, cs);
                                var inst_35890__$1 = cljs.core.keys.call(null, inst_35889);
                                var inst_35891 = cljs.core.count.call(null, inst_35890__$1);
                                var inst_35892 = cljs.core.reset_BANG_.call(null, dctr, inst_35891);
                                var inst_35897 = cljs.core.seq.call(null, inst_35890__$1);
                                var inst_35898 = inst_35897;
                                var inst_35899 = null;
                                var inst_35900 = 0;
                                var inst_35901 = 0;
                                var state_35962__$1 = function() {
                                  var statearr_35979 = state_35962;
                                  statearr_35979[20] = inst_35892;
                                  statearr_35979[19] = inst_35890__$1;
                                  statearr_35979[10] = inst_35898;
                                  statearr_35979[11] = inst_35899;
                                  statearr_35979[12] = inst_35900;
                                  statearr_35979[13] = inst_35901;
                                  return statearr_35979;
                                }();
                                var statearr_35980_36060 = state_35962__$1;
                                statearr_35980_36060[2] = null;
                                statearr_35980_36060[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_35963 === 38) {
                                  var inst_35941 = state_35962[2];
                                  var state_35962__$1 = state_35962;
                                  var statearr_35981_36061 = state_35962__$1;
                                  statearr_35981_36061[2] = inst_35941;
                                  statearr_35981_36061[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_35963 === 7) {
                                    var inst_35958 = state_35962[2];
                                    var state_35962__$1 = state_35962;
                                    var statearr_35982_36062 = state_35962__$1;
                                    statearr_35982_36062[2] = inst_35958;
                                    statearr_35982_36062[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_35963 === 39) {
                                      var inst_35919 = state_35962[9];
                                      var inst_35937 = state_35962[2];
                                      var inst_35938 = cljs.core.next.call(null, inst_35919);
                                      var inst_35898 = inst_35938;
                                      var inst_35899 = null;
                                      var inst_35900 = 0;
                                      var inst_35901 = 0;
                                      var state_35962__$1 = function() {
                                        var statearr_35983 = state_35962;
                                        statearr_35983[10] = inst_35898;
                                        statearr_35983[11] = inst_35899;
                                        statearr_35983[21] = inst_35937;
                                        statearr_35983[12] = inst_35900;
                                        statearr_35983[13] = inst_35901;
                                        return statearr_35983;
                                      }();
                                      var statearr_35984_36063 = state_35962__$1;
                                      statearr_35984_36063[2] = null;
                                      statearr_35984_36063[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_35963 === 8) {
                                        var inst_35842 = state_35962[15];
                                        var inst_35841 = state_35962[16];
                                        var inst_35844 = inst_35842 < inst_35841;
                                        var inst_35845 = inst_35844;
                                        var state_35962__$1 = state_35962;
                                        if (cljs.core.truth_(inst_35845)) {
                                          var statearr_35985_36064 = state_35962__$1;
                                          statearr_35985_36064[1] = 10;
                                        } else {
                                          var statearr_35986_36065 = state_35962__$1;
                                          statearr_35986_36065[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_35963 === 40) {
                                          var inst_35928 = state_35962[18];
                                          var inst_35929 = state_35962[2];
                                          var inst_35930 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_35931 = cljs.core.async.untap_STAR_.call(null, m, inst_35928);
                                          var state_35962__$1 = function() {
                                            var statearr_35987 = state_35962;
                                            statearr_35987[22] = inst_35930;
                                            statearr_35987[23] = inst_35929;
                                            return statearr_35987;
                                          }();
                                          var statearr_35988_36066 = state_35962__$1;
                                          statearr_35988_36066[2] = inst_35931;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35962__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_35963 === 9) {
                                            var inst_35887 = state_35962[2];
                                            var state_35962__$1 = state_35962;
                                            var statearr_35989_36067 = state_35962__$1;
                                            statearr_35989_36067[2] = inst_35887;
                                            statearr_35989_36067[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_35963 === 41) {
                                              var inst_35928 = state_35962[18];
                                              var inst_35830 = state_35962[8];
                                              var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_35962, 40, Object, null, 39);
                                              var inst_35935 = cljs.core.async.put_BANG_.call(null, inst_35928, inst_35830, done);
                                              var state_35962__$1 = state_35962;
                                              var statearr_35990_36068 = state_35962__$1;
                                              statearr_35990_36068[2] = inst_35935;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35962__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_35963 === 10) {
                                                var inst_35842 = state_35962[15];
                                                var inst_35840 = state_35962[17];
                                                var inst_35848 = cljs.core._nth.call(null, inst_35840, inst_35842);
                                                var inst_35849 = cljs.core.nth.call(null, inst_35848, 0, null);
                                                var inst_35850 = cljs.core.nth.call(null, inst_35848, 1, null);
                                                var state_35962__$1 = function() {
                                                  var statearr_35991 = state_35962;
                                                  statearr_35991[24] = inst_35849;
                                                  return statearr_35991;
                                                }();
                                                if (cljs.core.truth_(inst_35850)) {
                                                  var statearr_35992_36069 = state_35962__$1;
                                                  statearr_35992_36069[1] = 13;
                                                } else {
                                                  var statearr_35993_36070 = state_35962__$1;
                                                  statearr_35993_36070[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_35963 === 42) {
                                                  var state_35962__$1 = state_35962;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35962__$1, 45, dchan);
                                                } else {
                                                  if (state_val_35963 === 11) {
                                                    var inst_35839 = state_35962[14];
                                                    var inst_35859 = state_35962[25];
                                                    var inst_35859__$1 = cljs.core.seq.call(null, inst_35839);
                                                    var state_35962__$1 = function() {
                                                      var statearr_35994 = state_35962;
                                                      statearr_35994[25] = inst_35859__$1;
                                                      return statearr_35994;
                                                    }();
                                                    if (inst_35859__$1) {
                                                      var statearr_35995_36071 = state_35962__$1;
                                                      statearr_35995_36071[1] = 16;
                                                    } else {
                                                      var statearr_35996_36072 = state_35962__$1;
                                                      statearr_35996_36072[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_35963 === 43) {
                                                      var state_35962__$1 = state_35962;
                                                      var statearr_35997_36073 = state_35962__$1;
                                                      statearr_35997_36073[2] = null;
                                                      statearr_35997_36073[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_35963 === 12) {
                                                        var inst_35885 = state_35962[2];
                                                        var state_35962__$1 = state_35962;
                                                        var statearr_35998_36074 = state_35962__$1;
                                                        statearr_35998_36074[2] = inst_35885;
                                                        statearr_35998_36074[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_35963 === 44) {
                                                          var inst_35955 = state_35962[2];
                                                          var state_35962__$1 = function() {
                                                            var statearr_35999 = state_35962;
                                                            statearr_35999[26] = inst_35955;
                                                            return statearr_35999;
                                                          }();
                                                          var statearr_36000_36075 = state_35962__$1;
                                                          statearr_36000_36075[2] = null;
                                                          statearr_36000_36075[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_35963 === 13) {
                                                            var inst_35849 = state_35962[24];
                                                            var inst_35852 = cljs.core.async.close_BANG_.call(null, inst_35849);
                                                            var state_35962__$1 = state_35962;
                                                            var statearr_36001_36076 = state_35962__$1;
                                                            statearr_36001_36076[2] = inst_35852;
                                                            statearr_36001_36076[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_35963 === 45) {
                                                              var inst_35952 = state_35962[2];
                                                              var state_35962__$1 = state_35962;
                                                              var statearr_36005_36077 = state_35962__$1;
                                                              statearr_36005_36077[2] = inst_35952;
                                                              statearr_36005_36077[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_35963 === 14) {
                                                                var state_35962__$1 = state_35962;
                                                                var statearr_36006_36078 = state_35962__$1;
                                                                statearr_36006_36078[2] = null;
                                                                statearr_36006_36078[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_35963 === 15) {
                                                                  var inst_35839 = state_35962[14];
                                                                  var inst_35842 = state_35962[15];
                                                                  var inst_35841 = state_35962[16];
                                                                  var inst_35840 = state_35962[17];
                                                                  var inst_35855 = state_35962[2];
                                                                  var inst_35856 = inst_35842 + 1;
                                                                  var tmp36002 = inst_35839;
                                                                  var tmp36003 = inst_35841;
                                                                  var tmp36004 = inst_35840;
                                                                  var inst_35839__$1 = tmp36002;
                                                                  var inst_35840__$1 = tmp36004;
                                                                  var inst_35841__$1 = tmp36003;
                                                                  var inst_35842__$1 = inst_35856;
                                                                  var state_35962__$1 = function() {
                                                                    var statearr_36007 = state_35962;
                                                                    statearr_36007[27] = inst_35855;
                                                                    statearr_36007[14] = inst_35839__$1;
                                                                    statearr_36007[15] = inst_35842__$1;
                                                                    statearr_36007[16] = inst_35841__$1;
                                                                    statearr_36007[17] = inst_35840__$1;
                                                                    return statearr_36007;
                                                                  }();
                                                                  var statearr_36008_36079 = state_35962__$1;
                                                                  statearr_36008_36079[2] = null;
                                                                  statearr_36008_36079[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_35963 === 16) {
                                                                    var inst_35859 = state_35962[25];
                                                                    var inst_35861 = cljs.core.chunked_seq_QMARK_.call(null, inst_35859);
                                                                    var state_35962__$1 = state_35962;
                                                                    if (inst_35861) {
                                                                      var statearr_36009_36080 = state_35962__$1;
                                                                      statearr_36009_36080[1] = 19;
                                                                    } else {
                                                                      var statearr_36010_36081 = state_35962__$1;
                                                                      statearr_36010_36081[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_35963 === 17) {
                                                                      var state_35962__$1 = state_35962;
                                                                      var statearr_36011_36082 = state_35962__$1;
                                                                      statearr_36011_36082[2] = null;
                                                                      statearr_36011_36082[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_35963 === 18) {
                                                                        var inst_35883 = state_35962[2];
                                                                        var state_35962__$1 = state_35962;
                                                                        var statearr_36012_36083 = state_35962__$1;
                                                                        statearr_36012_36083[2] = inst_35883;
                                                                        statearr_36012_36083[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_35963 === 19) {
                                                                          var inst_35859 = state_35962[25];
                                                                          var inst_35863 = cljs.core.chunk_first.call(null, inst_35859);
                                                                          var inst_35864 = cljs.core.chunk_rest.call(null, inst_35859);
                                                                          var inst_35865 = cljs.core.count.call(null, inst_35863);
                                                                          var inst_35839 = inst_35864;
                                                                          var inst_35840 = inst_35863;
                                                                          var inst_35841 = inst_35865;
                                                                          var inst_35842 = 0;
                                                                          var state_35962__$1 = function() {
                                                                            var statearr_36013 = state_35962;
                                                                            statearr_36013[14] = inst_35839;
                                                                            statearr_36013[15] = inst_35842;
                                                                            statearr_36013[16] = inst_35841;
                                                                            statearr_36013[17] = inst_35840;
                                                                            return statearr_36013;
                                                                          }();
                                                                          var statearr_36014_36084 = state_35962__$1;
                                                                          statearr_36014_36084[2] = null;
                                                                          statearr_36014_36084[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_35963 === 20) {
                                                                            var inst_35859 = state_35962[25];
                                                                            var inst_35869 = cljs.core.first.call(null, inst_35859);
                                                                            var inst_35870 = cljs.core.nth.call(null, inst_35869, 0, null);
                                                                            var inst_35871 = cljs.core.nth.call(null, inst_35869, 1, null);
                                                                            var state_35962__$1 = function() {
                                                                              var statearr_36015 = state_35962;
                                                                              statearr_36015[28] = inst_35870;
                                                                              return statearr_36015;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_35871)) {
                                                                              var statearr_36016_36085 = state_35962__$1;
                                                                              statearr_36016_36085[1] = 22;
                                                                            } else {
                                                                              var statearr_36017_36086 = state_35962__$1;
                                                                              statearr_36017_36086[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_35963 === 21) {
                                                                              var inst_35880 = state_35962[2];
                                                                              var state_35962__$1 = state_35962;
                                                                              var statearr_36018_36087 = state_35962__$1;
                                                                              statearr_36018_36087[2] = inst_35880;
                                                                              statearr_36018_36087[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_35963 === 22) {
                                                                                var inst_35870 = state_35962[28];
                                                                                var inst_35873 = cljs.core.async.close_BANG_.call(null, inst_35870);
                                                                                var state_35962__$1 = state_35962;
                                                                                var statearr_36019_36088 = state_35962__$1;
                                                                                statearr_36019_36088[2] = inst_35873;
                                                                                statearr_36019_36088[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_35963 === 23) {
                                                                                  var state_35962__$1 = state_35962;
                                                                                  var statearr_36020_36089 = state_35962__$1;
                                                                                  statearr_36020_36089[2] = null;
                                                                                  statearr_36020_36089[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_35963 === 24) {
                                                                                    var inst_35859 = state_35962[25];
                                                                                    var inst_35876 = state_35962[2];
                                                                                    var inst_35877 = cljs.core.next.call(null, inst_35859);
                                                                                    var inst_35839 = inst_35877;
                                                                                    var inst_35840 = null;
                                                                                    var inst_35841 = 0;
                                                                                    var inst_35842 = 0;
                                                                                    var state_35962__$1 = function() {
                                                                                      var statearr_36021 = state_35962;
                                                                                      statearr_36021[14] = inst_35839;
                                                                                      statearr_36021[15] = inst_35842;
                                                                                      statearr_36021[29] = inst_35876;
                                                                                      statearr_36021[16] = inst_35841;
                                                                                      statearr_36021[17] = inst_35840;
                                                                                      return statearr_36021;
                                                                                    }();
                                                                                    var statearr_36022_36090 = state_35962__$1;
                                                                                    statearr_36022_36090[2] = null;
                                                                                    statearr_36022_36090[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_35963 === 25) {
                                                                                      var inst_35900 = state_35962[12];
                                                                                      var inst_35901 = state_35962[13];
                                                                                      var inst_35903 = inst_35901 < inst_35900;
                                                                                      var inst_35904 = inst_35903;
                                                                                      var state_35962__$1 = state_35962;
                                                                                      if (cljs.core.truth_(inst_35904)) {
                                                                                        var statearr_36023_36091 = state_35962__$1;
                                                                                        statearr_36023_36091[1] = 27;
                                                                                      } else {
                                                                                        var statearr_36024_36092 = state_35962__$1;
                                                                                        statearr_36024_36092[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_35963 === 26) {
                                                                                        var inst_35890 = state_35962[19];
                                                                                        var inst_35948 = state_35962[2];
                                                                                        var inst_35949 = cljs.core.seq.call(null, inst_35890);
                                                                                        var state_35962__$1 = function() {
                                                                                          var statearr_36025 = state_35962;
                                                                                          statearr_36025[30] = inst_35948;
                                                                                          return statearr_36025;
                                                                                        }();
                                                                                        if (inst_35949) {
                                                                                          var statearr_36026_36093 = state_35962__$1;
                                                                                          statearr_36026_36093[1] = 42;
                                                                                        } else {
                                                                                          var statearr_36027_36094 = state_35962__$1;
                                                                                          statearr_36027_36094[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_35963 === 27) {
                                                                                          var inst_35899 = state_35962[11];
                                                                                          var inst_35901 = state_35962[13];
                                                                                          var inst_35906 = cljs.core._nth.call(null, inst_35899, inst_35901);
                                                                                          var state_35962__$1 = function() {
                                                                                            var statearr_36028 = state_35962;
                                                                                            statearr_36028[7] = inst_35906;
                                                                                            return statearr_36028;
                                                                                          }();
                                                                                          var statearr_36029_36095 = state_35962__$1;
                                                                                          statearr_36029_36095[2] = null;
                                                                                          statearr_36029_36095[1] = 32;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_35963 === 28) {
                                                                                            var inst_35898 = state_35962[10];
                                                                                            var inst_35919 = state_35962[9];
                                                                                            var inst_35919__$1 = cljs.core.seq.call(null, inst_35898);
                                                                                            var state_35962__$1 = function() {
                                                                                              var statearr_36033 = state_35962;
                                                                                              statearr_36033[9] = inst_35919__$1;
                                                                                              return statearr_36033;
                                                                                            }();
                                                                                            if (inst_35919__$1) {
                                                                                              var statearr_36034_36096 = state_35962__$1;
                                                                                              statearr_36034_36096[1] = 33;
                                                                                            } else {
                                                                                              var statearr_36035_36097 = state_35962__$1;
                                                                                              statearr_36035_36097[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_35963 === 29) {
                                                                                              var inst_35946 = state_35962[2];
                                                                                              var state_35962__$1 = state_35962;
                                                                                              var statearr_36036_36098 = state_35962__$1;
                                                                                              statearr_36036_36098[2] = inst_35946;
                                                                                              statearr_36036_36098[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_35963 === 30) {
                                                                                                var inst_35898 = state_35962[10];
                                                                                                var inst_35899 = state_35962[11];
                                                                                                var inst_35900 = state_35962[12];
                                                                                                var inst_35901 = state_35962[13];
                                                                                                var inst_35915 = state_35962[2];
                                                                                                var inst_35916 = inst_35901 + 1;
                                                                                                var tmp36030 = inst_35898;
                                                                                                var tmp36031 = inst_35899;
                                                                                                var tmp36032 = inst_35900;
                                                                                                var inst_35898__$1 = tmp36030;
                                                                                                var inst_35899__$1 = tmp36031;
                                                                                                var inst_35900__$1 = tmp36032;
                                                                                                var inst_35901__$1 = inst_35916;
                                                                                                var state_35962__$1 = function() {
                                                                                                  var statearr_36037 = state_35962;
                                                                                                  statearr_36037[10] = inst_35898__$1;
                                                                                                  statearr_36037[11] = inst_35899__$1;
                                                                                                  statearr_36037[31] = inst_35915;
                                                                                                  statearr_36037[12] = inst_35900__$1;
                                                                                                  statearr_36037[13] = inst_35901__$1;
                                                                                                  return statearr_36037;
                                                                                                }();
                                                                                                var statearr_36038_36099 = state_35962__$1;
                                                                                                statearr_36038_36099[2] = null;
                                                                                                statearr_36038_36099[1] = 25;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_35963 === 31) {
                                                                                                  var inst_35906 = state_35962[7];
                                                                                                  var inst_35907 = state_35962[2];
                                                                                                  var inst_35908 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                  var inst_35909 = cljs.core.async.untap_STAR_.call(null, m, inst_35906);
                                                                                                  var state_35962__$1 = function() {
                                                                                                    var statearr_36039 = state_35962;
                                                                                                    statearr_36039[32] = inst_35908;
                                                                                                    statearr_36039[33] = inst_35907;
                                                                                                    return statearr_36039;
                                                                                                  }();
                                                                                                  var statearr_36040_36100 = state_35962__$1;
                                                                                                  statearr_36040_36100[2] = inst_35909;
                                                                                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35962__$1);
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_36044 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_36044[0] = state_machine__5507__auto__;
            statearr_36044[1] = 1;
            return statearr_36044;
          };
          var state_machine__5507__auto____1 = function(state_35962) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_35962);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e36045) {
                  if (e36045 instanceof Object) {
                    var ex__5510__auto__ = e36045;
                    var statearr_36046_36101 = state_35962;
                    statearr_36046_36101[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35962);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e36045;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__36102 = state_35962;
                state_35962 = G__36102;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_35962) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_35962);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_36047 = f__5522__auto__.call(null);
      statearr_36047[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36048;
      return statearr_36047;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj36104 = {};
  return obj36104;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3394__auto__ = m;
    if (and__3394__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4027__auto__ = m == null ? null : m;
    return function() {
      var or__3406__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t36214 !== "undefined") {
    } else {
      cljs.core.async.t36214 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta36215) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta36215 = meta36215;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t36214.cljs$lang$type = true;
      cljs.core.async.t36214.cljs$lang$ctorStr = "cljs.core.async/t36214";
      cljs.core.async.t36214.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
          return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t36214");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t36214.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_36216) {
          var self__ = this;
          var _36216__$1 = this;
          return self__.meta36215;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t36214.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_36216, meta36215__$1) {
          var self__ = this;
          var _36216__$1 = this;
          return new cljs.core.async.t36214(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta36215__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t36214 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t36214(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta36215) {
          return new cljs.core.async.t36214(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta36215);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t36214(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5521__auto___36323 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_36281) {
        var state_val_36282 = state_36281[1];
        if (state_val_36282 === 1) {
          var inst_36220 = state_36281[7];
          var inst_36220__$1 = calc_state.call(null);
          var inst_36221 = cljs.core.seq_QMARK_.call(null, inst_36220__$1);
          var state_36281__$1 = function() {
            var statearr_36283 = state_36281;
            statearr_36283[7] = inst_36220__$1;
            return statearr_36283;
          }();
          if (inst_36221) {
            var statearr_36284_36324 = state_36281__$1;
            statearr_36284_36324[1] = 2;
          } else {
            var statearr_36285_36325 = state_36281__$1;
            statearr_36285_36325[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_36282 === 2) {
            var inst_36220 = state_36281[7];
            var inst_36223 = cljs.core.apply.call(null, cljs.core.hash_map, inst_36220);
            var state_36281__$1 = state_36281;
            var statearr_36286_36326 = state_36281__$1;
            statearr_36286_36326[2] = inst_36223;
            statearr_36286_36326[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36282 === 3) {
              var inst_36220 = state_36281[7];
              var state_36281__$1 = state_36281;
              var statearr_36287_36327 = state_36281__$1;
              statearr_36287_36327[2] = inst_36220;
              statearr_36287_36327[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_36282 === 4) {
                var inst_36220 = state_36281[7];
                var inst_36226 = state_36281[2];
                var inst_36227 = cljs.core.get.call(null, inst_36226, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_36228 = cljs.core.get.call(null, inst_36226, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_36229 = cljs.core.get.call(null, inst_36226, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_36230 = inst_36220;
                var state_36281__$1 = function() {
                  var statearr_36288 = state_36281;
                  statearr_36288[8] = inst_36228;
                  statearr_36288[9] = inst_36229;
                  statearr_36288[10] = inst_36227;
                  statearr_36288[11] = inst_36230;
                  return statearr_36288;
                }();
                var statearr_36289_36328 = state_36281__$1;
                statearr_36289_36328[2] = null;
                statearr_36289_36328[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_36282 === 5) {
                  var inst_36230 = state_36281[11];
                  var inst_36233 = cljs.core.seq_QMARK_.call(null, inst_36230);
                  var state_36281__$1 = state_36281;
                  if (inst_36233) {
                    var statearr_36290_36329 = state_36281__$1;
                    statearr_36290_36329[1] = 7;
                  } else {
                    var statearr_36291_36330 = state_36281__$1;
                    statearr_36291_36330[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_36282 === 6) {
                    var inst_36279 = state_36281[2];
                    var state_36281__$1 = state_36281;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36281__$1, inst_36279);
                  } else {
                    if (state_val_36282 === 7) {
                      var inst_36230 = state_36281[11];
                      var inst_36235 = cljs.core.apply.call(null, cljs.core.hash_map, inst_36230);
                      var state_36281__$1 = state_36281;
                      var statearr_36292_36331 = state_36281__$1;
                      statearr_36292_36331[2] = inst_36235;
                      statearr_36292_36331[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36282 === 8) {
                        var inst_36230 = state_36281[11];
                        var state_36281__$1 = state_36281;
                        var statearr_36293_36332 = state_36281__$1;
                        statearr_36293_36332[2] = inst_36230;
                        statearr_36293_36332[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36282 === 9) {
                          var inst_36238 = state_36281[12];
                          var inst_36238__$1 = state_36281[2];
                          var inst_36239 = cljs.core.get.call(null, inst_36238__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_36240 = cljs.core.get.call(null, inst_36238__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_36241 = cljs.core.get.call(null, inst_36238__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_36281__$1 = function() {
                            var statearr_36294 = state_36281;
                            statearr_36294[12] = inst_36238__$1;
                            statearr_36294[13] = inst_36241;
                            statearr_36294[14] = inst_36240;
                            return statearr_36294;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_36281__$1, 10, inst_36239);
                        } else {
                          if (state_val_36282 === 10) {
                            var inst_36245 = state_36281[15];
                            var inst_36246 = state_36281[16];
                            var inst_36244 = state_36281[2];
                            var inst_36245__$1 = cljs.core.nth.call(null, inst_36244, 0, null);
                            var inst_36246__$1 = cljs.core.nth.call(null, inst_36244, 1, null);
                            var inst_36247 = inst_36245__$1 == null;
                            var inst_36248 = cljs.core._EQ_.call(null, inst_36246__$1, change);
                            var inst_36249 = inst_36247 || inst_36248;
                            var state_36281__$1 = function() {
                              var statearr_36295 = state_36281;
                              statearr_36295[15] = inst_36245__$1;
                              statearr_36295[16] = inst_36246__$1;
                              return statearr_36295;
                            }();
                            if (cljs.core.truth_(inst_36249)) {
                              var statearr_36296_36333 = state_36281__$1;
                              statearr_36296_36333[1] = 11;
                            } else {
                              var statearr_36297_36334 = state_36281__$1;
                              statearr_36297_36334[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_36282 === 11) {
                              var inst_36245 = state_36281[15];
                              var inst_36251 = inst_36245 == null;
                              var state_36281__$1 = state_36281;
                              if (cljs.core.truth_(inst_36251)) {
                                var statearr_36298_36335 = state_36281__$1;
                                statearr_36298_36335[1] = 14;
                              } else {
                                var statearr_36299_36336 = state_36281__$1;
                                statearr_36299_36336[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36282 === 12) {
                                var inst_36260 = state_36281[17];
                                var inst_36241 = state_36281[13];
                                var inst_36246 = state_36281[16];
                                var inst_36260__$1 = inst_36241.call(null, inst_36246);
                                var state_36281__$1 = function() {
                                  var statearr_36300 = state_36281;
                                  statearr_36300[17] = inst_36260__$1;
                                  return statearr_36300;
                                }();
                                if (cljs.core.truth_(inst_36260__$1)) {
                                  var statearr_36301_36337 = state_36281__$1;
                                  statearr_36301_36337[1] = 17;
                                } else {
                                  var statearr_36302_36338 = state_36281__$1;
                                  statearr_36302_36338[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_36282 === 13) {
                                  var inst_36277 = state_36281[2];
                                  var state_36281__$1 = state_36281;
                                  var statearr_36303_36339 = state_36281__$1;
                                  statearr_36303_36339[2] = inst_36277;
                                  statearr_36303_36339[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_36282 === 14) {
                                    var inst_36246 = state_36281[16];
                                    var inst_36253 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_36246);
                                    var state_36281__$1 = state_36281;
                                    var statearr_36304_36340 = state_36281__$1;
                                    statearr_36304_36340[2] = inst_36253;
                                    statearr_36304_36340[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_36282 === 15) {
                                      var state_36281__$1 = state_36281;
                                      var statearr_36305_36341 = state_36281__$1;
                                      statearr_36305_36341[2] = null;
                                      statearr_36305_36341[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_36282 === 16) {
                                        var inst_36256 = state_36281[2];
                                        var inst_36257 = calc_state.call(null);
                                        var inst_36230 = inst_36257;
                                        var state_36281__$1 = function() {
                                          var statearr_36306 = state_36281;
                                          statearr_36306[11] = inst_36230;
                                          statearr_36306[18] = inst_36256;
                                          return statearr_36306;
                                        }();
                                        var statearr_36307_36342 = state_36281__$1;
                                        statearr_36307_36342[2] = null;
                                        statearr_36307_36342[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_36282 === 17) {
                                          var inst_36260 = state_36281[17];
                                          var state_36281__$1 = state_36281;
                                          var statearr_36308_36343 = state_36281__$1;
                                          statearr_36308_36343[2] = inst_36260;
                                          statearr_36308_36343[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_36282 === 18) {
                                            var inst_36241 = state_36281[13];
                                            var inst_36240 = state_36281[14];
                                            var inst_36246 = state_36281[16];
                                            var inst_36263 = cljs.core.empty_QMARK_.call(null, inst_36241);
                                            var inst_36264 = inst_36240.call(null, inst_36246);
                                            var inst_36265 = cljs.core.not.call(null, inst_36264);
                                            var inst_36266 = inst_36263 && inst_36265;
                                            var state_36281__$1 = state_36281;
                                            var statearr_36309_36344 = state_36281__$1;
                                            statearr_36309_36344[2] = inst_36266;
                                            statearr_36309_36344[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_36282 === 19) {
                                              var inst_36268 = state_36281[2];
                                              var state_36281__$1 = state_36281;
                                              if (cljs.core.truth_(inst_36268)) {
                                                var statearr_36310_36345 = state_36281__$1;
                                                statearr_36310_36345[1] = 20;
                                              } else {
                                                var statearr_36311_36346 = state_36281__$1;
                                                statearr_36311_36346[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_36282 === 20) {
                                                var inst_36245 = state_36281[15];
                                                var state_36281__$1 = state_36281;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36281__$1, 23, out, inst_36245);
                                              } else {
                                                if (state_val_36282 === 21) {
                                                  var state_36281__$1 = state_36281;
                                                  var statearr_36312_36347 = state_36281__$1;
                                                  statearr_36312_36347[2] = null;
                                                  statearr_36312_36347[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_36282 === 22) {
                                                    var inst_36238 = state_36281[12];
                                                    var inst_36274 = state_36281[2];
                                                    var inst_36230 = inst_36238;
                                                    var state_36281__$1 = function() {
                                                      var statearr_36313 = state_36281;
                                                      statearr_36313[11] = inst_36230;
                                                      statearr_36313[19] = inst_36274;
                                                      return statearr_36313;
                                                    }();
                                                    var statearr_36314_36348 = state_36281__$1;
                                                    statearr_36314_36348[2] = null;
                                                    statearr_36314_36348[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_36282 === 23) {
                                                      var inst_36271 = state_36281[2];
                                                      var state_36281__$1 = state_36281;
                                                      var statearr_36315_36349 = state_36281__$1;
                                                      statearr_36315_36349[2] = inst_36271;
                                                      statearr_36315_36349[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_36319 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_36319[0] = state_machine__5507__auto__;
            statearr_36319[1] = 1;
            return statearr_36319;
          };
          var state_machine__5507__auto____1 = function(state_36281) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_36281);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e36320) {
                  if (e36320 instanceof Object) {
                    var ex__5510__auto__ = e36320;
                    var statearr_36321_36350 = state_36281;
                    statearr_36321_36350[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36281);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e36320;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__36351 = state_36281;
                state_36281 = G__36351;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_36281) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_36281);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_36322 = f__5522__auto__.call(null);
      statearr_36322[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36323;
      return statearr_36322;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj36353 = {};
  return obj36353;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3394__auto__ = p;
    if (and__3394__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4027__auto__ = p == null ? null : p;
    return function() {
      var or__3406__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3394__auto__ = p;
    if (and__3394__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4027__auto__ = p == null ? null : p;
    return function() {
      var or__3406__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3394__auto__ = p;
      if (and__3394__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4027__auto__ = p == null ? null : p;
      return function() {
        var or__3406__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3394__auto__ = p;
      if (and__3394__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4027__auto__ = p == null ? null : p;
      return function() {
        var or__3406__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3406__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3406__auto__, mults) {
            return function(p1__36354_SHARP_) {
              if (cljs.core.truth_(p1__36354_SHARP_.call(null, topic))) {
                return p1__36354_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__36354_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3406__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t36479 !== "undefined") {
      } else {
        cljs.core.async.t36479 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta36480) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta36480 = meta36480;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t36479.cljs$lang$type = true;
        cljs.core.async.t36479.cljs$lang$ctorStr = "cljs.core.async/t36479";
        cljs.core.async.t36479.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
            return cljs.core._write.call(null, writer__3969__auto__, "cljs.core.async/t36479");
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t36479.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t36479.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_36481) {
            var self__ = this;
            var _36481__$1 = this;
            return self__.meta36480;
          };
        }(mults, ensure_mult);
        cljs.core.async.t36479.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_36481, meta36480__$1) {
            var self__ = this;
            var _36481__$1 = this;
            return new cljs.core.async.t36479(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta36480__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t36479 = function(mults, ensure_mult) {
          return function __GT_t36479(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta36480) {
            return new cljs.core.async.t36479(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta36480);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t36479(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5521__auto___36603 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_36555) {
          var state_val_36556 = state_36555[1];
          if (state_val_36556 === 1) {
            var state_36555__$1 = state_36555;
            var statearr_36557_36604 = state_36555__$1;
            statearr_36557_36604[2] = null;
            statearr_36557_36604[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36556 === 2) {
              var state_36555__$1 = state_36555;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_36555__$1, 4, ch);
            } else {
              if (state_val_36556 === 3) {
                var inst_36553 = state_36555[2];
                var state_36555__$1 = state_36555;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36555__$1, inst_36553);
              } else {
                if (state_val_36556 === 4) {
                  var inst_36484 = state_36555[7];
                  var inst_36484__$1 = state_36555[2];
                  var inst_36485 = inst_36484__$1 == null;
                  var state_36555__$1 = function() {
                    var statearr_36558 = state_36555;
                    statearr_36558[7] = inst_36484__$1;
                    return statearr_36558;
                  }();
                  if (cljs.core.truth_(inst_36485)) {
                    var statearr_36559_36605 = state_36555__$1;
                    statearr_36559_36605[1] = 5;
                  } else {
                    var statearr_36560_36606 = state_36555__$1;
                    statearr_36560_36606[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_36556 === 5) {
                    var inst_36491 = cljs.core.deref.call(null, mults);
                    var inst_36492 = cljs.core.vals.call(null, inst_36491);
                    var inst_36493 = cljs.core.seq.call(null, inst_36492);
                    var inst_36494 = inst_36493;
                    var inst_36495 = null;
                    var inst_36496 = 0;
                    var inst_36497 = 0;
                    var state_36555__$1 = function() {
                      var statearr_36561 = state_36555;
                      statearr_36561[8] = inst_36497;
                      statearr_36561[9] = inst_36495;
                      statearr_36561[10] = inst_36496;
                      statearr_36561[11] = inst_36494;
                      return statearr_36561;
                    }();
                    var statearr_36562_36607 = state_36555__$1;
                    statearr_36562_36607[2] = null;
                    statearr_36562_36607[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_36556 === 6) {
                      var inst_36484 = state_36555[7];
                      var inst_36534 = state_36555[12];
                      var inst_36532 = state_36555[13];
                      var inst_36532__$1 = topic_fn.call(null, inst_36484);
                      var inst_36533 = cljs.core.deref.call(null, mults);
                      var inst_36534__$1 = cljs.core.get.call(null, inst_36533, inst_36532__$1);
                      var state_36555__$1 = function() {
                        var statearr_36563 = state_36555;
                        statearr_36563[12] = inst_36534__$1;
                        statearr_36563[13] = inst_36532__$1;
                        return statearr_36563;
                      }();
                      if (cljs.core.truth_(inst_36534__$1)) {
                        var statearr_36564_36608 = state_36555__$1;
                        statearr_36564_36608[1] = 19;
                      } else {
                        var statearr_36565_36609 = state_36555__$1;
                        statearr_36565_36609[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36556 === 7) {
                        var inst_36551 = state_36555[2];
                        var state_36555__$1 = state_36555;
                        var statearr_36566_36610 = state_36555__$1;
                        statearr_36566_36610[2] = inst_36551;
                        statearr_36566_36610[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36556 === 8) {
                          var inst_36497 = state_36555[8];
                          var inst_36496 = state_36555[10];
                          var inst_36499 = inst_36497 < inst_36496;
                          var inst_36500 = inst_36499;
                          var state_36555__$1 = state_36555;
                          if (cljs.core.truth_(inst_36500)) {
                            var statearr_36570_36611 = state_36555__$1;
                            statearr_36570_36611[1] = 10;
                          } else {
                            var statearr_36571_36612 = state_36555__$1;
                            statearr_36571_36612[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_36556 === 9) {
                            var inst_36530 = state_36555[2];
                            var state_36555__$1 = state_36555;
                            var statearr_36572_36613 = state_36555__$1;
                            statearr_36572_36613[2] = inst_36530;
                            statearr_36572_36613[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_36556 === 10) {
                              var inst_36497 = state_36555[8];
                              var inst_36495 = state_36555[9];
                              var inst_36496 = state_36555[10];
                              var inst_36494 = state_36555[11];
                              var inst_36502 = cljs.core._nth.call(null, inst_36495, inst_36497);
                              var inst_36503 = cljs.core.async.muxch_STAR_.call(null, inst_36502);
                              var inst_36504 = cljs.core.async.close_BANG_.call(null, inst_36503);
                              var inst_36505 = inst_36497 + 1;
                              var tmp36567 = inst_36495;
                              var tmp36568 = inst_36496;
                              var tmp36569 = inst_36494;
                              var inst_36494__$1 = tmp36569;
                              var inst_36495__$1 = tmp36567;
                              var inst_36496__$1 = tmp36568;
                              var inst_36497__$1 = inst_36505;
                              var state_36555__$1 = function() {
                                var statearr_36573 = state_36555;
                                statearr_36573[14] = inst_36504;
                                statearr_36573[8] = inst_36497__$1;
                                statearr_36573[9] = inst_36495__$1;
                                statearr_36573[10] = inst_36496__$1;
                                statearr_36573[11] = inst_36494__$1;
                                return statearr_36573;
                              }();
                              var statearr_36574_36614 = state_36555__$1;
                              statearr_36574_36614[2] = null;
                              statearr_36574_36614[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36556 === 11) {
                                var inst_36508 = state_36555[15];
                                var inst_36494 = state_36555[11];
                                var inst_36508__$1 = cljs.core.seq.call(null, inst_36494);
                                var state_36555__$1 = function() {
                                  var statearr_36575 = state_36555;
                                  statearr_36575[15] = inst_36508__$1;
                                  return statearr_36575;
                                }();
                                if (inst_36508__$1) {
                                  var statearr_36576_36615 = state_36555__$1;
                                  statearr_36576_36615[1] = 13;
                                } else {
                                  var statearr_36577_36616 = state_36555__$1;
                                  statearr_36577_36616[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_36556 === 12) {
                                  var inst_36528 = state_36555[2];
                                  var state_36555__$1 = state_36555;
                                  var statearr_36578_36617 = state_36555__$1;
                                  statearr_36578_36617[2] = inst_36528;
                                  statearr_36578_36617[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_36556 === 13) {
                                    var inst_36508 = state_36555[15];
                                    var inst_36510 = cljs.core.chunked_seq_QMARK_.call(null, inst_36508);
                                    var state_36555__$1 = state_36555;
                                    if (inst_36510) {
                                      var statearr_36579_36618 = state_36555__$1;
                                      statearr_36579_36618[1] = 16;
                                    } else {
                                      var statearr_36580_36619 = state_36555__$1;
                                      statearr_36580_36619[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_36556 === 14) {
                                      var state_36555__$1 = state_36555;
                                      var statearr_36581_36620 = state_36555__$1;
                                      statearr_36581_36620[2] = null;
                                      statearr_36581_36620[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_36556 === 15) {
                                        var inst_36526 = state_36555[2];
                                        var state_36555__$1 = state_36555;
                                        var statearr_36582_36621 = state_36555__$1;
                                        statearr_36582_36621[2] = inst_36526;
                                        statearr_36582_36621[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_36556 === 16) {
                                          var inst_36508 = state_36555[15];
                                          var inst_36512 = cljs.core.chunk_first.call(null, inst_36508);
                                          var inst_36513 = cljs.core.chunk_rest.call(null, inst_36508);
                                          var inst_36514 = cljs.core.count.call(null, inst_36512);
                                          var inst_36494 = inst_36513;
                                          var inst_36495 = inst_36512;
                                          var inst_36496 = inst_36514;
                                          var inst_36497 = 0;
                                          var state_36555__$1 = function() {
                                            var statearr_36583 = state_36555;
                                            statearr_36583[8] = inst_36497;
                                            statearr_36583[9] = inst_36495;
                                            statearr_36583[10] = inst_36496;
                                            statearr_36583[11] = inst_36494;
                                            return statearr_36583;
                                          }();
                                          var statearr_36584_36622 = state_36555__$1;
                                          statearr_36584_36622[2] = null;
                                          statearr_36584_36622[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_36556 === 17) {
                                            var inst_36508 = state_36555[15];
                                            var inst_36517 = cljs.core.first.call(null, inst_36508);
                                            var inst_36518 = cljs.core.async.muxch_STAR_.call(null, inst_36517);
                                            var inst_36519 = cljs.core.async.close_BANG_.call(null, inst_36518);
                                            var inst_36520 = cljs.core.next.call(null, inst_36508);
                                            var inst_36494 = inst_36520;
                                            var inst_36495 = null;
                                            var inst_36496 = 0;
                                            var inst_36497 = 0;
                                            var state_36555__$1 = function() {
                                              var statearr_36585 = state_36555;
                                              statearr_36585[16] = inst_36519;
                                              statearr_36585[8] = inst_36497;
                                              statearr_36585[9] = inst_36495;
                                              statearr_36585[10] = inst_36496;
                                              statearr_36585[11] = inst_36494;
                                              return statearr_36585;
                                            }();
                                            var statearr_36586_36623 = state_36555__$1;
                                            statearr_36586_36623[2] = null;
                                            statearr_36586_36623[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_36556 === 18) {
                                              var inst_36523 = state_36555[2];
                                              var state_36555__$1 = state_36555;
                                              var statearr_36587_36624 = state_36555__$1;
                                              statearr_36587_36624[2] = inst_36523;
                                              statearr_36587_36624[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_36556 === 19) {
                                                var state_36555__$1 = state_36555;
                                                var statearr_36588_36625 = state_36555__$1;
                                                statearr_36588_36625[2] = null;
                                                statearr_36588_36625[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_36556 === 20) {
                                                  var state_36555__$1 = state_36555;
                                                  var statearr_36589_36626 = state_36555__$1;
                                                  statearr_36589_36626[2] = null;
                                                  statearr_36589_36626[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_36556 === 21) {
                                                    var inst_36548 = state_36555[2];
                                                    var state_36555__$1 = function() {
                                                      var statearr_36590 = state_36555;
                                                      statearr_36590[17] = inst_36548;
                                                      return statearr_36590;
                                                    }();
                                                    var statearr_36591_36627 = state_36555__$1;
                                                    statearr_36591_36627[2] = null;
                                                    statearr_36591_36627[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_36556 === 22) {
                                                      var inst_36545 = state_36555[2];
                                                      var state_36555__$1 = state_36555;
                                                      var statearr_36592_36628 = state_36555__$1;
                                                      statearr_36592_36628[2] = inst_36545;
                                                      statearr_36592_36628[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_36556 === 23) {
                                                        var inst_36532 = state_36555[13];
                                                        var inst_36536 = state_36555[2];
                                                        var inst_36537 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_36532);
                                                        var state_36555__$1 = function() {
                                                          var statearr_36593 = state_36555;
                                                          statearr_36593[18] = inst_36536;
                                                          return statearr_36593;
                                                        }();
                                                        var statearr_36594_36629 = state_36555__$1;
                                                        statearr_36594_36629[2] = inst_36537;
                                                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36555__$1);
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_36556 === 24) {
                                                          var inst_36484 = state_36555[7];
                                                          var inst_36534 = state_36555[12];
                                                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_36555, 23, Object, null, 22);
                                                          var inst_36541 = cljs.core.async.muxch_STAR_.call(null, inst_36534);
                                                          var state_36555__$1 = state_36555;
                                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36555__$1, 25, inst_36541, inst_36484);
                                                        } else {
                                                          if (state_val_36556 === 25) {
                                                            var inst_36543 = state_36555[2];
                                                            var state_36555__$1 = state_36555;
                                                            var statearr_36595_36630 = state_36555__$1;
                                                            statearr_36595_36630[2] = inst_36543;
                                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36555__$1);
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_36599 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_36599[0] = state_machine__5507__auto__;
              statearr_36599[1] = 1;
              return statearr_36599;
            };
            var state_machine__5507__auto____1 = function(state_36555) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_36555);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e36600) {
                    if (e36600 instanceof Object) {
                      var ex__5510__auto__ = e36600;
                      var statearr_36601_36631 = state_36555;
                      statearr_36601_36631[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36555);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36600;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__36632 = state_36555;
                  state_36555 = G__36632;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_36555) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_36555);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_36602 = f__5522__auto__.call(null);
        statearr_36602[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36603;
        return statearr_36602;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5521__auto___36769 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_36739) {
          var state_val_36740 = state_36739[1];
          if (state_val_36740 === 1) {
            var state_36739__$1 = state_36739;
            var statearr_36741_36770 = state_36739__$1;
            statearr_36741_36770[2] = null;
            statearr_36741_36770[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36740 === 2) {
              var inst_36702 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_36703 = 0;
              var state_36739__$1 = function() {
                var statearr_36742 = state_36739;
                statearr_36742[7] = inst_36702;
                statearr_36742[8] = inst_36703;
                return statearr_36742;
              }();
              var statearr_36743_36771 = state_36739__$1;
              statearr_36743_36771[2] = null;
              statearr_36743_36771[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_36740 === 3) {
                var inst_36737 = state_36739[2];
                var state_36739__$1 = state_36739;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36739__$1, inst_36737);
              } else {
                if (state_val_36740 === 4) {
                  var inst_36703 = state_36739[8];
                  var inst_36705 = inst_36703 < cnt;
                  var state_36739__$1 = state_36739;
                  if (cljs.core.truth_(inst_36705)) {
                    var statearr_36744_36772 = state_36739__$1;
                    statearr_36744_36772[1] = 6;
                  } else {
                    var statearr_36745_36773 = state_36739__$1;
                    statearr_36745_36773[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_36740 === 5) {
                    var inst_36723 = state_36739[2];
                    var state_36739__$1 = function() {
                      var statearr_36746 = state_36739;
                      statearr_36746[9] = inst_36723;
                      return statearr_36746;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_36739__$1, 12, dchan);
                  } else {
                    if (state_val_36740 === 6) {
                      var state_36739__$1 = state_36739;
                      var statearr_36747_36774 = state_36739__$1;
                      statearr_36747_36774[2] = null;
                      statearr_36747_36774[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36740 === 7) {
                        var state_36739__$1 = state_36739;
                        var statearr_36748_36775 = state_36739__$1;
                        statearr_36748_36775[2] = null;
                        statearr_36748_36775[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36740 === 8) {
                          var inst_36721 = state_36739[2];
                          var state_36739__$1 = state_36739;
                          var statearr_36749_36776 = state_36739__$1;
                          statearr_36749_36776[2] = inst_36721;
                          statearr_36749_36776[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_36740 === 9) {
                            var inst_36703 = state_36739[8];
                            var inst_36716 = state_36739[2];
                            var inst_36717 = inst_36703 + 1;
                            var inst_36703__$1 = inst_36717;
                            var state_36739__$1 = function() {
                              var statearr_36750 = state_36739;
                              statearr_36750[10] = inst_36716;
                              statearr_36750[8] = inst_36703__$1;
                              return statearr_36750;
                            }();
                            var statearr_36751_36777 = state_36739__$1;
                            statearr_36751_36777[2] = null;
                            statearr_36751_36777[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_36740 === 10) {
                              var inst_36707 = state_36739[2];
                              var inst_36708 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_36739__$1 = function() {
                                var statearr_36752 = state_36739;
                                statearr_36752[11] = inst_36707;
                                return statearr_36752;
                              }();
                              var statearr_36753_36778 = state_36739__$1;
                              statearr_36753_36778[2] = inst_36708;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36739__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36740 === 11) {
                                var inst_36703 = state_36739[8];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_36739, 10, Object, null, 9);
                                var inst_36712 = chs__$1.call(null, inst_36703);
                                var inst_36713 = done.call(null, inst_36703);
                                var inst_36714 = cljs.core.async.take_BANG_.call(null, inst_36712, inst_36713);
                                var state_36739__$1 = state_36739;
                                var statearr_36754_36779 = state_36739__$1;
                                statearr_36754_36779[2] = inst_36714;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36739__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_36740 === 12) {
                                  var inst_36725 = state_36739[12];
                                  var inst_36725__$1 = state_36739[2];
                                  var inst_36726 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_36725__$1);
                                  var state_36739__$1 = function() {
                                    var statearr_36755 = state_36739;
                                    statearr_36755[12] = inst_36725__$1;
                                    return statearr_36755;
                                  }();
                                  if (cljs.core.truth_(inst_36726)) {
                                    var statearr_36756_36780 = state_36739__$1;
                                    statearr_36756_36780[1] = 13;
                                  } else {
                                    var statearr_36757_36781 = state_36739__$1;
                                    statearr_36757_36781[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_36740 === 13) {
                                    var inst_36728 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_36739__$1 = state_36739;
                                    var statearr_36758_36782 = state_36739__$1;
                                    statearr_36758_36782[2] = inst_36728;
                                    statearr_36758_36782[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_36740 === 14) {
                                      var inst_36725 = state_36739[12];
                                      var inst_36730 = cljs.core.apply.call(null, f, inst_36725);
                                      var state_36739__$1 = state_36739;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36739__$1, 16, out, inst_36730);
                                    } else {
                                      if (state_val_36740 === 15) {
                                        var inst_36735 = state_36739[2];
                                        var state_36739__$1 = state_36739;
                                        var statearr_36759_36783 = state_36739__$1;
                                        statearr_36759_36783[2] = inst_36735;
                                        statearr_36759_36783[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_36740 === 16) {
                                          var inst_36732 = state_36739[2];
                                          var state_36739__$1 = function() {
                                            var statearr_36760 = state_36739;
                                            statearr_36760[13] = inst_36732;
                                            return statearr_36760;
                                          }();
                                          var statearr_36761_36784 = state_36739__$1;
                                          statearr_36761_36784[2] = null;
                                          statearr_36761_36784[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_36765 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_36765[0] = state_machine__5507__auto__;
              statearr_36765[1] = 1;
              return statearr_36765;
            };
            var state_machine__5507__auto____1 = function(state_36739) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_36739);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e36766) {
                    if (e36766 instanceof Object) {
                      var ex__5510__auto__ = e36766;
                      var statearr_36767_36785 = state_36739;
                      statearr_36767_36785[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36739);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36766;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__36786 = state_36739;
                  state_36739 = G__36786;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_36739) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_36739);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_36768 = f__5522__auto__.call(null);
        statearr_36768[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36769;
        return statearr_36768;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___36894 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_36870) {
          var state_val_36871 = state_36870[1];
          if (state_val_36871 === 1) {
            var inst_36841 = cljs.core.vec.call(null, chs);
            var inst_36842 = inst_36841;
            var state_36870__$1 = function() {
              var statearr_36872 = state_36870;
              statearr_36872[7] = inst_36842;
              return statearr_36872;
            }();
            var statearr_36873_36895 = state_36870__$1;
            statearr_36873_36895[2] = null;
            statearr_36873_36895[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36871 === 2) {
              var inst_36842 = state_36870[7];
              var inst_36844 = cljs.core.count.call(null, inst_36842);
              var inst_36845 = inst_36844 > 0;
              var state_36870__$1 = state_36870;
              if (cljs.core.truth_(inst_36845)) {
                var statearr_36874_36896 = state_36870__$1;
                statearr_36874_36896[1] = 4;
              } else {
                var statearr_36875_36897 = state_36870__$1;
                statearr_36875_36897[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_36871 === 3) {
                var inst_36868 = state_36870[2];
                var state_36870__$1 = state_36870;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36870__$1, inst_36868);
              } else {
                if (state_val_36871 === 4) {
                  var inst_36842 = state_36870[7];
                  var state_36870__$1 = state_36870;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_36870__$1, 7, inst_36842);
                } else {
                  if (state_val_36871 === 5) {
                    var inst_36864 = cljs.core.async.close_BANG_.call(null, out);
                    var state_36870__$1 = state_36870;
                    var statearr_36876_36898 = state_36870__$1;
                    statearr_36876_36898[2] = inst_36864;
                    statearr_36876_36898[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_36871 === 6) {
                      var inst_36866 = state_36870[2];
                      var state_36870__$1 = state_36870;
                      var statearr_36877_36899 = state_36870__$1;
                      statearr_36877_36899[2] = inst_36866;
                      statearr_36877_36899[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36871 === 7) {
                        var inst_36849 = state_36870[8];
                        var inst_36850 = state_36870[9];
                        var inst_36849__$1 = state_36870[2];
                        var inst_36850__$1 = cljs.core.nth.call(null, inst_36849__$1, 0, null);
                        var inst_36851 = cljs.core.nth.call(null, inst_36849__$1, 1, null);
                        var inst_36852 = inst_36850__$1 == null;
                        var state_36870__$1 = function() {
                          var statearr_36878 = state_36870;
                          statearr_36878[8] = inst_36849__$1;
                          statearr_36878[10] = inst_36851;
                          statearr_36878[9] = inst_36850__$1;
                          return statearr_36878;
                        }();
                        if (cljs.core.truth_(inst_36852)) {
                          var statearr_36879_36900 = state_36870__$1;
                          statearr_36879_36900[1] = 8;
                        } else {
                          var statearr_36880_36901 = state_36870__$1;
                          statearr_36880_36901[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36871 === 8) {
                          var inst_36849 = state_36870[8];
                          var inst_36851 = state_36870[10];
                          var inst_36850 = state_36870[9];
                          var inst_36842 = state_36870[7];
                          var inst_36854 = function() {
                            var c = inst_36851;
                            var v = inst_36850;
                            var vec__36847 = inst_36849;
                            var cs = inst_36842;
                            return function(c, v, vec__36847, cs, inst_36849, inst_36851, inst_36850, inst_36842, state_val_36871) {
                              return function(p1__36787_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__36787_SHARP_);
                              };
                            }(c, v, vec__36847, cs, inst_36849, inst_36851, inst_36850, inst_36842, state_val_36871);
                          }();
                          var inst_36855 = cljs.core.filterv.call(null, inst_36854, inst_36842);
                          var inst_36842__$1 = inst_36855;
                          var state_36870__$1 = function() {
                            var statearr_36881 = state_36870;
                            statearr_36881[7] = inst_36842__$1;
                            return statearr_36881;
                          }();
                          var statearr_36882_36902 = state_36870__$1;
                          statearr_36882_36902[2] = null;
                          statearr_36882_36902[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_36871 === 9) {
                            var inst_36850 = state_36870[9];
                            var state_36870__$1 = state_36870;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36870__$1, 11, out, inst_36850);
                          } else {
                            if (state_val_36871 === 10) {
                              var inst_36862 = state_36870[2];
                              var state_36870__$1 = state_36870;
                              var statearr_36884_36903 = state_36870__$1;
                              statearr_36884_36903[2] = inst_36862;
                              statearr_36884_36903[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36871 === 11) {
                                var inst_36842 = state_36870[7];
                                var inst_36859 = state_36870[2];
                                var tmp36883 = inst_36842;
                                var inst_36842__$1 = tmp36883;
                                var state_36870__$1 = function() {
                                  var statearr_36885 = state_36870;
                                  statearr_36885[11] = inst_36859;
                                  statearr_36885[7] = inst_36842__$1;
                                  return statearr_36885;
                                }();
                                var statearr_36886_36904 = state_36870__$1;
                                statearr_36886_36904[2] = null;
                                statearr_36886_36904[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_36890 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_36890[0] = state_machine__5507__auto__;
              statearr_36890[1] = 1;
              return statearr_36890;
            };
            var state_machine__5507__auto____1 = function(state_36870) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_36870);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e36891) {
                    if (e36891 instanceof Object) {
                      var ex__5510__auto__ = e36891;
                      var statearr_36892_36905 = state_36870;
                      statearr_36892_36905[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36870);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36891;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__36906 = state_36870;
                  state_36870 = G__36906;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_36870) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_36870);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_36893 = f__5522__auto__.call(null);
        statearr_36893[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36894;
        return statearr_36893;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___36999 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_36976) {
          var state_val_36977 = state_36976[1];
          if (state_val_36977 === 1) {
            var inst_36953 = 0;
            var state_36976__$1 = function() {
              var statearr_36978 = state_36976;
              statearr_36978[7] = inst_36953;
              return statearr_36978;
            }();
            var statearr_36979_37000 = state_36976__$1;
            statearr_36979_37000[2] = null;
            statearr_36979_37000[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36977 === 2) {
              var inst_36953 = state_36976[7];
              var inst_36955 = inst_36953 < n;
              var state_36976__$1 = state_36976;
              if (cljs.core.truth_(inst_36955)) {
                var statearr_36980_37001 = state_36976__$1;
                statearr_36980_37001[1] = 4;
              } else {
                var statearr_36981_37002 = state_36976__$1;
                statearr_36981_37002[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_36977 === 3) {
                var inst_36973 = state_36976[2];
                var inst_36974 = cljs.core.async.close_BANG_.call(null, out);
                var state_36976__$1 = function() {
                  var statearr_36982 = state_36976;
                  statearr_36982[8] = inst_36973;
                  return statearr_36982;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36976__$1, inst_36974);
              } else {
                if (state_val_36977 === 4) {
                  var state_36976__$1 = state_36976;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_36976__$1, 7, ch);
                } else {
                  if (state_val_36977 === 5) {
                    var state_36976__$1 = state_36976;
                    var statearr_36983_37003 = state_36976__$1;
                    statearr_36983_37003[2] = null;
                    statearr_36983_37003[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_36977 === 6) {
                      var inst_36971 = state_36976[2];
                      var state_36976__$1 = state_36976;
                      var statearr_36984_37004 = state_36976__$1;
                      statearr_36984_37004[2] = inst_36971;
                      statearr_36984_37004[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36977 === 7) {
                        var inst_36958 = state_36976[9];
                        var inst_36958__$1 = state_36976[2];
                        var inst_36959 = inst_36958__$1 == null;
                        var inst_36960 = cljs.core.not.call(null, inst_36959);
                        var state_36976__$1 = function() {
                          var statearr_36985 = state_36976;
                          statearr_36985[9] = inst_36958__$1;
                          return statearr_36985;
                        }();
                        if (inst_36960) {
                          var statearr_36986_37005 = state_36976__$1;
                          statearr_36986_37005[1] = 8;
                        } else {
                          var statearr_36987_37006 = state_36976__$1;
                          statearr_36987_37006[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36977 === 8) {
                          var inst_36958 = state_36976[9];
                          var state_36976__$1 = state_36976;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36976__$1, 11, out, inst_36958);
                        } else {
                          if (state_val_36977 === 9) {
                            var state_36976__$1 = state_36976;
                            var statearr_36988_37007 = state_36976__$1;
                            statearr_36988_37007[2] = null;
                            statearr_36988_37007[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_36977 === 10) {
                              var inst_36968 = state_36976[2];
                              var state_36976__$1 = state_36976;
                              var statearr_36989_37008 = state_36976__$1;
                              statearr_36989_37008[2] = inst_36968;
                              statearr_36989_37008[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36977 === 11) {
                                var inst_36953 = state_36976[7];
                                var inst_36963 = state_36976[2];
                                var inst_36964 = inst_36953 + 1;
                                var inst_36953__$1 = inst_36964;
                                var state_36976__$1 = function() {
                                  var statearr_36990 = state_36976;
                                  statearr_36990[7] = inst_36953__$1;
                                  statearr_36990[10] = inst_36963;
                                  return statearr_36990;
                                }();
                                var statearr_36991_37009 = state_36976__$1;
                                statearr_36991_37009[2] = null;
                                statearr_36991_37009[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_36995 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_36995[0] = state_machine__5507__auto__;
              statearr_36995[1] = 1;
              return statearr_36995;
            };
            var state_machine__5507__auto____1 = function(state_36976) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_36976);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e36996) {
                    if (e36996 instanceof Object) {
                      var ex__5510__auto__ = e36996;
                      var statearr_36997_37010 = state_36976;
                      statearr_36997_37010[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36976);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36996;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__37011 = state_36976;
                  state_36976 = G__37011;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_36976) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_36976);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_36998 = f__5522__auto__.call(null);
        statearr_36998[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___36999;
        return statearr_36998;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___37108 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_37083) {
          var state_val_37084 = state_37083[1];
          if (state_val_37084 === 1) {
            var inst_37060 = null;
            var state_37083__$1 = function() {
              var statearr_37085 = state_37083;
              statearr_37085[7] = inst_37060;
              return statearr_37085;
            }();
            var statearr_37086_37109 = state_37083__$1;
            statearr_37086_37109[2] = null;
            statearr_37086_37109[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_37084 === 2) {
              var state_37083__$1 = state_37083;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_37083__$1, 4, ch);
            } else {
              if (state_val_37084 === 3) {
                var inst_37080 = state_37083[2];
                var inst_37081 = cljs.core.async.close_BANG_.call(null, out);
                var state_37083__$1 = function() {
                  var statearr_37087 = state_37083;
                  statearr_37087[8] = inst_37080;
                  return statearr_37087;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_37083__$1, inst_37081);
              } else {
                if (state_val_37084 === 4) {
                  var inst_37063 = state_37083[9];
                  var inst_37063__$1 = state_37083[2];
                  var inst_37064 = inst_37063__$1 == null;
                  var inst_37065 = cljs.core.not.call(null, inst_37064);
                  var state_37083__$1 = function() {
                    var statearr_37088 = state_37083;
                    statearr_37088[9] = inst_37063__$1;
                    return statearr_37088;
                  }();
                  if (inst_37065) {
                    var statearr_37089_37110 = state_37083__$1;
                    statearr_37089_37110[1] = 5;
                  } else {
                    var statearr_37090_37111 = state_37083__$1;
                    statearr_37090_37111[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_37084 === 5) {
                    var inst_37060 = state_37083[7];
                    var inst_37063 = state_37083[9];
                    var inst_37067 = cljs.core._EQ_.call(null, inst_37063, inst_37060);
                    var state_37083__$1 = state_37083;
                    if (inst_37067) {
                      var statearr_37091_37112 = state_37083__$1;
                      statearr_37091_37112[1] = 8;
                    } else {
                      var statearr_37092_37113 = state_37083__$1;
                      statearr_37092_37113[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_37084 === 6) {
                      var state_37083__$1 = state_37083;
                      var statearr_37094_37114 = state_37083__$1;
                      statearr_37094_37114[2] = null;
                      statearr_37094_37114[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_37084 === 7) {
                        var inst_37078 = state_37083[2];
                        var state_37083__$1 = state_37083;
                        var statearr_37095_37115 = state_37083__$1;
                        statearr_37095_37115[2] = inst_37078;
                        statearr_37095_37115[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_37084 === 8) {
                          var inst_37060 = state_37083[7];
                          var tmp37093 = inst_37060;
                          var inst_37060__$1 = tmp37093;
                          var state_37083__$1 = function() {
                            var statearr_37096 = state_37083;
                            statearr_37096[7] = inst_37060__$1;
                            return statearr_37096;
                          }();
                          var statearr_37097_37116 = state_37083__$1;
                          statearr_37097_37116[2] = null;
                          statearr_37097_37116[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_37084 === 9) {
                            var inst_37063 = state_37083[9];
                            var state_37083__$1 = state_37083;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_37083__$1, 11, out, inst_37063);
                          } else {
                            if (state_val_37084 === 10) {
                              var inst_37075 = state_37083[2];
                              var state_37083__$1 = state_37083;
                              var statearr_37098_37117 = state_37083__$1;
                              statearr_37098_37117[2] = inst_37075;
                              statearr_37098_37117[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_37084 === 11) {
                                var inst_37063 = state_37083[9];
                                var inst_37072 = state_37083[2];
                                var inst_37060 = inst_37063;
                                var state_37083__$1 = function() {
                                  var statearr_37099 = state_37083;
                                  statearr_37099[7] = inst_37060;
                                  statearr_37099[10] = inst_37072;
                                  return statearr_37099;
                                }();
                                var statearr_37100_37118 = state_37083__$1;
                                statearr_37100_37118[2] = null;
                                statearr_37100_37118[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_37104 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_37104[0] = state_machine__5507__auto__;
              statearr_37104[1] = 1;
              return statearr_37104;
            };
            var state_machine__5507__auto____1 = function(state_37083) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_37083);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e37105) {
                    if (e37105 instanceof Object) {
                      var ex__5510__auto__ = e37105;
                      var statearr_37106_37119 = state_37083;
                      statearr_37106_37119[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_37083);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e37105;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__37120 = state_37083;
                  state_37083 = G__37120;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_37083) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_37083);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_37107 = f__5522__auto__.call(null);
        statearr_37107[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___37108;
        return statearr_37107;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___37255 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_37225) {
          var state_val_37226 = state_37225[1];
          if (state_val_37226 === 1) {
            var inst_37188 = new Array(n);
            var inst_37189 = inst_37188;
            var inst_37190 = 0;
            var state_37225__$1 = function() {
              var statearr_37227 = state_37225;
              statearr_37227[7] = inst_37190;
              statearr_37227[8] = inst_37189;
              return statearr_37227;
            }();
            var statearr_37228_37256 = state_37225__$1;
            statearr_37228_37256[2] = null;
            statearr_37228_37256[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_37226 === 2) {
              var state_37225__$1 = state_37225;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_37225__$1, 4, ch);
            } else {
              if (state_val_37226 === 3) {
                var inst_37223 = state_37225[2];
                var state_37225__$1 = state_37225;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_37225__$1, inst_37223);
              } else {
                if (state_val_37226 === 4) {
                  var inst_37193 = state_37225[9];
                  var inst_37193__$1 = state_37225[2];
                  var inst_37194 = inst_37193__$1 == null;
                  var inst_37195 = cljs.core.not.call(null, inst_37194);
                  var state_37225__$1 = function() {
                    var statearr_37229 = state_37225;
                    statearr_37229[9] = inst_37193__$1;
                    return statearr_37229;
                  }();
                  if (inst_37195) {
                    var statearr_37230_37257 = state_37225__$1;
                    statearr_37230_37257[1] = 5;
                  } else {
                    var statearr_37231_37258 = state_37225__$1;
                    statearr_37231_37258[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_37226 === 5) {
                    var inst_37198 = state_37225[10];
                    var inst_37190 = state_37225[7];
                    var inst_37193 = state_37225[9];
                    var inst_37189 = state_37225[8];
                    var inst_37197 = inst_37189[inst_37190] = inst_37193;
                    var inst_37198__$1 = inst_37190 + 1;
                    var inst_37199 = inst_37198__$1 < n;
                    var state_37225__$1 = function() {
                      var statearr_37232 = state_37225;
                      statearr_37232[10] = inst_37198__$1;
                      statearr_37232[11] = inst_37197;
                      return statearr_37232;
                    }();
                    if (cljs.core.truth_(inst_37199)) {
                      var statearr_37233_37259 = state_37225__$1;
                      statearr_37233_37259[1] = 8;
                    } else {
                      var statearr_37234_37260 = state_37225__$1;
                      statearr_37234_37260[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_37226 === 6) {
                      var inst_37190 = state_37225[7];
                      var inst_37211 = inst_37190 > 0;
                      var state_37225__$1 = state_37225;
                      if (cljs.core.truth_(inst_37211)) {
                        var statearr_37236_37261 = state_37225__$1;
                        statearr_37236_37261[1] = 12;
                      } else {
                        var statearr_37237_37262 = state_37225__$1;
                        statearr_37237_37262[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_37226 === 7) {
                        var inst_37221 = state_37225[2];
                        var state_37225__$1 = state_37225;
                        var statearr_37238_37263 = state_37225__$1;
                        statearr_37238_37263[2] = inst_37221;
                        statearr_37238_37263[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_37226 === 8) {
                          var inst_37198 = state_37225[10];
                          var inst_37189 = state_37225[8];
                          var tmp37235 = inst_37189;
                          var inst_37189__$1 = tmp37235;
                          var inst_37190 = inst_37198;
                          var state_37225__$1 = function() {
                            var statearr_37239 = state_37225;
                            statearr_37239[7] = inst_37190;
                            statearr_37239[8] = inst_37189__$1;
                            return statearr_37239;
                          }();
                          var statearr_37240_37264 = state_37225__$1;
                          statearr_37240_37264[2] = null;
                          statearr_37240_37264[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_37226 === 9) {
                            var inst_37189 = state_37225[8];
                            var inst_37203 = cljs.core.vec.call(null, inst_37189);
                            var state_37225__$1 = state_37225;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_37225__$1, 11, out, inst_37203);
                          } else {
                            if (state_val_37226 === 10) {
                              var inst_37209 = state_37225[2];
                              var state_37225__$1 = state_37225;
                              var statearr_37241_37265 = state_37225__$1;
                              statearr_37241_37265[2] = inst_37209;
                              statearr_37241_37265[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_37226 === 11) {
                                var inst_37205 = state_37225[2];
                                var inst_37206 = new Array(n);
                                var inst_37189 = inst_37206;
                                var inst_37190 = 0;
                                var state_37225__$1 = function() {
                                  var statearr_37242 = state_37225;
                                  statearr_37242[12] = inst_37205;
                                  statearr_37242[7] = inst_37190;
                                  statearr_37242[8] = inst_37189;
                                  return statearr_37242;
                                }();
                                var statearr_37243_37266 = state_37225__$1;
                                statearr_37243_37266[2] = null;
                                statearr_37243_37266[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_37226 === 12) {
                                  var inst_37189 = state_37225[8];
                                  var inst_37213 = cljs.core.vec.call(null, inst_37189);
                                  var state_37225__$1 = state_37225;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_37225__$1, 15, out, inst_37213);
                                } else {
                                  if (state_val_37226 === 13) {
                                    var state_37225__$1 = state_37225;
                                    var statearr_37244_37267 = state_37225__$1;
                                    statearr_37244_37267[2] = null;
                                    statearr_37244_37267[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_37226 === 14) {
                                      var inst_37218 = state_37225[2];
                                      var inst_37219 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_37225__$1 = function() {
                                        var statearr_37245 = state_37225;
                                        statearr_37245[13] = inst_37218;
                                        return statearr_37245;
                                      }();
                                      var statearr_37246_37268 = state_37225__$1;
                                      statearr_37246_37268[2] = inst_37219;
                                      statearr_37246_37268[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_37226 === 15) {
                                        var inst_37215 = state_37225[2];
                                        var state_37225__$1 = state_37225;
                                        var statearr_37247_37269 = state_37225__$1;
                                        statearr_37247_37269[2] = inst_37215;
                                        statearr_37247_37269[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_37251 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_37251[0] = state_machine__5507__auto__;
              statearr_37251[1] = 1;
              return statearr_37251;
            };
            var state_machine__5507__auto____1 = function(state_37225) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_37225);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e37252) {
                    if (e37252 instanceof Object) {
                      var ex__5510__auto__ = e37252;
                      var statearr_37253_37270 = state_37225;
                      statearr_37253_37270[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_37225);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e37252;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__37271 = state_37225;
                  state_37225 = G__37271;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_37225) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_37225);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_37254 = f__5522__auto__.call(null);
        statearr_37254[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___37255;
        return statearr_37254;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5521__auto___37414 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_37384) {
          var state_val_37385 = state_37384[1];
          if (state_val_37385 === 1) {
            var inst_37343 = [];
            var inst_37344 = inst_37343;
            var inst_37345 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_37384__$1 = function() {
              var statearr_37386 = state_37384;
              statearr_37386[7] = inst_37344;
              statearr_37386[8] = inst_37345;
              return statearr_37386;
            }();
            var statearr_37387_37415 = state_37384__$1;
            statearr_37387_37415[2] = null;
            statearr_37387_37415[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_37385 === 2) {
              var state_37384__$1 = state_37384;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_37384__$1, 4, ch);
            } else {
              if (state_val_37385 === 3) {
                var inst_37382 = state_37384[2];
                var state_37384__$1 = state_37384;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_37384__$1, inst_37382);
              } else {
                if (state_val_37385 === 4) {
                  var inst_37348 = state_37384[9];
                  var inst_37348__$1 = state_37384[2];
                  var inst_37349 = inst_37348__$1 == null;
                  var inst_37350 = cljs.core.not.call(null, inst_37349);
                  var state_37384__$1 = function() {
                    var statearr_37388 = state_37384;
                    statearr_37388[9] = inst_37348__$1;
                    return statearr_37388;
                  }();
                  if (inst_37350) {
                    var statearr_37389_37416 = state_37384__$1;
                    statearr_37389_37416[1] = 5;
                  } else {
                    var statearr_37390_37417 = state_37384__$1;
                    statearr_37390_37417[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_37385 === 5) {
                    var inst_37352 = state_37384[10];
                    var inst_37348 = state_37384[9];
                    var inst_37345 = state_37384[8];
                    var inst_37352__$1 = f.call(null, inst_37348);
                    var inst_37353 = cljs.core._EQ_.call(null, inst_37352__$1, inst_37345);
                    var inst_37354 = cljs.core.keyword_identical_QMARK_.call(null, inst_37345, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_37355 = inst_37353 || inst_37354;
                    var state_37384__$1 = function() {
                      var statearr_37391 = state_37384;
                      statearr_37391[10] = inst_37352__$1;
                      return statearr_37391;
                    }();
                    if (cljs.core.truth_(inst_37355)) {
                      var statearr_37392_37418 = state_37384__$1;
                      statearr_37392_37418[1] = 8;
                    } else {
                      var statearr_37393_37419 = state_37384__$1;
                      statearr_37393_37419[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_37385 === 6) {
                      var inst_37344 = state_37384[7];
                      var inst_37369 = inst_37344.length;
                      var inst_37370 = inst_37369 > 0;
                      var state_37384__$1 = state_37384;
                      if (cljs.core.truth_(inst_37370)) {
                        var statearr_37395_37420 = state_37384__$1;
                        statearr_37395_37420[1] = 12;
                      } else {
                        var statearr_37396_37421 = state_37384__$1;
                        statearr_37396_37421[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_37385 === 7) {
                        var inst_37380 = state_37384[2];
                        var state_37384__$1 = state_37384;
                        var statearr_37397_37422 = state_37384__$1;
                        statearr_37397_37422[2] = inst_37380;
                        statearr_37397_37422[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_37385 === 8) {
                          var inst_37352 = state_37384[10];
                          var inst_37348 = state_37384[9];
                          var inst_37344 = state_37384[7];
                          var inst_37357 = inst_37344.push(inst_37348);
                          var tmp37394 = inst_37344;
                          var inst_37344__$1 = tmp37394;
                          var inst_37345 = inst_37352;
                          var state_37384__$1 = function() {
                            var statearr_37398 = state_37384;
                            statearr_37398[11] = inst_37357;
                            statearr_37398[7] = inst_37344__$1;
                            statearr_37398[8] = inst_37345;
                            return statearr_37398;
                          }();
                          var statearr_37399_37423 = state_37384__$1;
                          statearr_37399_37423[2] = null;
                          statearr_37399_37423[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_37385 === 9) {
                            var inst_37344 = state_37384[7];
                            var inst_37360 = cljs.core.vec.call(null, inst_37344);
                            var state_37384__$1 = state_37384;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_37384__$1, 11, out, inst_37360);
                          } else {
                            if (state_val_37385 === 10) {
                              var inst_37367 = state_37384[2];
                              var state_37384__$1 = state_37384;
                              var statearr_37400_37424 = state_37384__$1;
                              statearr_37400_37424[2] = inst_37367;
                              statearr_37400_37424[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_37385 === 11) {
                                var inst_37352 = state_37384[10];
                                var inst_37348 = state_37384[9];
                                var inst_37362 = state_37384[2];
                                var inst_37363 = [];
                                var inst_37364 = inst_37363.push(inst_37348);
                                var inst_37344 = inst_37363;
                                var inst_37345 = inst_37352;
                                var state_37384__$1 = function() {
                                  var statearr_37401 = state_37384;
                                  statearr_37401[12] = inst_37364;
                                  statearr_37401[13] = inst_37362;
                                  statearr_37401[7] = inst_37344;
                                  statearr_37401[8] = inst_37345;
                                  return statearr_37401;
                                }();
                                var statearr_37402_37425 = state_37384__$1;
                                statearr_37402_37425[2] = null;
                                statearr_37402_37425[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_37385 === 12) {
                                  var inst_37344 = state_37384[7];
                                  var inst_37372 = cljs.core.vec.call(null, inst_37344);
                                  var state_37384__$1 = state_37384;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_37384__$1, 15, out, inst_37372);
                                } else {
                                  if (state_val_37385 === 13) {
                                    var state_37384__$1 = state_37384;
                                    var statearr_37403_37426 = state_37384__$1;
                                    statearr_37403_37426[2] = null;
                                    statearr_37403_37426[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_37385 === 14) {
                                      var inst_37377 = state_37384[2];
                                      var inst_37378 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_37384__$1 = function() {
                                        var statearr_37404 = state_37384;
                                        statearr_37404[14] = inst_37377;
                                        return statearr_37404;
                                      }();
                                      var statearr_37405_37427 = state_37384__$1;
                                      statearr_37405_37427[2] = inst_37378;
                                      statearr_37405_37427[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_37385 === 15) {
                                        var inst_37374 = state_37384[2];
                                        var state_37384__$1 = state_37384;
                                        var statearr_37406_37428 = state_37384__$1;
                                        statearr_37406_37428[2] = inst_37374;
                                        statearr_37406_37428[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_37410 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_37410[0] = state_machine__5507__auto__;
              statearr_37410[1] = 1;
              return statearr_37410;
            };
            var state_machine__5507__auto____1 = function(state_37384) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_37384);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e37411) {
                    if (e37411 instanceof Object) {
                      var ex__5510__auto__ = e37411;
                      var statearr_37412_37429 = state_37384;
                      statearr_37412_37429[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_37384);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e37411;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__37430 = state_37384;
                  state_37384 = G__37430;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_37384) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_37384);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_37413 = f__5522__auto__.call(null);
        statearr_37413[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___37414;
        return statearr_37413;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("clustermap.components.page_title");
goog.require("cljs.core");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("cljs.core.async");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("clustermap.om");
goog.require("om.dom");
goog.require("om.core");
goog.require("om.core");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("om.dom");
goog.require("clustermap.om");
goog.require("cljs.core.async");
goog.require("clustermap.formats.number");
clustermap.components.page_title.describe_type = function describe_type(type) {
  var pred__33536 = cljs.core._EQ_;
  var expr__33537 = type;
  if (cljs.core.truth_(pred__33536.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), expr__33537))) {
    return "Portfolio Company";
  } else {
    if (cljs.core.truth_(pred__33536.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), expr__33537))) {
      return "Investor";
    } else {
      if (cljs.core.truth_(pred__33536.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), expr__33537))) {
        return "Constituency";
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__33537)].join(""));
      }
    }
  }
};
clustermap.components.page_title.page_title_component = function page_title_component(p__33539, owner) {
  var map__33549 = p__33539;
  var map__33549__$1 = cljs.core.seq_QMARK_.call(null, map__33549) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33549) : map__33549;
  var selection = map__33549__$1;
  var value = cljs.core.get.call(null, map__33549__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var type = cljs.core.get.call(null, map__33549__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  var comm = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
  var type_descr = function() {
    var G__33550 = selection;
    var G__33550__$1 = G__33550 == null ? null : (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(G__33550);
    var G__33550__$2 = G__33550__$1 == null ? null : clustermap.components.page_title.describe_type.call(null, G__33550__$1);
    return G__33550__$2;
  }();
  var name = function() {
    var G__33551 = selection;
    var G__33551__$1 = G__33551 == null ? null : (new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(G__33551);
    var G__33551__$2 = G__33551__$1 == null ? null : (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__33551__$1);
    return G__33551__$2;
  }();
  var url = function() {
    var G__33552 = selection;
    var G__33552__$1 = G__33552 == null ? null : (new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(G__33552);
    var G__33552__$2 = G__33552__$1 == null ? null : (new cljs.core.Keyword(null, "web_url", "web_url", 2237655414)).cljs$core$IFn$_invoke$arity$1(G__33552__$1);
    return G__33552__$2;
  }();
  if (typeof clustermap.components.page_title.t33553 !== "undefined") {
  } else {
    clustermap.components.page_title.t33553 = function(value, p__33539, type_descr, map__33549, selection, name, comm, page_title_component, owner, url, type, meta33554) {
      this.value = value;
      this.p__33539 = p__33539;
      this.type_descr = type_descr;
      this.map__33549 = map__33549;
      this.selection = selection;
      this.name = name;
      this.comm = comm;
      this.page_title_component = page_title_component;
      this.owner = owner;
      this.url = url;
      this.type = type;
      this.meta33554 = meta33554;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.page_title.t33553.cljs$lang$type = true;
    clustermap.components.page_title.t33553.cljs$lang$ctorStr = "clustermap.components.page-title/t33553";
    clustermap.components.page_title.t33553.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.page-title/t33553");
    };
    clustermap.components.page_title.t33553.prototype.om$core$IRender$ = true;
    clustermap.components.page_title.t33553.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div({"id":"page-title"}, React.DOM.button({"className":"btn", "type":"button", "onClick":function(e) {
        return cljs.core.async.put_BANG_.call(null, self__.comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "change-view", "change-view", 3608283668), "map"], null));
      }}, "View on map"), function() {
        var attrs33556 = function() {
          var or__3406__auto__ = self__.type_descr;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return "All portfolio companies";
          }
        }();
        if (cljs.core.map_QMARK_.call(null, attrs33556)) {
          return React.DOM.h2(sablono.interpreter.attributes.call(null, attrs33556), null);
        } else {
          return React.DOM.h2(null, sablono.interpreter.interpret.call(null, attrs33556));
        }
      }(), function() {
        var attrs33557 = function() {
          var or__3406__auto__ = self__.name;
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return "UK wide";
          }
        }();
        if (cljs.core.map_QMARK_.call(null, attrs33557)) {
          return React.DOM.h3(sablono.interpreter.attributes.call(null, attrs33557), sablono.interpreter.interpret.call(null, cljs.core._EQ_.call(null, self__.type, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696)) ? new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "small", "small", 1123453049), "\u00a0(", (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.value), ", ", (new cljs.core.Keyword(null, 
          "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.value), ")"], null) : null));
        } else {
          return React.DOM.h3(null, sablono.interpreter.interpret.call(null, attrs33557), sablono.interpreter.interpret.call(null, cljs.core._EQ_.call(null, self__.type, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696)) ? new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "small", "small", 1123453049), "\u00a0(", (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.value), ", ", 
          (new cljs.core.Keyword(null, "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.value), ")"], null) : null));
        }
      }(), cljs.core.truth_(self__.url) ? React.DOM.a({"href":self__.url, "target":"_blank"}, sablono.interpreter.interpret.call(null, self__.url)) : null);
    };
    clustermap.components.page_title.t33553.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33555) {
      var self__ = this;
      var _33555__$1 = this;
      return self__.meta33554;
    };
    clustermap.components.page_title.t33553.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33555, meta33554__$1) {
      var self__ = this;
      var _33555__$1 = this;
      return new clustermap.components.page_title.t33553(self__.value, self__.p__33539, self__.type_descr, self__.map__33549, self__.selection, self__.name, self__.comm, self__.page_title_component, self__.owner, self__.url, self__.type, meta33554__$1);
    };
    clustermap.components.page_title.__GT_t33553 = function __GT_t33553(value__$1, p__33539__$1, type_descr__$1, map__33549__$2, selection__$1, name__$1, comm__$1, page_title_component__$1, owner__$1, url__$1, type__$1, meta33554) {
      return new clustermap.components.page_title.t33553(value__$1, p__33539__$1, type_descr__$1, map__33549__$2, selection__$1, name__$1, comm__$1, page_title_component__$1, owner__$1, url__$1, type__$1, meta33554);
    };
  }
  return new clustermap.components.page_title.t33553(value, p__33539, type_descr, map__33549__$1, selection, name, comm, page_title_component, owner, url, type, null);
};
clustermap.components.page_title.mount = function mount(app_state, elem_id, shared) {
  return om.core.root.call(null, app_state, shared, clustermap.om.burrow.call(null, clustermap.components.page_title.page_title_component, new cljs.core.Keyword(null, "selection", "selection", 3592905982)), document.getElementById(elem_id));
};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || (el.disabled || el.tagName.toLowerCase() == "fieldset")) {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && (el.type && el.type.toLowerCase() == "file")) {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els.type) {
    return goog.dom.forms.getValue(els);
  } else {
    for (var i = 0;i < els.length;i++) {
      var val = goog.dom.forms.getValue(els[i]);
      if (val) {
        return val;
      }
    }
    return null;
  }
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("goog.dom");
var div_38752 = document.createElement("div");
var test_html_38753 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_38752.innerHTML = test_html_38753;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_38752.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_38752.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_38752.getElementsByTagName("link").length, 0);
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.classes");
goog.require("domina.support");
goog.require("goog.dom.classes");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.string");
goog.require("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.string");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("goog.dom.xml");
goog.require("goog.style");
goog.require("goog.dom.forms");
goog.require("domina.support");
goog.require("goog.events");
goog.require("cljs.core");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_38302 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_38303 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_38304 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["col", new cljs.core.Keyword(null, "default", "default", 2558708147), "tfoot", "caption", "optgroup", "legend", "area", "td", "thead", "th", "option", "tbody", "tr", "colgroup"], [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", "\x3c/colgroup\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, "", ""], null), table_section_wrapper_38303, table_section_wrapper_38303, opt_wrapper_38302, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), cell_wrapper_38304, table_section_wrapper_38303, cell_wrapper_38304, opt_wrapper_38302, table_section_wrapper_38303, new cljs.core.PersistentVector(null, 
3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), table_section_wrapper_38303]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3394__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3394__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3394__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? divchildNodes : cljs.core.PersistentVector.EMPTY;
  var seq__38309 = cljs.core.seq.call(null, tbody);
  var chunk__38310 = null;
  var count__38311 = 0;
  var i__38312 = 0;
  while (true) {
    if (i__38312 < count__38311) {
      var child = cljs.core._nth.call(null, chunk__38310, i__38312);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__38313 = seq__38309;
      var G__38314 = chunk__38310;
      var G__38315 = count__38311;
      var G__38316 = i__38312 + 1;
      seq__38309 = G__38313;
      chunk__38310 = G__38314;
      count__38311 = G__38315;
      i__38312 = G__38316;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__38309);
      if (temp__4092__auto__) {
        var seq__38309__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38309__$1)) {
          var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__38309__$1);
          var G__38317 = cljs.core.chunk_rest.call(null, seq__38309__$1);
          var G__38318 = c__4148__auto__;
          var G__38319 = cljs.core.count.call(null, c__4148__auto__);
          var G__38320 = 0;
          seq__38309 = G__38317;
          chunk__38310 = G__38318;
          count__38311 = G__38319;
          i__38312 = G__38320;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__38309__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__38321 = cljs.core.next.call(null, seq__38309__$1);
          var G__38322 = null;
          var G__38323 = 0;
          var G__38324 = 0;
          seq__38309 = G__38321;
          chunk__38310 = G__38322;
          count__38311 = G__38323;
          i__38312 = G__38324;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__38326 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__38326, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__38326, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__38326, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__38327 = wrapper.lastChild;
        var G__38328 = level - 1;
        wrapper = G__38327;
        level = G__38328;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3394__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3394__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj38330 = {};
  return obj38330;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3394__auto__ = content;
    if (and__3394__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4027__auto__ = content == null ? null : content;
    return function() {
      var or__3406__auto__ = domina.nodes[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.nodes["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3394__auto__ = nodeseq;
    if (and__3394__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4027__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3406__auto__ = domina.single_node[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.single_node["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3394__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3394__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__38331) {
    var mesg = cljs.core.seq(arglist__38331);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__38332) {
    var mesg = cljs.core.seq(arglist__38332);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      contents = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__38333) {
    var contents = cljs.core.seq(arglist__38333);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__38334_SHARP_) {
    return p1__38334_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__38335_SHARP_, p2__38336_SHARP_) {
    return goog.dom.insertChildAt(p1__38335_SHARP_, p2__38336_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__38338_SHARP_, p2__38337_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__38337_SHARP_, p1__38338_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__38340_SHARP_, p2__38339_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__38339_SHARP_, p1__38340_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__38342_SHARP_, p2__38341_SHARP_) {
    return goog.dom.replaceNode(p2__38341_SHARP_, p1__38342_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__38347_38351 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__38348_38352 = null;
    var count__38349_38353 = 0;
    var i__38350_38354 = 0;
    while (true) {
      if (i__38350_38354 < count__38349_38353) {
        var n_38355 = cljs.core._nth.call(null, chunk__38348_38352, i__38350_38354);
        goog.style.setStyle(n_38355, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__38356 = seq__38347_38351;
        var G__38357 = chunk__38348_38352;
        var G__38358 = count__38349_38353;
        var G__38359 = i__38350_38354 + 1;
        seq__38347_38351 = G__38356;
        chunk__38348_38352 = G__38357;
        count__38349_38353 = G__38358;
        i__38350_38354 = G__38359;
        continue;
      } else {
        var temp__4092__auto___38360 = cljs.core.seq.call(null, seq__38347_38351);
        if (temp__4092__auto___38360) {
          var seq__38347_38361__$1 = temp__4092__auto___38360;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38347_38361__$1)) {
            var c__4148__auto___38362 = cljs.core.chunk_first.call(null, seq__38347_38361__$1);
            var G__38363 = cljs.core.chunk_rest.call(null, seq__38347_38361__$1);
            var G__38364 = c__4148__auto___38362;
            var G__38365 = cljs.core.count.call(null, c__4148__auto___38362);
            var G__38366 = 0;
            seq__38347_38351 = G__38363;
            chunk__38348_38352 = G__38364;
            count__38349_38353 = G__38365;
            i__38350_38354 = G__38366;
            continue;
          } else {
            var n_38367 = cljs.core.first.call(null, seq__38347_38361__$1);
            goog.style.setStyle(n_38367, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__38368 = cljs.core.next.call(null, seq__38347_38361__$1);
            var G__38369 = null;
            var G__38370 = 0;
            var G__38371 = 0;
            seq__38347_38351 = G__38368;
            chunk__38348_38352 = G__38369;
            count__38349_38353 = G__38370;
            i__38350_38354 = G__38371;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__38372) {
    var content = cljs.core.first(arglist__38372);
    arglist__38372 = cljs.core.next(arglist__38372);
    var name = cljs.core.first(arglist__38372);
    var value = cljs.core.rest(arglist__38372);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__38377_38381 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__38378_38382 = null;
    var count__38379_38383 = 0;
    var i__38380_38384 = 0;
    while (true) {
      if (i__38380_38384 < count__38379_38383) {
        var n_38385 = cljs.core._nth.call(null, chunk__38378_38382, i__38380_38384);
        n_38385.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__38386 = seq__38377_38381;
        var G__38387 = chunk__38378_38382;
        var G__38388 = count__38379_38383;
        var G__38389 = i__38380_38384 + 1;
        seq__38377_38381 = G__38386;
        chunk__38378_38382 = G__38387;
        count__38379_38383 = G__38388;
        i__38380_38384 = G__38389;
        continue;
      } else {
        var temp__4092__auto___38390 = cljs.core.seq.call(null, seq__38377_38381);
        if (temp__4092__auto___38390) {
          var seq__38377_38391__$1 = temp__4092__auto___38390;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38377_38391__$1)) {
            var c__4148__auto___38392 = cljs.core.chunk_first.call(null, seq__38377_38391__$1);
            var G__38393 = cljs.core.chunk_rest.call(null, seq__38377_38391__$1);
            var G__38394 = c__4148__auto___38392;
            var G__38395 = cljs.core.count.call(null, c__4148__auto___38392);
            var G__38396 = 0;
            seq__38377_38381 = G__38393;
            chunk__38378_38382 = G__38394;
            count__38379_38383 = G__38395;
            i__38380_38384 = G__38396;
            continue;
          } else {
            var n_38397 = cljs.core.first.call(null, seq__38377_38391__$1);
            n_38397.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__38398 = cljs.core.next.call(null, seq__38377_38391__$1);
            var G__38399 = null;
            var G__38400 = 0;
            var G__38401 = 0;
            seq__38377_38381 = G__38398;
            chunk__38378_38382 = G__38399;
            count__38379_38383 = G__38400;
            i__38380_38384 = G__38401;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__38402) {
    var content = cljs.core.first(arglist__38402);
    arglist__38402 = cljs.core.next(arglist__38402);
    var name = cljs.core.first(arglist__38402);
    var value = cljs.core.rest(arglist__38402);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__38407_38411 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38408_38412 = null;
  var count__38409_38413 = 0;
  var i__38410_38414 = 0;
  while (true) {
    if (i__38410_38414 < count__38409_38413) {
      var n_38415 = cljs.core._nth.call(null, chunk__38408_38412, i__38410_38414);
      n_38415.removeAttribute(cljs.core.name.call(null, name));
      var G__38416 = seq__38407_38411;
      var G__38417 = chunk__38408_38412;
      var G__38418 = count__38409_38413;
      var G__38419 = i__38410_38414 + 1;
      seq__38407_38411 = G__38416;
      chunk__38408_38412 = G__38417;
      count__38409_38413 = G__38418;
      i__38410_38414 = G__38419;
      continue;
    } else {
      var temp__4092__auto___38420 = cljs.core.seq.call(null, seq__38407_38411);
      if (temp__4092__auto___38420) {
        var seq__38407_38421__$1 = temp__4092__auto___38420;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38407_38421__$1)) {
          var c__4148__auto___38422 = cljs.core.chunk_first.call(null, seq__38407_38421__$1);
          var G__38423 = cljs.core.chunk_rest.call(null, seq__38407_38421__$1);
          var G__38424 = c__4148__auto___38422;
          var G__38425 = cljs.core.count.call(null, c__4148__auto___38422);
          var G__38426 = 0;
          seq__38407_38411 = G__38423;
          chunk__38408_38412 = G__38424;
          count__38409_38413 = G__38425;
          i__38410_38414 = G__38426;
          continue;
        } else {
          var n_38427 = cljs.core.first.call(null, seq__38407_38421__$1);
          n_38427.removeAttribute(cljs.core.name.call(null, name));
          var G__38428 = cljs.core.next.call(null, seq__38407_38421__$1);
          var G__38429 = null;
          var G__38430 = 0;
          var G__38431 = 0;
          seq__38407_38411 = G__38428;
          chunk__38408_38412 = G__38429;
          count__38409_38413 = G__38430;
          i__38410_38414 = G__38431;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__38433 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__38433, 0, null);
    var v = cljs.core.nth.call(null, vec__38433, 1, null);
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = k;
      if (cljs.core.truth_(and__3394__auto__)) {
        return v;
      } else {
        return and__3394__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return null;
        }
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(p1__38434_SHARP_) {
    var attr = attrs__$1.item(p1__38434_SHARP_);
    var value = attr.nodeValue;
    if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
      return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
    } else {
      return null;
    }
  }, cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__38441_38447 = cljs.core.seq.call(null, styles);
  var chunk__38442_38448 = null;
  var count__38443_38449 = 0;
  var i__38444_38450 = 0;
  while (true) {
    if (i__38444_38450 < count__38443_38449) {
      var vec__38445_38451 = cljs.core._nth.call(null, chunk__38442_38448, i__38444_38450);
      var name_38452 = cljs.core.nth.call(null, vec__38445_38451, 0, null);
      var value_38453 = cljs.core.nth.call(null, vec__38445_38451, 1, null);
      domina.set_style_BANG_.call(null, content, name_38452, value_38453);
      var G__38454 = seq__38441_38447;
      var G__38455 = chunk__38442_38448;
      var G__38456 = count__38443_38449;
      var G__38457 = i__38444_38450 + 1;
      seq__38441_38447 = G__38454;
      chunk__38442_38448 = G__38455;
      count__38443_38449 = G__38456;
      i__38444_38450 = G__38457;
      continue;
    } else {
      var temp__4092__auto___38458 = cljs.core.seq.call(null, seq__38441_38447);
      if (temp__4092__auto___38458) {
        var seq__38441_38459__$1 = temp__4092__auto___38458;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38441_38459__$1)) {
          var c__4148__auto___38460 = cljs.core.chunk_first.call(null, seq__38441_38459__$1);
          var G__38461 = cljs.core.chunk_rest.call(null, seq__38441_38459__$1);
          var G__38462 = c__4148__auto___38460;
          var G__38463 = cljs.core.count.call(null, c__4148__auto___38460);
          var G__38464 = 0;
          seq__38441_38447 = G__38461;
          chunk__38442_38448 = G__38462;
          count__38443_38449 = G__38463;
          i__38444_38450 = G__38464;
          continue;
        } else {
          var vec__38446_38465 = cljs.core.first.call(null, seq__38441_38459__$1);
          var name_38466 = cljs.core.nth.call(null, vec__38446_38465, 0, null);
          var value_38467 = cljs.core.nth.call(null, vec__38446_38465, 1, null);
          domina.set_style_BANG_.call(null, content, name_38466, value_38467);
          var G__38468 = cljs.core.next.call(null, seq__38441_38459__$1);
          var G__38469 = null;
          var G__38470 = 0;
          var G__38471 = 0;
          seq__38441_38447 = G__38468;
          chunk__38442_38448 = G__38469;
          count__38443_38449 = G__38470;
          i__38444_38450 = G__38471;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__38478_38484 = cljs.core.seq.call(null, attrs);
  var chunk__38479_38485 = null;
  var count__38480_38486 = 0;
  var i__38481_38487 = 0;
  while (true) {
    if (i__38481_38487 < count__38480_38486) {
      var vec__38482_38488 = cljs.core._nth.call(null, chunk__38479_38485, i__38481_38487);
      var name_38489 = cljs.core.nth.call(null, vec__38482_38488, 0, null);
      var value_38490 = cljs.core.nth.call(null, vec__38482_38488, 1, null);
      domina.set_attr_BANG_.call(null, content, name_38489, value_38490);
      var G__38491 = seq__38478_38484;
      var G__38492 = chunk__38479_38485;
      var G__38493 = count__38480_38486;
      var G__38494 = i__38481_38487 + 1;
      seq__38478_38484 = G__38491;
      chunk__38479_38485 = G__38492;
      count__38480_38486 = G__38493;
      i__38481_38487 = G__38494;
      continue;
    } else {
      var temp__4092__auto___38495 = cljs.core.seq.call(null, seq__38478_38484);
      if (temp__4092__auto___38495) {
        var seq__38478_38496__$1 = temp__4092__auto___38495;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38478_38496__$1)) {
          var c__4148__auto___38497 = cljs.core.chunk_first.call(null, seq__38478_38496__$1);
          var G__38498 = cljs.core.chunk_rest.call(null, seq__38478_38496__$1);
          var G__38499 = c__4148__auto___38497;
          var G__38500 = cljs.core.count.call(null, c__4148__auto___38497);
          var G__38501 = 0;
          seq__38478_38484 = G__38498;
          chunk__38479_38485 = G__38499;
          count__38480_38486 = G__38500;
          i__38481_38487 = G__38501;
          continue;
        } else {
          var vec__38483_38502 = cljs.core.first.call(null, seq__38478_38496__$1);
          var name_38503 = cljs.core.nth.call(null, vec__38483_38502, 0, null);
          var value_38504 = cljs.core.nth.call(null, vec__38483_38502, 1, null);
          domina.set_attr_BANG_.call(null, content, name_38503, value_38504);
          var G__38505 = cljs.core.next.call(null, seq__38478_38496__$1);
          var G__38506 = null;
          var G__38507 = 0;
          var G__38508 = 0;
          seq__38478_38484 = G__38505;
          chunk__38479_38485 = G__38506;
          count__38480_38486 = G__38507;
          i__38481_38487 = G__38508;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__38513_38517 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38514_38518 = null;
  var count__38515_38519 = 0;
  var i__38516_38520 = 0;
  while (true) {
    if (i__38516_38520 < count__38515_38519) {
      var node_38521 = cljs.core._nth.call(null, chunk__38514_38518, i__38516_38520);
      goog.dom.classes.add(node_38521, class$);
      var G__38522 = seq__38513_38517;
      var G__38523 = chunk__38514_38518;
      var G__38524 = count__38515_38519;
      var G__38525 = i__38516_38520 + 1;
      seq__38513_38517 = G__38522;
      chunk__38514_38518 = G__38523;
      count__38515_38519 = G__38524;
      i__38516_38520 = G__38525;
      continue;
    } else {
      var temp__4092__auto___38526 = cljs.core.seq.call(null, seq__38513_38517);
      if (temp__4092__auto___38526) {
        var seq__38513_38527__$1 = temp__4092__auto___38526;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38513_38527__$1)) {
          var c__4148__auto___38528 = cljs.core.chunk_first.call(null, seq__38513_38527__$1);
          var G__38529 = cljs.core.chunk_rest.call(null, seq__38513_38527__$1);
          var G__38530 = c__4148__auto___38528;
          var G__38531 = cljs.core.count.call(null, c__4148__auto___38528);
          var G__38532 = 0;
          seq__38513_38517 = G__38529;
          chunk__38514_38518 = G__38530;
          count__38515_38519 = G__38531;
          i__38516_38520 = G__38532;
          continue;
        } else {
          var node_38533 = cljs.core.first.call(null, seq__38513_38527__$1);
          goog.dom.classes.add(node_38533, class$);
          var G__38534 = cljs.core.next.call(null, seq__38513_38527__$1);
          var G__38535 = null;
          var G__38536 = 0;
          var G__38537 = 0;
          seq__38513_38517 = G__38534;
          chunk__38514_38518 = G__38535;
          count__38515_38519 = G__38536;
          i__38516_38520 = G__38537;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__38542_38546 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38543_38547 = null;
  var count__38544_38548 = 0;
  var i__38545_38549 = 0;
  while (true) {
    if (i__38545_38549 < count__38544_38548) {
      var node_38550 = cljs.core._nth.call(null, chunk__38543_38547, i__38545_38549);
      goog.dom.classes.remove(node_38550, class$);
      var G__38551 = seq__38542_38546;
      var G__38552 = chunk__38543_38547;
      var G__38553 = count__38544_38548;
      var G__38554 = i__38545_38549 + 1;
      seq__38542_38546 = G__38551;
      chunk__38543_38547 = G__38552;
      count__38544_38548 = G__38553;
      i__38545_38549 = G__38554;
      continue;
    } else {
      var temp__4092__auto___38555 = cljs.core.seq.call(null, seq__38542_38546);
      if (temp__4092__auto___38555) {
        var seq__38542_38556__$1 = temp__4092__auto___38555;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38542_38556__$1)) {
          var c__4148__auto___38557 = cljs.core.chunk_first.call(null, seq__38542_38556__$1);
          var G__38558 = cljs.core.chunk_rest.call(null, seq__38542_38556__$1);
          var G__38559 = c__4148__auto___38557;
          var G__38560 = cljs.core.count.call(null, c__4148__auto___38557);
          var G__38561 = 0;
          seq__38542_38546 = G__38558;
          chunk__38543_38547 = G__38559;
          count__38544_38548 = G__38560;
          i__38545_38549 = G__38561;
          continue;
        } else {
          var node_38562 = cljs.core.first.call(null, seq__38542_38556__$1);
          goog.dom.classes.remove(node_38562, class$);
          var G__38563 = cljs.core.next.call(null, seq__38542_38556__$1);
          var G__38564 = null;
          var G__38565 = 0;
          var G__38566 = 0;
          seq__38542_38546 = G__38563;
          chunk__38543_38547 = G__38564;
          count__38544_38548 = G__38565;
          i__38545_38549 = G__38566;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__38571_38575 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38572_38576 = null;
  var count__38573_38577 = 0;
  var i__38574_38578 = 0;
  while (true) {
    if (i__38574_38578 < count__38573_38577) {
      var node_38579 = cljs.core._nth.call(null, chunk__38572_38576, i__38574_38578);
      goog.dom.classes.toggle(node_38579, class$);
      var G__38580 = seq__38571_38575;
      var G__38581 = chunk__38572_38576;
      var G__38582 = count__38573_38577;
      var G__38583 = i__38574_38578 + 1;
      seq__38571_38575 = G__38580;
      chunk__38572_38576 = G__38581;
      count__38573_38577 = G__38582;
      i__38574_38578 = G__38583;
      continue;
    } else {
      var temp__4092__auto___38584 = cljs.core.seq.call(null, seq__38571_38575);
      if (temp__4092__auto___38584) {
        var seq__38571_38585__$1 = temp__4092__auto___38584;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38571_38585__$1)) {
          var c__4148__auto___38586 = cljs.core.chunk_first.call(null, seq__38571_38585__$1);
          var G__38587 = cljs.core.chunk_rest.call(null, seq__38571_38585__$1);
          var G__38588 = c__4148__auto___38586;
          var G__38589 = cljs.core.count.call(null, c__4148__auto___38586);
          var G__38590 = 0;
          seq__38571_38575 = G__38587;
          chunk__38572_38576 = G__38588;
          count__38573_38577 = G__38589;
          i__38574_38578 = G__38590;
          continue;
        } else {
          var node_38591 = cljs.core.first.call(null, seq__38571_38585__$1);
          goog.dom.classes.toggle(node_38591, class$);
          var G__38592 = cljs.core.next.call(null, seq__38571_38585__$1);
          var G__38593 = null;
          var G__38594 = 0;
          var G__38595 = 0;
          seq__38571_38575 = G__38592;
          chunk__38572_38576 = G__38593;
          count__38573_38577 = G__38594;
          i__38574_38578 = G__38595;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_38604__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__38600_38605 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38601_38606 = null;
  var count__38602_38607 = 0;
  var i__38603_38608 = 0;
  while (true) {
    if (i__38603_38608 < count__38602_38607) {
      var node_38609 = cljs.core._nth.call(null, chunk__38601_38606, i__38603_38608);
      goog.dom.classes.set(node_38609, classes_38604__$1);
      var G__38610 = seq__38600_38605;
      var G__38611 = chunk__38601_38606;
      var G__38612 = count__38602_38607;
      var G__38613 = i__38603_38608 + 1;
      seq__38600_38605 = G__38610;
      chunk__38601_38606 = G__38611;
      count__38602_38607 = G__38612;
      i__38603_38608 = G__38613;
      continue;
    } else {
      var temp__4092__auto___38614 = cljs.core.seq.call(null, seq__38600_38605);
      if (temp__4092__auto___38614) {
        var seq__38600_38615__$1 = temp__4092__auto___38614;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38600_38615__$1)) {
          var c__4148__auto___38616 = cljs.core.chunk_first.call(null, seq__38600_38615__$1);
          var G__38617 = cljs.core.chunk_rest.call(null, seq__38600_38615__$1);
          var G__38618 = c__4148__auto___38616;
          var G__38619 = cljs.core.count.call(null, c__4148__auto___38616);
          var G__38620 = 0;
          seq__38600_38605 = G__38617;
          chunk__38601_38606 = G__38618;
          count__38602_38607 = G__38619;
          i__38603_38608 = G__38620;
          continue;
        } else {
          var node_38621 = cljs.core.first.call(null, seq__38600_38615__$1);
          goog.dom.classes.set(node_38621, classes_38604__$1);
          var G__38622 = cljs.core.next.call(null, seq__38600_38615__$1);
          var G__38623 = null;
          var G__38624 = 0;
          var G__38625 = 0;
          seq__38600_38605 = G__38622;
          chunk__38601_38606 = G__38623;
          count__38602_38607 = G__38624;
          i__38603_38608 = G__38625;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__38630_38634 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38631_38635 = null;
  var count__38632_38636 = 0;
  var i__38633_38637 = 0;
  while (true) {
    if (i__38633_38637 < count__38632_38636) {
      var node_38638 = cljs.core._nth.call(null, chunk__38631_38635, i__38633_38637);
      goog.dom.setTextContent(node_38638, value);
      var G__38639 = seq__38630_38634;
      var G__38640 = chunk__38631_38635;
      var G__38641 = count__38632_38636;
      var G__38642 = i__38633_38637 + 1;
      seq__38630_38634 = G__38639;
      chunk__38631_38635 = G__38640;
      count__38632_38636 = G__38641;
      i__38633_38637 = G__38642;
      continue;
    } else {
      var temp__4092__auto___38643 = cljs.core.seq.call(null, seq__38630_38634);
      if (temp__4092__auto___38643) {
        var seq__38630_38644__$1 = temp__4092__auto___38643;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38630_38644__$1)) {
          var c__4148__auto___38645 = cljs.core.chunk_first.call(null, seq__38630_38644__$1);
          var G__38646 = cljs.core.chunk_rest.call(null, seq__38630_38644__$1);
          var G__38647 = c__4148__auto___38645;
          var G__38648 = cljs.core.count.call(null, c__4148__auto___38645);
          var G__38649 = 0;
          seq__38630_38634 = G__38646;
          chunk__38631_38635 = G__38647;
          count__38632_38636 = G__38648;
          i__38633_38637 = G__38649;
          continue;
        } else {
          var node_38650 = cljs.core.first.call(null, seq__38630_38644__$1);
          goog.dom.setTextContent(node_38650, value);
          var G__38651 = cljs.core.next.call(null, seq__38630_38644__$1);
          var G__38652 = null;
          var G__38653 = 0;
          var G__38654 = 0;
          seq__38630_38634 = G__38651;
          chunk__38631_38635 = G__38652;
          count__38632_38636 = G__38653;
          i__38633_38637 = G__38654;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__38659_38663 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__38660_38664 = null;
  var count__38661_38665 = 0;
  var i__38662_38666 = 0;
  while (true) {
    if (i__38662_38666 < count__38661_38665) {
      var node_38667 = cljs.core._nth.call(null, chunk__38660_38664, i__38662_38666);
      goog.dom.forms.setValue(node_38667, value);
      var G__38668 = seq__38659_38663;
      var G__38669 = chunk__38660_38664;
      var G__38670 = count__38661_38665;
      var G__38671 = i__38662_38666 + 1;
      seq__38659_38663 = G__38668;
      chunk__38660_38664 = G__38669;
      count__38661_38665 = G__38670;
      i__38662_38666 = G__38671;
      continue;
    } else {
      var temp__4092__auto___38672 = cljs.core.seq.call(null, seq__38659_38663);
      if (temp__4092__auto___38672) {
        var seq__38659_38673__$1 = temp__4092__auto___38672;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38659_38673__$1)) {
          var c__4148__auto___38674 = cljs.core.chunk_first.call(null, seq__38659_38673__$1);
          var G__38675 = cljs.core.chunk_rest.call(null, seq__38659_38673__$1);
          var G__38676 = c__4148__auto___38674;
          var G__38677 = cljs.core.count.call(null, c__4148__auto___38674);
          var G__38678 = 0;
          seq__38659_38663 = G__38675;
          chunk__38660_38664 = G__38676;
          count__38661_38665 = G__38677;
          i__38662_38666 = G__38678;
          continue;
        } else {
          var node_38679 = cljs.core.first.call(null, seq__38659_38673__$1);
          goog.dom.forms.setValue(node_38679, value);
          var G__38680 = cljs.core.next.call(null, seq__38659_38673__$1);
          var G__38681 = null;
          var G__38682 = 0;
          var G__38683 = 0;
          seq__38659_38663 = G__38680;
          chunk__38660_38664 = G__38681;
          count__38661_38665 = G__38682;
          i__38662_38666 = G__38683;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = allows_inner_html_QMARK_;
    if (and__3394__auto__) {
      var and__3394__auto____$1 = function() {
        var or__3406__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3394__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3394__auto____$1;
      }
    } else {
      return and__3394__auto__;
    }
  }())) {
    var value_38694 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__38690_38695 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__38691_38696 = null;
      var count__38692_38697 = 0;
      var i__38693_38698 = 0;
      while (true) {
        if (i__38693_38698 < count__38692_38697) {
          var node_38699 = cljs.core._nth.call(null, chunk__38691_38696, i__38693_38698);
          node_38699.innerHTML = value_38694;
          var G__38700 = seq__38690_38695;
          var G__38701 = chunk__38691_38696;
          var G__38702 = count__38692_38697;
          var G__38703 = i__38693_38698 + 1;
          seq__38690_38695 = G__38700;
          chunk__38691_38696 = G__38701;
          count__38692_38697 = G__38702;
          i__38693_38698 = G__38703;
          continue;
        } else {
          var temp__4092__auto___38704 = cljs.core.seq.call(null, seq__38690_38695);
          if (temp__4092__auto___38704) {
            var seq__38690_38705__$1 = temp__4092__auto___38704;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__38690_38705__$1)) {
              var c__4148__auto___38706 = cljs.core.chunk_first.call(null, seq__38690_38705__$1);
              var G__38707 = cljs.core.chunk_rest.call(null, seq__38690_38705__$1);
              var G__38708 = c__4148__auto___38706;
              var G__38709 = cljs.core.count.call(null, c__4148__auto___38706);
              var G__38710 = 0;
              seq__38690_38695 = G__38707;
              chunk__38691_38696 = G__38708;
              count__38692_38697 = G__38709;
              i__38693_38698 = G__38710;
              continue;
            } else {
              var node_38711 = cljs.core.first.call(null, seq__38690_38705__$1);
              node_38711.innerHTML = value_38694;
              var G__38712 = cljs.core.next.call(null, seq__38690_38705__$1);
              var G__38713 = null;
              var G__38714 = 0;
              var G__38715 = 0;
              seq__38690_38695 = G__38712;
              chunk__38691_38696 = G__38713;
              count__38692_38697 = G__38714;
              i__38693_38698 = G__38715;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e38689) {
      if (e38689 instanceof Error) {
        var e_38716 = e38689;
        domina.replace_children_BANG_.call(null, content, value_38694);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e38689;
        } else {
        }
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = bubble;
      if (cljs.core.truth_(and__3394__auto__)) {
        return value == null;
      } else {
        return and__3394__auto__;
      }
    }())) {
      var temp__4092__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4092__auto__)) {
        var parent = temp__4092__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3406__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__38723_38727 = cljs.core.seq.call(null, children);
    var chunk__38724_38728 = null;
    var count__38725_38729 = 0;
    var i__38726_38730 = 0;
    while (true) {
      if (i__38726_38730 < count__38725_38729) {
        var child_38731 = cljs.core._nth.call(null, chunk__38724_38728, i__38726_38730);
        frag.appendChild(child_38731);
        var G__38732 = seq__38723_38727;
        var G__38733 = chunk__38724_38728;
        var G__38734 = count__38725_38729;
        var G__38735 = i__38726_38730 + 1;
        seq__38723_38727 = G__38732;
        chunk__38724_38728 = G__38733;
        count__38725_38729 = G__38734;
        i__38726_38730 = G__38735;
        continue;
      } else {
        var temp__4092__auto___38736 = cljs.core.seq.call(null, seq__38723_38727);
        if (temp__4092__auto___38736) {
          var seq__38723_38737__$1 = temp__4092__auto___38736;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38723_38737__$1)) {
            var c__4148__auto___38738 = cljs.core.chunk_first.call(null, seq__38723_38737__$1);
            var G__38739 = cljs.core.chunk_rest.call(null, seq__38723_38737__$1);
            var G__38740 = c__4148__auto___38738;
            var G__38741 = cljs.core.count.call(null, c__4148__auto___38738);
            var G__38742 = 0;
            seq__38723_38727 = G__38739;
            chunk__38724_38728 = G__38740;
            count__38725_38729 = G__38741;
            i__38726_38730 = G__38742;
            continue;
          } else {
            var child_38743 = cljs.core.first.call(null, seq__38723_38737__$1);
            frag.appendChild(child_38743);
            var G__38744 = cljs.core.next.call(null, seq__38723_38737__$1);
            var G__38745 = null;
            var G__38746 = 0;
            var G__38747 = 0;
            seq__38723_38727 = G__38744;
            chunk__38724_38728 = G__38745;
            count__38725_38729 = G__38746;
            i__38726_38730 = G__38747;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__38717_SHARP_, p2__38718_SHARP_) {
      return f.call(null, p1__38717_SHARP_, p2__38718_SHARP_);
    }, cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3394__auto__ = obj;
  if (cljs.core.truth_(and__3394__auto__)) {
    var and__3394__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3394__auto____$1) {
      return obj.length;
    } else {
      return and__3394__auto____$1;
    }
  } else {
    return and__3394__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__38749 = list_thing;
      if (G__38749) {
        var bit__4050__auto__ = G__38749.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4050__auto__ || G__38749.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__38749.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38749);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38749);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
        } else {
          return null;
        }
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__38750 = content;
      if (G__38750) {
        var bit__4050__auto__ = G__38750.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4050__auto__ || G__38750.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__38750.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38750);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38750);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
        } else {
          return null;
        }
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__38751 = content;
      if (G__38751) {
        var bit__4050__auto__ = G__38751.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4050__auto__ || G__38751.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__38751.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38751);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__38751);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return content;
        } else {
          return null;
        }
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("domina.xpath");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("domina");
domina.xpath.select_node_STAR_ = function select_node_STAR_(path, node, technique_1, technique_2) {
  var doc = goog.dom.getOwnerDocument(node);
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = node.selectSingleNode;
    if (cljs.core.truth_(and__3394__auto__)) {
      return doc.setProperty;
    } else {
      return and__3394__auto__;
    }
  }())) {
    doc.setProperty("SelectionLanguage", "XPath");
    return technique_1.call(null, node, path);
  } else {
    if (cljs.core.truth_(doc.evaluate)) {
      return technique_2.call(null, null, doc, node, path);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Could not find XPath support in this browser.");
      } else {
        return null;
      }
    }
  }
};
domina.xpath.select_node = function select_node(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectSingleNode(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    return result.singleNodeValue;
  });
};
domina.xpath.select_nodes = function select_nodes(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectNodes(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    var num_results = result.snapshotLength;
    var i = 0;
    var acc = null;
    while (true) {
      if (i < num_results) {
        var G__38294 = i + 1;
        var G__38295 = cljs.core.cons.call(null, result.snapshotItem(i), acc);
        i = G__38294;
        acc = G__38295;
        continue;
      } else {
        return acc;
      }
      break;
    }
  });
};
domina.xpath.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.xpath.xpath = function() {
  var xpath = null;
  var xpath__1 = function(expr) {
    return xpath.call(null, domina.xpath.root_element.call(null), expr);
  };
  var xpath__2 = function(base, expr) {
    if (typeof domina.xpath.t38299 !== "undefined") {
    } else {
      domina.xpath.t38299 = function(expr, base, xpath, meta38300) {
        this.expr = expr;
        this.base = base;
        this.xpath = xpath;
        this.meta38300 = meta38300;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.xpath.t38299.cljs$lang$type = true;
      domina.xpath.t38299.cljs$lang$ctorStr = "domina.xpath/t38299";
      domina.xpath.t38299.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
        return cljs.core._write.call(null, writer__3969__auto__, "domina.xpath/t38299");
      };
      domina.xpath.t38299.prototype.domina$DomContent$ = true;
      domina.xpath.t38299.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, cljs.core.partial.call(null, domina.xpath.select_nodes, self__.expr), domina.nodes.call(null, self__.base));
      };
      domina.xpath.t38299.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, cljs.core.partial.call(null, domina.xpath.select_node, self__.expr), domina.nodes.call(null, self__.base))));
      };
      domina.xpath.t38299.prototype.cljs$core$IMeta$_meta$arity$1 = function(_38301) {
        var self__ = this;
        var _38301__$1 = this;
        return self__.meta38300;
      };
      domina.xpath.t38299.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_38301, meta38300__$1) {
        var self__ = this;
        var _38301__$1 = this;
        return new domina.xpath.t38299(self__.expr, self__.base, self__.xpath, meta38300__$1);
      };
      domina.xpath.__GT_t38299 = function __GT_t38299(expr__$1, base__$1, xpath__$1, meta38300) {
        return new domina.xpath.t38299(expr__$1, base__$1, xpath__$1, meta38300);
      };
    }
    return new domina.xpath.t38299(expr, base, xpath, null);
  };
  xpath = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return xpath__1.call(this, base);
      case 2:
        return xpath__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpath.cljs$core$IFn$_invoke$arity$1 = xpath__1;
  xpath.cljs$core$IFn$_invoke$arity$2 = xpath__2;
  return xpath;
}();
goog.provide("clustermap.api");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("clojure.string");
goog.require("clojure.string");
clustermap.api.GET = function() {
  var GET__delegate = function(url, p__30932) {
    var map__30934 = p__30932;
    var map__30934__$1 = cljs.core.seq_QMARK_.call(null, map__30934) ? cljs.core.apply.call(null, cljs.core.hash_map, map__30934) : map__30934;
    var raw = cljs.core.get.call(null, map__30934__$1, new cljs.core.Keyword(null, "raw", "raw", 1014016922));
    var comm = cljs.core.async.chan.call(null, 1);
    goog.net.XhrIo.send(url, function(event) {
      cljs.core.async.put_BANG_.call(null, comm, function(d) {
        if (cljs.core.truth_(raw)) {
          return d;
        } else {
          return cljs.core.js__GT_clj.call(null, d, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
        }
      }.call(null, JSON.parse.call(null, event.target.getResponseText())["data"]));
      return cljs.core.async.close_BANG_.call(null, comm);
    });
    return comm;
  };
  var GET = function(url, var_args) {
    var p__30932 = null;
    if (arguments.length > 1) {
      p__30932 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, url, p__30932);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__30935) {
    var url = cljs.core.first(arglist__30935);
    var p__30932 = cljs.core.rest(arglist__30935);
    return GET__delegate(url, p__30932);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
clustermap.api.ordered_api_results = function ordered_api_results(ocomm, handler) {
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_31068) {
        var state_val_31069 = state_31068[1];
        if (state_val_31069 === 1) {
          var state_31068__$1 = state_31068;
          var statearr_31070_31106 = state_31068__$1;
          statearr_31070_31106[2] = null;
          statearr_31070_31106[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_31069 === 2) {
            var state_31068__$1 = state_31068;
            if (true) {
              var statearr_31071_31107 = state_31068__$1;
              statearr_31071_31107[1] = 4;
            } else {
              var statearr_31072_31108 = state_31068__$1;
              statearr_31072_31108[1] = 5;
            }
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_31069 === 3) {
              var inst_31066 = state_31068[2];
              var state_31068__$1 = state_31068;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_31068__$1, inst_31066);
            } else {
              if (state_val_31069 === 4) {
                var state_31068__$1 = state_31068;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_31068__$1, 7, ocomm);
              } else {
                if (state_val_31069 === 5) {
                  var state_31068__$1 = state_31068;
                  var statearr_31073_31109 = state_31068__$1;
                  statearr_31073_31109[2] = null;
                  statearr_31073_31109[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_31069 === 6) {
                    var inst_31064 = state_31068[2];
                    var state_31068__$1 = state_31068;
                    var statearr_31074_31110 = state_31068__$1;
                    statearr_31074_31110[2] = inst_31064;
                    statearr_31074_31110[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_31069 === 7) {
                      var inst_31026 = state_31068[7];
                      var inst_31025 = state_31068[2];
                      var inst_31026__$1 = cljs.core.nth.call(null, inst_31025, 0, null);
                      var inst_31027 = cljs.core.nth.call(null, inst_31025, 1, null);
                      var inst_31028 = cljs.core.sequential_QMARK_.call(null, inst_31026__$1);
                      var state_31068__$1 = function() {
                        var statearr_31075 = state_31068;
                        statearr_31075[7] = inst_31026__$1;
                        statearr_31075[8] = inst_31027;
                        return statearr_31075;
                      }();
                      if (inst_31028) {
                        var statearr_31076_31111 = state_31068__$1;
                        statearr_31076_31111[1] = 8;
                      } else {
                        var statearr_31077_31112 = state_31068__$1;
                        statearr_31077_31112[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_31069 === 8) {
                        var inst_31026 = state_31068[7];
                        var inst_31030 = inst_31026;
                        var inst_31031 = cljs.core.PersistentVector.EMPTY;
                        var state_31068__$1 = function() {
                          var statearr_31078 = state_31068;
                          statearr_31078[9] = inst_31030;
                          statearr_31078[10] = inst_31031;
                          return statearr_31078;
                        }();
                        var statearr_31079_31113 = state_31068__$1;
                        statearr_31079_31113[2] = null;
                        statearr_31079_31113[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_31069 === 9) {
                          var inst_31026 = state_31068[7];
                          var state_31068__$1 = state_31068;
                          if (cljs.core.truth_(inst_31026)) {
                            var statearr_31080_31114 = state_31068__$1;
                            statearr_31080_31114[1] = 20;
                          } else {
                            var statearr_31081_31115 = state_31068__$1;
                            statearr_31081_31115[1] = 21;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_31069 === 10) {
                            var inst_31027 = state_31068[8];
                            var inst_31059 = state_31068[2];
                            var inst_31060 = cljs.core.apply.call(null, handler, inst_31059, inst_31027);
                            var state_31068__$1 = function() {
                              var statearr_31082 = state_31068;
                              statearr_31082[11] = inst_31060;
                              return statearr_31082;
                            }();
                            var statearr_31083_31116 = state_31068__$1;
                            statearr_31083_31116[2] = null;
                            statearr_31083_31116[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_31069 === 11) {
                              var inst_31030 = state_31068[9];
                              var inst_31033 = cljs.core.empty_QMARK_.call(null, inst_31030);
                              var state_31068__$1 = state_31068;
                              if (inst_31033) {
                                var statearr_31084_31117 = state_31068__$1;
                                statearr_31084_31117[1] = 13;
                              } else {
                                var statearr_31085_31118 = state_31068__$1;
                                statearr_31085_31118[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_31069 === 12) {
                                var inst_31050 = state_31068[2];
                                var state_31068__$1 = state_31068;
                                var statearr_31086_31119 = state_31068__$1;
                                statearr_31086_31119[2] = inst_31050;
                                statearr_31086_31119[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_31069 === 13) {
                                  var inst_31031 = state_31068[10];
                                  var state_31068__$1 = state_31068;
                                  var statearr_31087_31120 = state_31068__$1;
                                  statearr_31087_31120[2] = inst_31031;
                                  statearr_31087_31120[1] = 15;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_31069 === 14) {
                                    var inst_31030 = state_31068[9];
                                    var inst_31036 = cljs.core.rest.call(null, inst_31030);
                                    var inst_31037 = cljs.core.first.call(null, inst_31030);
                                    var state_31068__$1 = function() {
                                      var statearr_31088 = state_31068;
                                      statearr_31088[12] = inst_31036;
                                      return statearr_31088;
                                    }();
                                    if (cljs.core.truth_(inst_31037)) {
                                      var statearr_31089_31121 = state_31068__$1;
                                      statearr_31089_31121[1] = 16;
                                    } else {
                                      var statearr_31090_31122 = state_31068__$1;
                                      statearr_31090_31122[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_31069 === 15) {
                                      var inst_31048 = state_31068[2];
                                      var state_31068__$1 = state_31068;
                                      var statearr_31091_31123 = state_31068__$1;
                                      statearr_31091_31123[2] = inst_31048;
                                      statearr_31091_31123[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_31069 === 16) {
                                        var inst_31030 = state_31068[9];
                                        var inst_31039 = cljs.core.first.call(null, inst_31030);
                                        var state_31068__$1 = state_31068;
                                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_31068__$1, 19, inst_31039);
                                      } else {
                                        if (state_val_31069 === 17) {
                                          var state_31068__$1 = state_31068;
                                          var statearr_31092_31124 = state_31068__$1;
                                          statearr_31092_31124[2] = null;
                                          statearr_31092_31124[1] = 18;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_31069 === 18) {
                                            var inst_31031 = state_31068[10];
                                            var inst_31036 = state_31068[12];
                                            var inst_31044 = state_31068[2];
                                            var inst_31045 = cljs.core.conj.call(null, inst_31031, inst_31044);
                                            var inst_31030 = inst_31036;
                                            var inst_31031__$1 = inst_31045;
                                            var state_31068__$1 = function() {
                                              var statearr_31093 = state_31068;
                                              statearr_31093[9] = inst_31030;
                                              statearr_31093[10] = inst_31031__$1;
                                              return statearr_31093;
                                            }();
                                            var statearr_31094_31125 = state_31068__$1;
                                            statearr_31094_31125[2] = null;
                                            statearr_31094_31125[1] = 11;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_31069 === 19) {
                                              var inst_31041 = state_31068[2];
                                              var state_31068__$1 = state_31068;
                                              var statearr_31095_31126 = state_31068__$1;
                                              statearr_31095_31126[2] = inst_31041;
                                              statearr_31095_31126[1] = 18;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_31069 === 20) {
                                                var inst_31026 = state_31068[7];
                                                var state_31068__$1 = state_31068;
                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_31068__$1, 23, inst_31026);
                                              } else {
                                                if (state_val_31069 === 21) {
                                                  var state_31068__$1 = state_31068;
                                                  var statearr_31096_31127 = state_31068__$1;
                                                  statearr_31096_31127[2] = null;
                                                  statearr_31096_31127[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_31069 === 22) {
                                                    var inst_31057 = state_31068[2];
                                                    var state_31068__$1 = state_31068;
                                                    var statearr_31097_31128 = state_31068__$1;
                                                    statearr_31097_31128[2] = inst_31057;
                                                    statearr_31097_31128[1] = 10;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_31069 === 23) {
                                                      var inst_31054 = state_31068[2];
                                                      var state_31068__$1 = state_31068;
                                                      var statearr_31098_31129 = state_31068__$1;
                                                      statearr_31098_31129[2] = inst_31054;
                                                      statearr_31098_31129[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_31102 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_31102[0] = state_machine__5507__auto__;
            statearr_31102[1] = 1;
            return statearr_31102;
          };
          var state_machine__5507__auto____1 = function(state_31068) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_31068);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e31103) {
                  if (e31103 instanceof Object) {
                    var ex__5510__auto__ = e31103;
                    var statearr_31104_31130 = state_31068;
                    statearr_31104_31130[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_31068);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e31103;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__31131 = state_31068;
                state_31068 = G__31131;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_31068) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_31068);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_31105 = f__5522__auto__.call(null);
      statearr_31105[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_31105;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
clustermap.api.ordered_api = function ordered_api(request_handler, result_handler) {
  var ocomm = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var _ = clustermap.api.ordered_api_results.call(null, ocomm, result_handler);
  return function() {
    var G__31134__delegate = function(req_args) {
      var temp__4090__auto__ = cljs.core.apply.call(null, request_handler, req_args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var r = temp__4090__auto__;
        var rseq = cljs.core.sequential_QMARK_.call(null, r) ? r : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null);
        var vec__31133 = rseq;
        var rcomm = cljs.core.nth.call(null, vec__31133, 0, null);
        var result_handler_args = cljs.core.nthnext.call(null, vec__31133, 1);
        return cljs.core.async.put_BANG_.call(null, ocomm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rcomm, result_handler_args], null));
      } else {
        return null;
      }
    };
    var G__31134 = function(var_args) {
      var req_args = null;
      if (arguments.length > 0) {
        req_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__31134__delegate.call(this, req_args);
    };
    G__31134.cljs$lang$maxFixedArity = 0;
    G__31134.cljs$lang$applyTo = function(arglist__31135) {
      var req_args = cljs.core.seq(arglist__31135);
      return G__31134__delegate(req_args);
    };
    G__31134.cljs$core$IFn$_invoke$arity$variadic = G__31134__delegate;
    return G__31134;
  }();
};
clustermap.api.log_api = function() {
  var log_api__delegate = function(f, args) {
    var ch = cljs.core.apply.call(null, f, args);
    var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_31153) {
          var state_val_31154 = state_31153[1];
          if (state_val_31154 === 2) {
            var inst_31150 = state_31153[2];
            var inst_31151 = console.log(inst_31150);
            var state_31153__$1 = state_31153;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_31153__$1, inst_31151);
          } else {
            if (state_val_31154 === 1) {
              var state_31153__$1 = state_31153;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_31153__$1, 2, ch);
            } else {
              return null;
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_31158 = [null, null, null, null, null, null, null];
              statearr_31158[0] = state_machine__5507__auto__;
              statearr_31158[1] = 1;
              return statearr_31158;
            };
            var state_machine__5507__auto____1 = function(state_31153) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_31153);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e31159) {
                    if (e31159 instanceof Object) {
                      var ex__5510__auto__ = e31159;
                      var statearr_31160_31162 = state_31153;
                      statearr_31160_31162[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_31153);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e31159;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__31163 = state_31153;
                  state_31153 = G__31163;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_31153) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_31153);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_31161 = f__5522__auto__.call(null);
        statearr_31161[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
        return statearr_31161;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return c__5521__auto__;
  };
  var log_api = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return log_api__delegate.call(this, f, args);
  };
  log_api.cljs$lang$maxFixedArity = 1;
  log_api.cljs$lang$applyTo = function(arglist__31164) {
    var f = cljs.core.first(arglist__31164);
    var args = cljs.core.rest(arglist__31164);
    return log_api__delegate(f, args);
  };
  log_api.cljs$core$IFn$_invoke$arity$variadic = log_api__delegate;
  return log_api;
}();
clustermap.api.map_json_params = function map_json_params(m) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p__31167) {
    var vec__31168 = p__31167;
    var k = cljs.core.nth.call(null, vec__31168, 0, null);
    var v = cljs.core.nth.call(null, vec__31168, 1, null);
    return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("\x3d"), cljs.core.str(JSON.stringify(cljs.core.clj__GT_js.call(null, v)))].join("");
  }, m));
};
clustermap.api.api_prefix = config.api.prefix;
clustermap.api.boundarylines = function() {
  var boundarylines__delegate = function(id, tolerance, opts) {
    return cljs.core.apply.call(null, clustermap.api.GET, [cljs.core.str("/api/boundarylines/"), cljs.core.str(id), cljs.core.str("/"), cljs.core.str(tolerance)].join(""), opts);
  };
  var boundarylines = function(id, tolerance, var_args) {
    var opts = null;
    if (arguments.length > 2) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return boundarylines__delegate.call(this, id, tolerance, opts);
  };
  boundarylines.cljs$lang$maxFixedArity = 2;
  boundarylines.cljs$lang$applyTo = function(arglist__31169) {
    var id = cljs.core.first(arglist__31169);
    arglist__31169 = cljs.core.next(arglist__31169);
    var tolerance = cljs.core.first(arglist__31169);
    var opts = cljs.core.rest(arglist__31169);
    return boundarylines__delegate(id, tolerance, opts);
  };
  boundarylines.cljs$core$IFn$_invoke$arity$variadic = boundarylines__delegate;
  return boundarylines;
}();
clustermap.api.boundaryline_collection_index = function() {
  var boundaryline_collection_index__delegate = function(id, opts) {
    return cljs.core.apply.call(null, clustermap.api.GET, [cljs.core.str("/api/boundaryline-collection-index/"), cljs.core.str(id)].join(""), opts);
  };
  var boundaryline_collection_index = function(id, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return boundaryline_collection_index__delegate.call(this, id, opts);
  };
  boundaryline_collection_index.cljs$lang$maxFixedArity = 1;
  boundaryline_collection_index.cljs$lang$applyTo = function(arglist__31170) {
    var id = cljs.core.first(arglist__31170);
    var opts = cljs.core.rest(arglist__31170);
    return boundaryline_collection_index__delegate(id, opts);
  };
  boundaryline_collection_index.cljs$core$IFn$_invoke$arity$variadic = boundaryline_collection_index__delegate;
  return boundaryline_collection_index;
}();
clustermap.api.search = function search(q) {
  if (cljs.core.count.call(null, clojure.string.trim.call(null, q)) > 0) {
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/search?q\x3d"), cljs.core.str(q)].join(""));
  } else {
    return cljs.core.async.to_chan.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [{}], null));
  }
};
clustermap.api.constituency = function constituency(id) {
  return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/constituencies/"), cljs.core.str(id)].join(""));
};
clustermap.api.portfolio_company = function portfolio_company(id) {
  return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-companies/"), cljs.core.str(id)].join(""));
};
clustermap.api.portfolio_company_sites = function() {
  var portfolio_company_sites__delegate = function(p__31171) {
    var vec__31173 = p__31171;
    var type_ids = cljs.core.nth.call(null, vec__31173, 0, null);
    var type_ids__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "size", "size", 1017434995), 100, new cljs.core.Keyword(null, "sort", "sort", 1017440528), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "!latest_turnover", "!latest_turnover", 2344676794), "desc"], null)], null)], null), type_ids);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-company-sites?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids__$1))].join(""));
  };
  var portfolio_company_sites = function(var_args) {
    var p__31171 = null;
    if (arguments.length > 0) {
      p__31171 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return portfolio_company_sites__delegate.call(this, p__31171);
  };
  portfolio_company_sites.cljs$lang$maxFixedArity = 0;
  portfolio_company_sites.cljs$lang$applyTo = function(arglist__31174) {
    var p__31171 = cljs.core.seq(arglist__31174);
    return portfolio_company_sites__delegate(p__31171);
  };
  portfolio_company_sites.cljs$core$IFn$_invoke$arity$variadic = portfolio_company_sites__delegate;
  return portfolio_company_sites;
}();
clustermap.api.portfolio_company_sites_by_company = function() {
  var portfolio_company_sites_by_company__delegate = function(p__31175) {
    var vec__31177 = p__31175;
    var type_ids = cljs.core.nth.call(null, vec__31177, 0, null);
    var type_ids__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "size", "size", 1017434995), 100, new cljs.core.Keyword(null, "sort", "sort", 1017440528), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "!latest_turnover", "!latest_turnover", 2344676794), "desc"], null)], null)], null), type_ids);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-company-sites-by-company?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids__$1))].join(""));
  };
  var portfolio_company_sites_by_company = function(var_args) {
    var p__31175 = null;
    if (arguments.length > 0) {
      p__31175 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return portfolio_company_sites_by_company__delegate.call(this, p__31175);
  };
  portfolio_company_sites_by_company.cljs$lang$maxFixedArity = 0;
  portfolio_company_sites_by_company.cljs$lang$applyTo = function(arglist__31178) {
    var p__31175 = cljs.core.seq(arglist__31178);
    return portfolio_company_sites_by_company__delegate(p__31175);
  };
  portfolio_company_sites_by_company.cljs$core$IFn$_invoke$arity$variadic = portfolio_company_sites_by_company__delegate;
  return portfolio_company_sites_by_company;
}();
clustermap.api.portfolio_company_locations = function() {
  var portfolio_company_locations__delegate = function(p__31179) {
    var vec__31181 = p__31179;
    var type_ids = cljs.core.nth.call(null, vec__31181, 0, null);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-company-locations?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids))].join(""));
  };
  var portfolio_company_locations = function(var_args) {
    var p__31179 = null;
    if (arguments.length > 0) {
      p__31179 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return portfolio_company_locations__delegate.call(this, p__31179);
  };
  portfolio_company_locations.cljs$lang$maxFixedArity = 0;
  portfolio_company_locations.cljs$lang$applyTo = function(arglist__31182) {
    var p__31179 = cljs.core.seq(arglist__31182);
    return portfolio_company_locations__delegate(p__31179);
  };
  portfolio_company_locations.cljs$core$IFn$_invoke$arity$variadic = portfolio_company_locations__delegate;
  return portfolio_company_locations;
}();
clustermap.api.portfolio_company_site_stats = function() {
  var portfolio_company_site_stats__delegate = function(p__31183) {
    var vec__31185 = p__31183;
    var type_ids = cljs.core.nth.call(null, vec__31185, 0, null);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-company-site-stats?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids))].join(""));
  };
  var portfolio_company_site_stats = function(var_args) {
    var p__31183 = null;
    if (arguments.length > 0) {
      p__31183 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return portfolio_company_site_stats__delegate.call(this, p__31183);
  };
  portfolio_company_site_stats.cljs$lang$maxFixedArity = 0;
  portfolio_company_site_stats.cljs$lang$applyTo = function(arglist__31186) {
    var p__31183 = cljs.core.seq(arglist__31186);
    return portfolio_company_site_stats__delegate(p__31183);
  };
  portfolio_company_site_stats.cljs$core$IFn$_invoke$arity$variadic = portfolio_company_site_stats__delegate;
  return portfolio_company_site_stats;
}();
clustermap.api.portfolio_company_site_account_timelines = function() {
  var portfolio_company_site_account_timelines__delegate = function(p__31187) {
    var vec__31189 = p__31187;
    var type_ids = cljs.core.nth.call(null, vec__31189, 0, null);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/portfolio-company-site-account-timelines?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids))].join(""));
  };
  var portfolio_company_site_account_timelines = function(var_args) {
    var p__31187 = null;
    if (arguments.length > 0) {
      p__31187 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return portfolio_company_site_account_timelines__delegate.call(this, p__31187);
  };
  portfolio_company_site_account_timelines.cljs$lang$maxFixedArity = 0;
  portfolio_company_site_account_timelines.cljs$lang$applyTo = function(arglist__31190) {
    var p__31187 = cljs.core.seq(arglist__31190);
    return portfolio_company_site_account_timelines__delegate(p__31187);
  };
  portfolio_company_site_account_timelines.cljs$core$IFn$_invoke$arity$variadic = portfolio_company_site_account_timelines__delegate;
  return portfolio_company_site_account_timelines;
}();
clustermap.api.investor_company = function investor_company(id) {
  return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/investor-companies/"), cljs.core.str(id)].join(""));
};
clustermap.api.investment_account_timelines = function() {
  var investment_account_timelines__delegate = function(p__31191) {
    var vec__31193 = p__31191;
    var type_ids = cljs.core.nth.call(null, vec__31193, 0, null);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/investment-account-timelines?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids))].join(""));
  };
  var investment_account_timelines = function(var_args) {
    var p__31191 = null;
    if (arguments.length > 0) {
      p__31191 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return investment_account_timelines__delegate.call(this, p__31191);
  };
  investment_account_timelines.cljs$lang$maxFixedArity = 0;
  investment_account_timelines.cljs$lang$applyTo = function(arglist__31194) {
    var p__31191 = cljs.core.seq(arglist__31194);
    return investment_account_timelines__delegate(p__31191);
  };
  investment_account_timelines.cljs$core$IFn$_invoke$arity$variadic = investment_account_timelines__delegate;
  return investment_account_timelines;
}();
clustermap.api.investment_stats = function() {
  var investment_stats__delegate = function(p__31195) {
    var vec__31197 = p__31195;
    var type_ids = cljs.core.nth.call(null, vec__31197, 0, null);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/investment-stats?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids))].join(""));
  };
  var investment_stats = function(var_args) {
    var p__31195 = null;
    if (arguments.length > 0) {
      p__31195 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return investment_stats__delegate.call(this, p__31195);
  };
  investment_stats.cljs$lang$maxFixedArity = 0;
  investment_stats.cljs$lang$applyTo = function(arglist__31198) {
    var p__31195 = cljs.core.seq(arglist__31198);
    return investment_stats__delegate(p__31195);
  };
  investment_stats.cljs$core$IFn$_invoke$arity$variadic = investment_stats__delegate;
  return investment_stats;
}();
clustermap.api.investment_aggs = function() {
  var investment_aggs__delegate = function(p__31199) {
    var vec__31201 = p__31199;
    var type_ids = cljs.core.nth.call(null, vec__31201, 0, null);
    var type_ids__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "size", "size", 1017434995), 50, new cljs.core.Keyword(null, "order", "order", 1119910592), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "latest_turnover", "latest_turnover", 2012435451), "desc"], null)], null)], null), type_ids);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/investment-aggs?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids__$1))].join(""));
  };
  var investment_aggs = function(var_args) {
    var p__31199 = null;
    if (arguments.length > 0) {
      p__31199 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return investment_aggs__delegate.call(this, p__31199);
  };
  investment_aggs.cljs$lang$maxFixedArity = 0;
  investment_aggs.cljs$lang$applyTo = function(arglist__31202) {
    var p__31199 = cljs.core.seq(arglist__31202);
    return investment_aggs__delegate(p__31199);
  };
  investment_aggs.cljs$core$IFn$_invoke$arity$variadic = investment_aggs__delegate;
  return investment_aggs;
}();
clustermap.api.investments = function() {
  var investments__delegate = function(p__31203) {
    var vec__31205 = p__31203;
    var type_ids = cljs.core.nth.call(null, vec__31205, 0, null);
    var type_ids__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "size", "size", 1017434995), 50], null), type_ids);
    return clustermap.api.GET.call(null, [cljs.core.str("/api/"), cljs.core.str(clustermap.api.api_prefix), cljs.core.str("/investments?"), cljs.core.str(clustermap.api.map_json_params.call(null, type_ids__$1))].join(""));
  };
  var investments = function(var_args) {
    var p__31203 = null;
    if (arguments.length > 0) {
      p__31203 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return investments__delegate.call(this, p__31203);
  };
  investments.cljs$lang$maxFixedArity = 0;
  investments.cljs$lang$applyTo = function(arglist__31206) {
    var p__31203 = cljs.core.seq(arglist__31206);
    return investments__delegate(p__31203);
  };
  investments.cljs$core$IFn$_invoke$arity$variadic = investments__delegate;
  return investments;
}();
goog.provide("clustermap.boundarylines");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clustermap.api");
goog.require("clustermap.api");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
clustermap.boundarylines.zoom_tolerances = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [7, 0.01], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [9, 0.002], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [12, 3E-4], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, 0], null)], null);
clustermap.boundarylines.ideal_tolerance = function ideal_tolerance(zoom) {
  var or__3406__auto__ = cljs.core.some.call(null, function(p__32889) {
    var vec__32890 = p__32889;
    var z = cljs.core.nth.call(null, vec__32890, 0, null);
    var t = cljs.core.nth.call(null, vec__32890, 1, null);
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = z;
      if (cljs.core.truth_(and__3394__auto__)) {
        return zoom <= z;
      } else {
        return and__3394__auto__;
      }
    }())) {
      return t;
    } else {
      return null;
    }
  }, clustermap.boundarylines.zoom_tolerances);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return 0;
  }
};
clustermap.boundarylines.best_available_tolerance = function best_available_tolerance(zoom, available_tolerances) {
  var i_tol = clustermap.boundarylines.ideal_tolerance.call(null, zoom);
  var coarser = cljs.core.reverse.call(null, cljs.core.filter.call(null, function(i_tol) {
    return function(t) {
      return t > i_tol;
    };
  }(i_tol), cljs.core.map.call(null, cljs.core.last, clustermap.boundarylines.zoom_tolerances)));
  var finer = cljs.core.filter.call(null, function(i_tol, coarser) {
    return function(t) {
      return t < i_tol;
    };
  }(i_tol, coarser), cljs.core.map.call(null, cljs.core.last, clustermap.boundarylines.zoom_tolerances));
  var avail_set = cljs.core.set.call(null, available_tolerances);
  var or__3406__auto__ = cljs.core.get.call(null, avail_set, i_tol);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    var or__3406__auto____$1 = cljs.core.some.call(null, avail_set, finer);
    if (cljs.core.truth_(or__3406__auto____$1)) {
      return or__3406__auto____$1;
    } else {
      return cljs.core.some.call(null, avail_set, coarser);
    }
  }
};
clustermap.boundarylines.fetch_boundaryline = function fetch_boundaryline(app_state, korks, boundaryline_id, tolerance) {
  var comm = clustermap.api.boundarylines.call(null, boundaryline_id, tolerance, new cljs.core.Keyword(null, "raw", "raw", 1014016922), true);
  var use_korks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var path = cljs.core.concat.call(null, use_korks, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [boundaryline_id, tolerance], null));
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_32910) {
        var state_val_32911 = state_32910[1];
        if (state_val_32911 === 2) {
          var inst_32906 = state_32910[2];
          var inst_32907 = function() {
            var bl = inst_32906;
            return function(bl, inst_32906, state_val_32911) {
              return function(old) {
                return bl;
              };
            }(bl, inst_32906, state_val_32911);
          }();
          var inst_32908 = cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, path, inst_32907);
          var state_32910__$1 = state_32910;
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_32910__$1, inst_32908);
        } else {
          if (state_val_32911 === 1) {
            var state_32910__$1 = state_32910;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32910__$1, 2, comm);
          } else {
            return null;
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_32915 = [null, null, null, null, null, null, null];
            statearr_32915[0] = state_machine__5507__auto__;
            statearr_32915[1] = 1;
            return statearr_32915;
          };
          var state_machine__5507__auto____1 = function(state_32910) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_32910);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e32916) {
                  if (e32916 instanceof Object) {
                    var ex__5510__auto__ = e32916;
                    var statearr_32917_32919 = state_32910;
                    statearr_32917_32919[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_32910);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e32916;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__32920 = state_32910;
                state_32910 = G__32920;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_32910) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_32910);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_32918 = f__5522__auto__.call(null);
      statearr_32918[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_32918;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
clustermap.boundarylines.get_or_fetch_best_boundaryline = function() {
  var get_or_fetch_best_boundaryline__delegate = function(app_state, korks, boundaryline_id, zoom, p__32921) {
    var map__32923 = p__32921;
    var map__32923__$1 = cljs.core.seq_QMARK_.call(null, map__32923) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32923) : map__32923;
    var min_zoom = cljs.core.get.call(null, map__32923__$1, new cljs.core.Keyword(null, "min-zoom", "min-zoom", 3894785504));
    if (cljs.core.truth_(function() {
      var and__3394__auto__ = min_zoom;
      if (cljs.core.truth_(and__3394__auto__)) {
        return zoom <= min_zoom;
      } else {
        return and__3394__auto__;
      }
    }())) {
      return null;
    } else {
      var use_korks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
      var boundarylines = cljs.core.get_in.call(null, cljs.core.deref.call(null, app_state), use_korks);
      var bl_versions = cljs.core.get.call(null, boundarylines, boundaryline_id);
      var i_tol = clustermap.boundarylines.ideal_tolerance.call(null, zoom);
      var use_tol = clustermap.boundarylines.best_available_tolerance.call(null, zoom, cljs.core.keys.call(null, bl_versions));
      var use_bl = cljs.core.get_in.call(null, boundarylines, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [boundaryline_id, use_tol], null));
      if (cljs.core.not_EQ_.call(null, i_tol, use_tol)) {
        clustermap.boundarylines.fetch_boundaryline.call(null, app_state, korks, boundaryline_id, i_tol);
      } else {
      }
      if (cljs.core.truth_(use_bl)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [use_tol, use_bl], null);
      } else {
        return null;
      }
    }
  };
  var get_or_fetch_best_boundaryline = function(app_state, korks, boundaryline_id, zoom, var_args) {
    var p__32921 = null;
    if (arguments.length > 4) {
      p__32921 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return get_or_fetch_best_boundaryline__delegate.call(this, app_state, korks, boundaryline_id, zoom, p__32921);
  };
  get_or_fetch_best_boundaryline.cljs$lang$maxFixedArity = 4;
  get_or_fetch_best_boundaryline.cljs$lang$applyTo = function(arglist__32924) {
    var app_state = cljs.core.first(arglist__32924);
    arglist__32924 = cljs.core.next(arglist__32924);
    var korks = cljs.core.first(arglist__32924);
    arglist__32924 = cljs.core.next(arglist__32924);
    var boundaryline_id = cljs.core.first(arglist__32924);
    arglist__32924 = cljs.core.next(arglist__32924);
    var zoom = cljs.core.first(arglist__32924);
    var p__32921 = cljs.core.rest(arglist__32924);
    return get_or_fetch_best_boundaryline__delegate(app_state, korks, boundaryline_id, zoom, p__32921);
  };
  get_or_fetch_best_boundaryline.cljs$core$IFn$_invoke$arity$variadic = get_or_fetch_best_boundaryline__delegate;
  return get_or_fetch_best_boundaryline;
}();
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.json");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.base(this);
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.debug.Logger.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  this.logger.warning('Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      this.logger.warning("Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
goog.require("goog.events");
clojure.browser.event.EventType = function() {
  var obj38289 = {};
  return obj38289;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.clojure$browser$event$EventType$event_types$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.clojure$browser$event$EventType$event_types$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
Element.prototype.clojure$browser$event$EventType$ = true;
Element.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__38290) {
    var vec__38291 = p__38290;
    var k = cljs.core.nth.call(null, vec__38291, 0, null);
    var v = cljs.core.nth.call(null, vec__38291, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
goog.events.EventTarget.prototype.clojure$browser$event$EventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__38292) {
    var vec__38293 = p__38292;
    var k = cljs.core.nth.call(null, vec__38293, 0, null);
    var v = cljs.core.nth.call(null, vec__38293, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && (!this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_)) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.net.xpc.logger.fine("error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.net.xpc.logger.fine("transport connect called");
  if (!this.initialized_) {
    goog.net.xpc.logger.fine("initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.net.xpc.logger.finest("constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.net.xpc.logger.finest("Inner peer reconnect triggered.");
  this.channel_.name = goog.net.xpc.getRandomString(10);
  goog.net.xpc.logger.finest("switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && (message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect")) {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.net.xpc.logger.finest("deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.net.xpc.logger.finest("foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.net.xpc.logger.fine("foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.net.xpc.logger.finest("checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.net.xpc.logger.fine("local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.net.xpc.logger.fine("local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.net.xpc.logger.fine("SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.net.xpc.logger.fine("delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.net.xpc.logger.finest("checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.net.xpc.logger.finest("msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.net.xpc.logger.finest("SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.net.xpc.logger.warning("received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.net.xpc.logger.finest("ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.net.xpc.logger.warning("got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.net.xpc.logger.warning("got ack with wrong sequence");
      }
    } else {
      goog.net.xpc.logger.warning("received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.net.xpc.logger.finest("msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.net.xpc.logger.finest("queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.net.xpc.logger.info("receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.net.xpc.logger.fine("starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.net.xpc.logger.severe("sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.net.xpc.logger.finest("iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    div.innerHTML = '\x3ciframe onload\x3d"this.xpcOnload()"\x3e\x3c/iframe\x3e';
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.net.xpc.logger.finest("msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.net.xpc.logger.finest("iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.net.xpc.logger.info("NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.net.xpc.logger.fine("messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && (!staleChannel.isConnected() && (service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)))) {
      goog.net.xpc.logger.fine("changing channel name to " + channelName);
      staleChannel.name = channelName;
      delete goog.net.xpc.channels[staleChannelName];
      goog.net.xpc.channels[channelName] = staleChannel;
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.net.xpc.logger.info('channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.net.xpc.logger.info("Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && (this.couldPeerVersionBe_(2) && protocolVersion == 2)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || (this.channel_.isConnected() || this.isDisposed())) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.net.xpc.logger.fine("send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.net.xpc.logger.warning("Peer window had no postMessage " + "function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.net.xpc.logger.fine("send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.net.xpc.logger.warning("Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.net.xpc.logger.severe("Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.net.xpc.logger.severe("Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.net.xpc.logger.severe("Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.net.xpc.logger.severe("NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Disposable");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.json");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.base(this);
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  goog.events.listen(window, "unload", goog.net.xpc.CrossPageChannel.disposeAll_);
  goog.net.xpc.logger.info("CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || (goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage)) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  if (!this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    this.cfg_[goog.net.xpc.CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[goog.net.xpc.CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
  }
  if (this.transport_) {
    goog.net.xpc.logger.info("Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.net.xpc.logger.info("createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnce(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.net.xpc.logger.info("continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.net.xpc.logger.info('Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.net.xpc.logger.info('Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (opt_delay) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.net.xpc.logger.info("Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.net.xpc.logger.severe("Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.net.xpc.logger.severe("Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.net.xpc.logger.warning('Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.net.xpc.logger.warning("CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.net.xpc.logger.info("CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || (goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME]);
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("clojure.browser.event");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("clojure.browser.event");
goog.require("goog.net.EventType");
goog.require("goog.net.EventType");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.json");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CfgFields");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__38268) {
  var vec__38269 = p__38268;
  var k = cljs.core.nth.call(null, vec__38269, 0, null);
  var v = cljs.core.nth.call(null, vec__38269, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj38271 = {};
  return obj38271;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.connect[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.connect[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.connect[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.connect[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__3394__auto__ = this$;
    if (and__3394__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4027__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3406__auto__ = clojure.browser.net.close[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = clojure.browser.net.close["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$EventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__38272) {
    var vec__38273 = p__38272;
    var k = cljs.core.nth.call(null, vec__38273, 0, null);
    var v = cljs.core.nth.call(null, vec__38273, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__38274) {
  var vec__38275 = p__38274;
  var k = cljs.core.nth.call(null, vec__38275, 0, null);
  var v = cljs.core.nth.call(null, vec__38275, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj38277 = {};
  return obj38277;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__3394__auto__ = this$;
      if (and__3394__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__3394__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4027__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3406__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4027__auto__)];
        if (or__3406__auto__) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3406__auto____$1) {
            return or__3406__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4092__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4092__auto__)) {
      var config = temp__4092__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__38283) {
      var vec__38284 = p__38283;
      var k = cljs.core.nth.call(null, vec__38284, 0, null);
      var v = cljs.core.nth.call(null, vec__38284, 1, null);
      var temp__4090__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var field = temp__4090__auto__;
        var G__38285 = sum;
        G__38285[field] = v;
        return G__38285;
      } else {
        return sum;
      }
    }, function() {
      var obj38287 = {};
      return obj38287;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__4090__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var conn = temp__4090__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1120839199), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "success", "success", 3441701749), new cljs.core.Keyword(null, "value", "value", 1125876963), [cljs.core.str(eval(block))].join("")], null);
    } catch (e38267) {
      if (e38267 instanceof Error) {
        var e = e38267;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "exception", "exception", 2495529921), new cljs.core.Keyword(null, "value", "value", 1125876963), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", 3069736751), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e38267;
        } else {
          return null;
        }
      }
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0);
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", 1110689146), function(_) {
      if (n < 10) {
        return send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    });
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$core$IFn$_invoke$arity$2 = send_print__2;
  send_print.cljs$core$IFn$_invoke$arity$3 = send_print__3;
  return send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), t, new cljs.core.Keyword(null, "content", "content", 1965434859), data, new cljs.core.Keyword(null, "order", "order", 1119910592), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__4090__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var repl_connection = temp__4090__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 3441701749), function(e) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), function(data) {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 4374444943), data));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1120839199), function(data) {
      return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1120839199), data));
    });
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function() {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1122290965), "ready"));
    }, 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 1083496577), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), function(js) {
    return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
  });
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(iframe) {
    return iframe.style.display = "none";
  });
};
goog.provide("clustermap.routes");
goog.require("cljs.core");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("sablono.core");
clustermap.routes.type_name_keys = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), new cljs.core.Keyword(null, "compact_name", "compact_name", 1128032665)], 
null);
clustermap.routes.name_for = function name_for(type, obj) {
  return cljs.core.get.call(null, obj, cljs.core.get.call(null, clustermap.routes.type_name_keys, type));
};
clustermap.routes.portfolio_company_path = function portfolio_company_path(app_state, obj) {
  return[cljs.core.str("#/"), cljs.core.str(function() {
    var G__33801 = app_state;
    var G__33801__$1 = G__33801 == null ? null : cljs.core.deref.call(null, G__33801);
    var G__33801__$2 = G__33801__$1 == null ? null : (new cljs.core.Keyword(null, "view", "view", 1017523735)).cljs$core$IFn$_invoke$arity$1(G__33801__$1);
    var G__33801__$3 = G__33801__$2 == null ? null : cljs.core.name.call(null, G__33801__$2);
    return G__33801__$3;
  }()), cljs.core.str("/portfolio-company/"), cljs.core.str((new cljs.core.Keyword(null, "company_no", "company_no", 4461198389)).cljs$core$IFn$_invoke$arity$1(obj))].join("");
};
clustermap.routes.investor_company_path = function investor_company_path(app_state, obj) {
  return[cljs.core.str("#/"), cljs.core.str(function() {
    var G__33803 = app_state;
    var G__33803__$1 = G__33803 == null ? null : cljs.core.deref.call(null, G__33803);
    var G__33803__$2 = G__33803__$1 == null ? null : (new cljs.core.Keyword(null, "view", "view", 1017523735)).cljs$core$IFn$_invoke$arity$1(G__33803__$1);
    var G__33803__$3 = G__33803__$2 == null ? null : cljs.core.name.call(null, G__33803__$2);
    return G__33803__$3;
  }()), cljs.core.str("/investor-company/"), cljs.core.str((new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)).cljs$core$IFn$_invoke$arity$1(obj))].join("");
};
clustermap.routes.constituency_path = function constituency_path(app_state, obj) {
  return[cljs.core.str("#/"), cljs.core.str(function() {
    var G__33805 = app_state;
    var G__33805__$1 = G__33805 == null ? null : cljs.core.deref.call(null, G__33805);
    var G__33805__$2 = G__33805__$1 == null ? null : (new cljs.core.Keyword(null, "view", "view", 1017523735)).cljs$core$IFn$_invoke$arity$1(G__33805__$1);
    var G__33805__$3 = G__33805__$2 == null ? null : cljs.core.name.call(null, G__33805__$2);
    return G__33805__$3;
  }()), cljs.core.str("/constituency/"), cljs.core.str((new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318)).cljs$core$IFn$_invoke$arity$1(obj))].join("");
};
clustermap.routes.no_selection_path = function no_selection_path(app_state, _) {
  return[cljs.core.str("#/"), cljs.core.str(function() {
    var G__33807 = app_state;
    var G__33807__$1 = G__33807 == null ? null : cljs.core.deref.call(null, G__33807);
    var G__33807__$2 = G__33807__$1 == null ? null : (new cljs.core.Keyword(null, "view", "view", 1017523735)).cljs$core$IFn$_invoke$arity$1(G__33807__$1);
    var G__33807__$3 = G__33807__$2 == null ? null : cljs.core.name.call(null, G__33807__$2);
    return G__33807__$3;
  }())].join("");
};
clustermap.routes.type_paths = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), clustermap.routes.portfolio_company_path, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), clustermap.routes.investor_company_path, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), clustermap.routes.constituency_path, null, clustermap.routes.no_selection_path], null);
clustermap.routes.path_for = function path_for(app_state, type, obj) {
  return cljs.core.apply.call(null, cljs.core.get.call(null, clustermap.routes.type_paths, type), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [app_state, obj], null));
};
clustermap.routes.link_for = function link_for(app_state, type, obj) {
  return React.DOM.a({"href":clustermap.routes.path_for.call(null, app_state, type, obj)}, sablono.interpreter.interpret.call(null, clustermap.routes.name_for.call(null, type, obj)));
};
goog.provide("secretary.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
secretary.core._STAR_config_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", 4328760836), ""], null));
secretary.core._STAR_routes_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
secretary.core.slash = /\//;
secretary.core.get_config = function get_config(path) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, secretary.core._STAR_config_STAR_), path__$1);
};
secretary.core.set_config_BANG_ = function set_config_BANG_(path, val) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_config_STAR_, cljs.core.assoc_in, path__$1, val);
};
secretary.core.param_QMARK_ = function param_QMARK_(r) {
  return cljs.core._EQ_.call(null, cljs.core.first.call(null, r), ":");
};
secretary.core.component_matches_QMARK_ = function component_matches_QMARK_(r, u) {
  return secretary.core.param_QMARK_.call(null, r) || cljs.core._EQ_.call(null, r, u);
};
secretary.core.extract_component = function extract_component(r, u) {
  if (secretary.core.param_QMARK_.call(null, r)) {
    return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, cljs.core.subs.call(null, r, 1)), u], true, false);
  } else {
    return null;
  }
};
secretary.core.exact_match_QMARK_ = function exact_match_QMARK_(r, u) {
  return cljs.core._EQ_.call(null, r, u);
};
secretary.core.route_matches_QMARK_ = function route_matches_QMARK_(route, uri_path) {
  var r = clojure.string.split.call(null, route, secretary.core.slash);
  var u = clojure.string.split.call(null, uri_path, secretary.core.slash);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, r), cljs.core.count.call(null, u))) {
    return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.map.call(null, function(p1__37534_SHARP_, p2__37535_SHARP_) {
      return secretary.core.component_matches_QMARK_.call(null, p1__37534_SHARP_, p2__37535_SHARP_);
    }, r, u));
  } else {
    return null;
  }
};
secretary.core.filter_routes = function filter_routes(pred, uri_path) {
  return cljs.core.filter.call(null, function(p1__37536_SHARP_) {
    return pred.call(null, cljs.core.first.call(null, p1__37536_SHARP_), uri_path);
  }, cljs.core.deref.call(null, secretary.core._STAR_routes_STAR_));
};
secretary.core.encode_query_params = function encode_query_params(query_params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p__37539) {
    var vec__37540 = p__37539;
    var k = cljs.core.nth.call(null, vec__37540, 0, null);
    var v = cljs.core.nth.call(null, vec__37540, 1, null);
    return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("\x3d"), cljs.core.str(encodeURIComponent([cljs.core.str(v)].join("")))].join("");
  }, query_params));
};
secretary.core.decode_query_params = function decode_query_params(query_string) {
  return cljs.core.reduce.call(null, function(m, param) {
    var vec__37542 = clojure.string.split.call(null, param, /=/, 2);
    var k = cljs.core.nth.call(null, vec__37542, 0, null);
    var v = cljs.core.nth.call(null, vec__37542, 1, null);
    var v__$1 = decodeURIComponent(v);
    return cljs.core.assoc.call(null, m, k, v__$1);
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, query_string, /&/));
};
secretary.core.parse_query_params = secretary.core.decode_query_params;
secretary.core.extract_components = function extract_components(route, uri_path) {
  if (cljs.core.truth_(secretary.core.route_matches_QMARK_.call(null, route, uri_path))) {
    return cljs.core.apply.call(null, cljs.core.merge, function() {
      var iter__4117__auto__ = function iter__37547(s__37548) {
        return new cljs.core.LazySeq(null, function() {
          var s__37548__$1 = s__37548;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__37548__$1);
            if (temp__4092__auto__) {
              var s__37548__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__37548__$2)) {
                var c__4115__auto__ = cljs.core.chunk_first.call(null, s__37548__$2);
                var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
                var b__37550 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
                if (function() {
                  var i__37549 = 0;
                  while (true) {
                    if (i__37549 < size__4116__auto__) {
                      var z = cljs.core._nth.call(null, c__4115__auto__, i__37549);
                      var c = cljs.core.apply.call(null, secretary.core.extract_component, z);
                      if (!(c == null)) {
                        cljs.core.chunk_append.call(null, b__37550, c);
                        var G__37551 = i__37549 + 1;
                        i__37549 = G__37551;
                        continue;
                      } else {
                        var G__37552 = i__37549 + 1;
                        i__37549 = G__37552;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37550), iter__37547.call(null, cljs.core.chunk_rest.call(null, s__37548__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37550), null);
                }
              } else {
                var z = cljs.core.first.call(null, s__37548__$2);
                var c = cljs.core.apply.call(null, secretary.core.extract_component, z);
                if (!(c == null)) {
                  return cljs.core.cons.call(null, c, iter__37547.call(null, cljs.core.rest.call(null, s__37548__$2)));
                } else {
                  var G__37553 = cljs.core.rest.call(null, s__37548__$2);
                  s__37548__$1 = G__37553;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4117__auto__.call(null, cljs.core.zipmap.call(null, clojure.string.split.call(null, route, secretary.core.slash), clojure.string.split.call(null, uri_path, secretary.core.slash)));
    }());
  } else {
    return null;
  }
};
secretary.core.parse_action = function parse_action(uri_path) {
  var temp__4090__auto__ = cljs.core.first.call(null, secretary.core.filter_routes.call(null, secretary.core.exact_match_QMARK_, uri_path));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__37556 = temp__4090__auto__;
    var route = cljs.core.nth.call(null, vec__37556, 0, null);
    var action = cljs.core.nth.call(null, vec__37556, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [action, cljs.core.PersistentArrayMap.EMPTY], null);
  } else {
    var temp__4092__auto__ = cljs.core.seq.call(null, secretary.core.filter_routes.call(null, secretary.core.route_matches_QMARK_, uri_path));
    if (temp__4092__auto__) {
      var xs__4579__auto__ = temp__4092__auto__;
      var vec__37557 = cljs.core.first.call(null, xs__4579__auto__);
      var route = cljs.core.nth.call(null, vec__37557, 0, null);
      var action = cljs.core.nth.call(null, vec__37557, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [action, secretary.core.extract_components.call(null, route, uri_path)], null);
    } else {
      return null;
    }
  }
};
secretary.core.dispatch_BANG_ = function dispatch_BANG_(uri) {
  var vec__37560 = clojure.string.split.call(null, uri, /\?/);
  var uri_path = cljs.core.nth.call(null, vec__37560, 0, null);
  var query_string = cljs.core.nth.call(null, vec__37560, 1, null);
  var query_params = cljs.core.truth_(query_string) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query-params", "query-params", 1080249757), secretary.core.decode_query_params.call(null, query_string)], null) : null;
  var vec__37561 = secretary.core.parse_action.call(null, uri_path);
  var action = cljs.core.nth.call(null, vec__37561, 0, null);
  var params = cljs.core.nth.call(null, vec__37561, 1, null);
  var action__$1 = function() {
    var or__3406__auto__ = action;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var params__$1 = cljs.core.merge.call(null, params, query_params);
  return action__$1.call(null, params__$1);
};
secretary.core.render_route = function() {
  var render_route = null;
  var render_route__1 = function(route) {
    return render_route.call(null, route, cljs.core.PersistentArrayMap.EMPTY);
  };
  var render_route__2 = function(route, p__37562) {
    var map__37564 = p__37562;
    var map__37564__$1 = cljs.core.seq_QMARK_.call(null, map__37564) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37564) : map__37564;
    var m = map__37564__$1;
    var query_params = cljs.core.get.call(null, map__37564__$1, new cljs.core.Keyword(null, "query-params", "query-params", 1080249757));
    var path = route.replace(new RegExp(":[^/]+", "g"), function($1) {
      var lookup = cljs.core.keyword.call(null, cljs.core.subs.call(null, $1, 1));
      return m.call(null, lookup, $1);
    });
    var path__$1 = [cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", 4328760836)], null))), cljs.core.str(path)].join("");
    var temp__4090__auto__ = function() {
      var and__3394__auto__ = query_params;
      if (cljs.core.truth_(and__3394__auto__)) {
        return secretary.core.encode_query_params.call(null, query_params);
      } else {
        return and__3394__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var query_string = temp__4090__auto__;
      return[cljs.core.str(path__$1), cljs.core.str("?"), cljs.core.str(query_string)].join("");
    } else {
      return path__$1;
    }
  };
  var render_route__3 = function(route, params, opts) {
    return render_route.call(null, route, cljs.core.merge.call(null, params, opts));
  };
  render_route = function(route, params, opts) {
    switch(arguments.length) {
      case 1:
        return render_route__1.call(this, route);
      case 2:
        return render_route__2.call(this, route, params);
      case 3:
        return render_route__3.call(this, route, params, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render_route.cljs$core$IFn$_invoke$arity$1 = render_route__1;
  render_route.cljs$core$IFn$_invoke$arity$2 = render_route__2;
  render_route.cljs$core$IFn$_invoke$arity$3 = render_route__3;
  return render_route;
}();
goog.provide("clustermap.model");
goog.require("cljs.core");
clustermap.model.extract_id = function extract_id(type, obj) {
  var pred__33734 = cljs.core._EQ_;
  var expr__33735 = type;
  if (cljs.core.truth_(pred__33734.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), expr__33735))) {
    return(new cljs.core.Keyword(null, "company_no", "company_no", 4461198389)).cljs$core$IFn$_invoke$arity$1(obj);
  } else {
    if (cljs.core.truth_(pred__33734.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), expr__33735))) {
      return(new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)).cljs$core$IFn$_invoke$arity$1(obj);
    } else {
      if (cljs.core.truth_(pred__33734.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), expr__33735))) {
        return(new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318)).cljs$core$IFn$_invoke$arity$1(obj);
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__33735)].join(""));
      }
    }
  }
};
goog.provide("clustermap.components.search");
goog.require("cljs.core");
goog.require("sablono.core");
goog.require("cljs.core.async");
goog.require("jayq.core");
goog.require("clustermap.routes");
goog.require("sablono.core");
goog.require("clustermap.routes");
goog.require("clustermap.om");
goog.require("clustermap.model");
goog.require("om.dom");
goog.require("om.core");
goog.require("clustermap.model");
goog.require("om.core");
goog.require("jayq.core");
goog.require("om.dom");
goog.require("clustermap.om");
goog.require("cljs.core.async");
goog.require("jayq.core");
clustermap.components.search.ESCAPE_KEY = 27;
clustermap.components.search.ENTER_KEY = 13;
clustermap.components.search.LEFT_ARROW = 37;
clustermap.components.search.UP_ARROW = 38;
clustermap.components.search.RIGHT_ARROW = 39;
clustermap.components.search.DOWN_ARROW = 40;
clustermap.components.search.search_result_link = function search_result_link(p__33558, owner, p__33559) {
  var map__33568 = p__33558;
  var map__33568__$1 = cljs.core.seq_QMARK_.call(null, map__33568) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33568) : map__33568;
  var search_result = map__33568__$1;
  var type = cljs.core.get.call(null, map__33568__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  var name = cljs.core.get.call(null, map__33568__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  var map__33569 = p__33559;
  var map__33569__$1 = cljs.core.seq_QMARK_.call(null, map__33569) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33569) : map__33569;
  var opts = map__33569__$1;
  var path_fn = cljs.core.get.call(null, map__33569__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
  var comm = cljs.core.get.call(null, map__33569__$1, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
  if (typeof clustermap.components.search.t33570 !== "undefined") {
  } else {
    clustermap.components.search.t33570 = function(opts, map__33568, path_fn, name, comm, search_result, owner, p__33559, p__33558, map__33569, type, search_result_link, meta33571) {
      this.opts = opts;
      this.map__33568 = map__33568;
      this.path_fn = path_fn;
      this.name = name;
      this.comm = comm;
      this.search_result = search_result;
      this.owner = owner;
      this.p__33559 = p__33559;
      this.p__33558 = p__33558;
      this.map__33569 = map__33569;
      this.type = type;
      this.search_result_link = search_result_link;
      this.meta33571 = meta33571;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.search.t33570.cljs$lang$type = true;
    clustermap.components.search.t33570.cljs$lang$ctorStr = "clustermap.components.search/t33570";
    clustermap.components.search.t33570.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.search/t33570");
    };
    clustermap.components.search.t33570.prototype.om$core$IRenderState$ = true;
    clustermap.components.search.t33570.prototype.om$core$IRenderState$render_state$arity$2 = function(this$, p__33573) {
      var self__ = this;
      var map__33574 = p__33573;
      var map__33574__$1 = cljs.core.seq_QMARK_.call(null, map__33574) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33574) : map__33574;
      var state = map__33574__$1;
      var selected = cljs.core.get.call(null, map__33574__$1, new cljs.core.Keyword(null, "selected", "selected", 2205476365));
      var this$__$1 = this;
      var path = self__.path_fn.call(null, self__.type, self__.search_result);
      return React.DOM.li({"className":cljs.core.truth_(selected) ? "selected" : null}, React.DOM.a({"href":path, "ref":"link", "onClick":function(e) {
        var l = om.core.get_node.call(null, self__.owner, "link");
        var G__33575 = l;
        var G__33575__$1 = G__33575 == null ? null : jayq.core.$.call(null, G__33575);
        var G__33575__$2 = G__33575__$1 == null ? null : G__33575__$1.parents(".search-component");
        var G__33575__$3 = G__33575__$2 == null ? null : G__33575__$2.toggle();
        return G__33575__$3;
      }}, sablono.interpreter.interpret.call(null, self__.name), cljs.core.truth_(selected) ? "*" : null));
    };
    clustermap.components.search.t33570.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33572) {
      var self__ = this;
      var _33572__$1 = this;
      return self__.meta33571;
    };
    clustermap.components.search.t33570.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33572, meta33571__$1) {
      var self__ = this;
      var _33572__$1 = this;
      return new clustermap.components.search.t33570(self__.opts, self__.map__33568, self__.path_fn, self__.name, self__.comm, self__.search_result, self__.owner, self__.p__33559, self__.p__33558, self__.map__33569, self__.type, self__.search_result_link, meta33571__$1);
    };
    clustermap.components.search.__GT_t33570 = function __GT_t33570(opts__$1, map__33568__$2, path_fn__$1, name__$1, comm__$1, search_result__$1, owner__$1, p__33559__$1, p__33558__$1, map__33569__$2, type__$1, search_result_link__$1, meta33571) {
      return new clustermap.components.search.t33570(opts__$1, map__33568__$2, path_fn__$1, name__$1, comm__$1, search_result__$1, owner__$1, p__33559__$1, p__33558__$1, map__33569__$2, type__$1, search_result_link__$1, meta33571);
    };
  }
  return new clustermap.components.search.t33570(opts, map__33568__$1, path_fn, name, comm, search_result, owner, p__33559, p__33558, map__33569__$1, type, search_result_link, null);
};
clustermap.components.search.nth_search_result = function nth_search_result(p__33576, n) {
  var map__33578 = p__33576;
  var map__33578__$1 = cljs.core.seq_QMARK_.call(null, map__33578) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33578) : map__33578;
  var investor_companies = cljs.core.get.call(null, map__33578__$1, new cljs.core.Keyword(null, "investor_companies", "investor_companies", 1928918630));
  var portfolio_companies = cljs.core.get.call(null, map__33578__$1, new cljs.core.Keyword(null, "portfolio_companies", "portfolio_companies", 4192656150));
  var constituencies = cljs.core.get.call(null, map__33578__$1, new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190));
  var cons = function() {
    var or__3406__auto__ = constituencies;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.PersistentVector.EMPTY;
    }
  }();
  var pcs = function() {
    var or__3406__auto__ = portfolio_companies;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.PersistentVector.EMPTY;
    }
  }();
  var invs = function() {
    var or__3406__auto__ = investor_companies;
    if (cljs.core.truth_(or__3406__auto__)) {
      return or__3406__auto__;
    } else {
      return cljs.core.PersistentVector.EMPTY;
    }
  }();
  if (n < cljs.core.count.call(null, cons)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), cljs.core.get.call(null, constituencies, n)], null);
  } else {
    if (n < cljs.core.count.call(null, cons) + cljs.core.count.call(null, pcs)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), cljs.core.get.call(null, pcs, n - cljs.core.count.call(null, cons))], null);
    } else {
      if (true) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), cljs.core.get.call(null, invs, n - cljs.core.count.call(null, cons) - cljs.core.count.call(null, pcs))], null);
      } else {
        return null;
      }
    }
  }
};
clustermap.components.search.key_down = function key_down(e, search_results, owner, comm) {
  var pred__33585 = cljs.core._EQ__EQ_;
  var expr__33586 = e.keyCode;
  if (cljs.core.truth_(pred__33585.call(null, clustermap.components.search.ESCAPE_KEY, expr__33586))) {
    var G__33588 = om.core.get_node.call(null, owner, "search-component");
    var G__33588__$1 = G__33588 == null ? null : jayq.core.$.call(null, G__33588);
    var G__33588__$2 = G__33588__$1 == null ? null : G__33588__$1.toggle();
    return G__33588__$2;
  } else {
    if (cljs.core.truth_(pred__33585.call(null, clustermap.components.search.ENTER_KEY, expr__33586))) {
      var vec__33589 = clustermap.components.search.nth_search_result.call(null, cljs.core.deref.call(null, search_results), function() {
        var or__3406__auto__ = om.core.get_state.call(null, owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109));
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return 0;
        }
      }());
      var type = cljs.core.nth.call(null, vec__33589, 0, null);
      var res = cljs.core.nth.call(null, vec__33589, 1, null);
      var G__33590_33591 = om.core.get_node.call(null, owner, "search-component");
      var G__33590_33592__$1 = G__33590_33591 == null ? null : jayq.core.$.call(null, G__33590_33591);
      var G__33590_33593__$2 = G__33590_33592__$1 == null ? null : G__33590_33592__$1.toggle();
      return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 4402849902), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [type, clustermap.model.extract_id.call(null, type, res)], null)], null));
    } else {
      if (cljs.core.truth_(pred__33585.call(null, clustermap.components.search.UP_ARROW, expr__33586))) {
        return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109), function() {
          var or__3406__auto__ = om.core.get_state.call(null, owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109));
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return 0;
          }
        }() - 1);
      } else {
        if (cljs.core.truth_(pred__33585.call(null, clustermap.components.search.DOWN_ARROW, expr__33586))) {
          return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109), function() {
            var or__3406__auto__ = om.core.get_state.call(null, owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109));
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return 0;
            }
          }() + 1);
        } else {
          return null;
        }
      }
    }
  }
};
clustermap.components.search.search_component = function search_component(p__33594, owner) {
  var map__33626 = p__33594;
  var map__33626__$1 = cljs.core.seq_QMARK_.call(null, map__33626) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33626) : map__33626;
  var map__33627 = cljs.core.get.call(null, map__33626__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
  var map__33627__$1 = cljs.core.seq_QMARK_.call(null, map__33627) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33627) : map__33627;
  var selection_type = cljs.core.get.call(null, map__33627__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  var selection_value = cljs.core.get.call(null, map__33627__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var search_results = cljs.core.get.call(null, map__33626__$1, new cljs.core.Keyword(null, "search-results", "search-results", 1025331267));
  var map__33628 = om.core.get_shared.call(null, owner);
  var map__33628__$1 = cljs.core.seq_QMARK_.call(null, map__33628) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33628) : map__33628;
  var path_fn = cljs.core.get.call(null, map__33628__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
  var comm = cljs.core.get.call(null, map__33628__$1, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
  var map__33629 = search_results;
  var map__33629__$1 = cljs.core.seq_QMARK_.call(null, map__33629) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33629) : map__33629;
  var investor_companies = cljs.core.get.call(null, map__33629__$1, new cljs.core.Keyword(null, "investor_companies", "investor_companies", 1928918630));
  var portfolio_companies = cljs.core.get.call(null, map__33629__$1, new cljs.core.Keyword(null, "portfolio_companies", "portfolio_companies", 4192656150));
  var constituencies = cljs.core.get.call(null, map__33629__$1, new cljs.core.Keyword(null, "constituencies", "constituencies", 2756015190));
  if (typeof clustermap.components.search.t33630 !== "undefined") {
  } else {
    clustermap.components.search.t33630 = function(investor_companies, selection_value, path_fn, portfolio_companies, search_component, map__33626, map__33627, map__33629, comm, p__33594, map__33628, selection_type, owner, constituencies, search_results, meta33631) {
      this.investor_companies = investor_companies;
      this.selection_value = selection_value;
      this.path_fn = path_fn;
      this.portfolio_companies = portfolio_companies;
      this.search_component = search_component;
      this.map__33626 = map__33626;
      this.map__33627 = map__33627;
      this.map__33629 = map__33629;
      this.comm = comm;
      this.p__33594 = p__33594;
      this.map__33628 = map__33628;
      this.selection_type = selection_type;
      this.owner = owner;
      this.constituencies = constituencies;
      this.search_results = search_results;
      this.meta33631 = meta33631;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.search.t33630.cljs$lang$type = true;
    clustermap.components.search.t33630.cljs$lang$ctorStr = "clustermap.components.search/t33630";
    clustermap.components.search.t33630.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.search/t33630");
    };
    clustermap.components.search.t33630.prototype.om$core$IRenderState$ = true;
    clustermap.components.search.t33630.prototype.om$core$IRenderState$render_state$arity$2 = function(this$, state) {
      var self__ = this;
      var this$__$1 = this;
      return React.DOM.div({"ref":"search-component", "className":"search-component", "id":"search", "onKeyDown":function(e) {
        return clustermap.components.search.key_down.call(null, e, self__.search_results, self__.owner, self__.comm);
      }}, React.DOM.div({"className":"tbl"}, React.DOM.div({"className":"tbl-cell", "style":{"width":"100%"}}, sablono.interpreter.input.call(null, {"ref":"search-field", "type":"text", "placeholder":"Search", "onChange":function(e) {
        return cljs.core.async.put_BANG_.call(null, self__.comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "search", "search", 4402534682), e.target.value], null));
      }})), React.DOM.div({"className":"tbl-cell", "style":{"width":"34"}}, React.DOM.button({"type":"reset", "onClick":function(e) {
        cljs.core.async.put_BANG_.call(null, self__.comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "search", "search", 4402534682), ""], null));
        return om.core.get_node.call(null, self__.owner, "search-field").value = "";
      }}, "\u00d7")), cljs.core.truth_(self__.selection_value) ? React.DOM.div({"className":"tbl-cell", "style":{"width":"136"}}, React.DOM.a({"href":self__.path_fn.call(null, null, null)}, React.DOM.button({"className":"btn-reset", "type":"reset", "onClick":function(e) {
        cljs.core.async.put_BANG_.call(null, self__.comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "search", "search", 4402534682), ""], null));
        return om.core.get_node.call(null, self__.owner, "search-field").value = "";
      }}, "Reset to UK wide"))) : null), sablono.interpreter.interpret.call(null, cljs.core.truth_(function() {
        var or__3406__auto__ = cljs.core.not_empty.call(null, self__.constituencies);
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          var or__3406__auto____$1 = cljs.core.not_empty.call(null, self__.portfolio_companies);
          if (cljs.core.truth_(or__3406__auto____$1)) {
            return or__3406__auto____$1;
          } else {
            return cljs.core.not_empty.call(null, self__.investor_companies);
          }
        }
      }()) ? function() {
        var idx_cons = cljs.core.map.call(null, cljs.core.vector, cljs.core.iterate.call(null, cljs.core.inc, 0), self__.constituencies);
        var idx_pcs = cljs.core.map.call(null, cljs.core.vector, cljs.core.iterate.call(null, cljs.core.inc, cljs.core.count.call(null, idx_cons)), self__.portfolio_companies);
        var idx_invs = cljs.core.map.call(null, cljs.core.vector, cljs.core.iterate.call(null, cljs.core.inc, cljs.core.count.call(null, idx_cons) + cljs.core.count.call(null, idx_pcs)), self__.investor_companies);
        var selected_idx = cljs.core.mod.call(null, function() {
          var or__3406__auto__ = (new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109)).cljs$core$IFn$_invoke$arity$1(state);
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return 0;
          }
        }(), cljs.core.count.call(null, idx_cons) + cljs.core.count.call(null, idx_pcs) + cljs.core.count.call(null, idx_invs));
        var _ = cljs.core.not_EQ_.call(null, selected_idx, (new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109)).cljs$core$IFn$_invoke$arity$1(state)) ? om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "selected-idx", "selected-idx", 3553242109), selected_idx) : null;
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), "search-results"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", 1013907977), cljs.core.truth_(cljs.core.not_empty.call(null, idx_cons)) ? cljs.core.into.call(null, 
        new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), "search-results-header"], null), "Constituencies"], null)], null), function() {
          var iter__4117__auto__ = function iter__33633(s__33634) {
            return new cljs.core.LazySeq(null, function() {
              var s__33634__$1 = s__33634;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__33634__$1);
                if (temp__4092__auto__) {
                  var s__33634__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__33634__$2)) {
                    var c__4115__auto__ = cljs.core.chunk_first.call(null, s__33634__$2);
                    var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
                    var b__33636 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
                    if (function() {
                      var i__33635 = 0;
                      while (true) {
                        if (i__33635 < size__4116__auto__) {
                          var vec__33639 = cljs.core._nth.call(null, c__4115__auto__, i__33635);
                          var idx = cljs.core.nth.call(null, vec__33639, 0, null);
                          var con = cljs.core.nth.call(null, vec__33639, 1, null);
                          cljs.core.chunk_append.call(null, b__33636, om.core.build.call(null, clustermap.components.search.search_result_link, con, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), 
                          new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(i__33635, vec__33639, idx, con, c__4115__auto__, size__4116__auto__, b__33636, s__33634__$2, temp__4092__auto__) {
                            return function(data) {
                              return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("constituency:"), cljs.core.str(cljs.core.get.call(null, data, new cljs.core.Keyword(null, 
                              "boundaryline_id", "boundaryline_id", 3312170318)))].join(""));
                            };
                          }(i__33635, vec__33639, idx, con, c__4115__auto__, size__4116__auto__, b__33636, s__33634__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)));
                          var G__33657 = i__33635 + 1;
                          i__33635 = G__33657;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33636), iter__33633.call(null, cljs.core.chunk_rest.call(null, s__33634__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33636), null);
                    }
                  } else {
                    var vec__33640 = cljs.core.first.call(null, s__33634__$2);
                    var idx = cljs.core.nth.call(null, vec__33640, 0, null);
                    var con = cljs.core.nth.call(null, vec__33640, 1, null);
                    return cljs.core.cons.call(null, om.core.build.call(null, clustermap.components.search.search_result_link, con, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.PersistentArrayMap(null, 
                    1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(vec__33640, idx, con, s__33634__$2, temp__4092__auto__) {
                      return function(data) {
                        return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "boundaryline_id", "boundaryline_id", 3312170318)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("constituency:"), cljs.core.str(cljs.core.get.call(null, data, new cljs.core.Keyword(null, 
                        "boundaryline_id", "boundaryline_id", 3312170318)))].join(""));
                      };
                    }(vec__33640, idx, con, s__33634__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)), iter__33633.call(null, cljs.core.rest.call(null, s__33634__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4117__auto__.call(null, idx_cons);
        }()) : null, cljs.core.truth_(cljs.core.not_empty.call(null, idx_pcs)) ? cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), "search-results-header"], 
        null), "Companies"], null)], null), function() {
          var iter__4117__auto__ = function iter__33641(s__33642) {
            return new cljs.core.LazySeq(null, function() {
              var s__33642__$1 = s__33642;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__33642__$1);
                if (temp__4092__auto__) {
                  var s__33642__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__33642__$2)) {
                    var c__4115__auto__ = cljs.core.chunk_first.call(null, s__33642__$2);
                    var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
                    var b__33644 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
                    if (function() {
                      var i__33643 = 0;
                      while (true) {
                        if (i__33643 < size__4116__auto__) {
                          var vec__33647 = cljs.core._nth.call(null, c__4115__auto__, i__33643);
                          var idx = cljs.core.nth.call(null, vec__33647, 0, null);
                          var pc = cljs.core.nth.call(null, vec__33647, 1, null);
                          cljs.core.chunk_append.call(null, b__33644, om.core.build.call(null, clustermap.components.search.search_result_link, pc, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), 
                          new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(i__33643, vec__33647, idx, pc, c__4115__auto__, size__4116__auto__, b__33644, s__33642__$2, temp__4092__auto__) {
                            return function(data) {
                              return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "company_no", "company_no", 4461198389)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("portfolio-company:"), cljs.core.str(cljs.core.get.call(null, data, 
                              new cljs.core.Keyword(null, "company_no", "company_no", 4461198389)))].join(""));
                            };
                          }(i__33643, vec__33647, idx, pc, c__4115__auto__, size__4116__auto__, b__33644, s__33642__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)));
                          var G__33658 = i__33643 + 1;
                          i__33643 = G__33658;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33644), iter__33641.call(null, cljs.core.chunk_rest.call(null, s__33642__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33644), null);
                    }
                  } else {
                    var vec__33648 = cljs.core.first.call(null, s__33642__$2);
                    var idx = cljs.core.nth.call(null, vec__33648, 0, null);
                    var pc = cljs.core.nth.call(null, vec__33648, 1, null);
                    return cljs.core.cons.call(null, om.core.build.call(null, clustermap.components.search.search_result_link, pc, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.PersistentArrayMap(null, 
                    1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(vec__33648, idx, pc, s__33642__$2, temp__4092__auto__) {
                      return function(data) {
                        return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "company_no", "company_no", 4461198389)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("portfolio-company:"), cljs.core.str(cljs.core.get.call(null, data, new cljs.core.Keyword(null, 
                        "company_no", "company_no", 4461198389)))].join(""));
                      };
                    }(vec__33648, idx, pc, s__33642__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)), iter__33641.call(null, cljs.core.rest.call(null, s__33642__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4117__auto__.call(null, idx_pcs);
        }()) : null, cljs.core.truth_(cljs.core.not_empty.call(null, idx_invs)) ? cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 1013907695), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), "search-results-header"], 
        null), "Investors"], null)], null), function() {
          var iter__4117__auto__ = function iter__33649(s__33650) {
            return new cljs.core.LazySeq(null, function() {
              var s__33650__$1 = s__33650;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__33650__$1);
                if (temp__4092__auto__) {
                  var s__33650__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__33650__$2)) {
                    var c__4115__auto__ = cljs.core.chunk_first.call(null, s__33650__$2);
                    var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
                    var b__33652 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
                    if (function() {
                      var i__33651 = 0;
                      while (true) {
                        if (i__33651 < size__4116__auto__) {
                          var vec__33655 = cljs.core._nth.call(null, c__4115__auto__, i__33651);
                          var idx = cljs.core.nth.call(null, vec__33655, 0, null);
                          var inv = cljs.core.nth.call(null, vec__33655, 1, null);
                          cljs.core.chunk_append.call(null, b__33652, om.core.build.call(null, clustermap.components.search.search_result_link, inv, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), 
                          new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(i__33651, vec__33655, idx, inv, c__4115__auto__, size__4116__auto__, b__33652, s__33650__$2, temp__4092__auto__) {
                            return function(data) {
                              return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("investor-company:"), cljs.core.str(cljs.core.get.call(null, 
                              data, new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)))].join(""));
                            };
                          }(i__33651, vec__33655, idx, inv, c__4115__auto__, size__4116__auto__, b__33652, s__33650__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)));
                          var G__33659 = i__33651 + 1;
                          i__33651 = G__33659;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33652), iter__33649.call(null, cljs.core.chunk_rest.call(null, s__33650__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__33652), null);
                    }
                  } else {
                    var vec__33656 = cljs.core.first.call(null, s__33650__$2);
                    var idx = cljs.core.nth.call(null, vec__33656, 0, null);
                    var inv = cljs.core.nth.call(null, vec__33656, 1, null);
                    return cljs.core.cons.call(null, om.core.build.call(null, clustermap.components.search.search_result_link, inv, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), self__.comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), self__.path_fn], null), new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.PersistentArrayMap(null, 
                    1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core._EQ_.call(null, idx, selected_idx)], null), new cljs.core.Keyword(null, "fn", "fn", 1013907514), function(vec__33656, idx, inv, s__33650__$2, temp__4092__auto__) {
                      return function(data) {
                        return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), new cljs.core.Keyword(null, "id", "id", 1013907597), cljs.core.get.call(null, data, new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)), new cljs.core.Keyword(null, "uid", "uid", 1014020034), [cljs.core.str("investor-company:"), cljs.core.str(cljs.core.get.call(null, 
                        data, new cljs.core.Keyword(null, "investor_company_uid", "investor_company_uid", 4184005593)))].join(""));
                      };
                    }(vec__33656, idx, inv, s__33650__$2, temp__4092__auto__), new cljs.core.Keyword(null, "key", "key", 1014010321), new cljs.core.Keyword(null, "uid", "uid", 1014020034)], null)), iter__33649.call(null, cljs.core.rest.call(null, s__33650__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4117__auto__.call(null, idx_invs);
        }()) : null], null)], null);
      }() : null));
    };
    clustermap.components.search.t33630.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33632) {
      var self__ = this;
      var _33632__$1 = this;
      return self__.meta33631;
    };
    clustermap.components.search.t33630.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33632, meta33631__$1) {
      var self__ = this;
      var _33632__$1 = this;
      return new clustermap.components.search.t33630(self__.investor_companies, self__.selection_value, self__.path_fn, self__.portfolio_companies, self__.search_component, self__.map__33626, self__.map__33627, self__.map__33629, self__.comm, self__.p__33594, self__.map__33628, self__.selection_type, self__.owner, self__.constituencies, self__.search_results, meta33631__$1);
    };
    clustermap.components.search.__GT_t33630 = function __GT_t33630(investor_companies__$1, selection_value__$1, path_fn__$1, portfolio_companies__$1, search_component__$1, map__33626__$2, map__33627__$2, map__33629__$2, comm__$1, p__33594__$1, map__33628__$2, selection_type__$1, owner__$1, constituencies__$1, search_results__$1, meta33631) {
      return new clustermap.components.search.t33630(investor_companies__$1, selection_value__$1, path_fn__$1, portfolio_companies__$1, search_component__$1, map__33626__$2, map__33627__$2, map__33629__$2, comm__$1, p__33594__$1, map__33628__$2, selection_type__$1, owner__$1, constituencies__$1, search_results__$1, meta33631);
    };
  }
  return new clustermap.components.search.t33630(investor_companies, selection_value, path_fn, portfolio_companies, search_component, map__33626__$1, map__33627__$1, map__33629__$1, comm, p__33594, map__33628__$1, selection_type, owner, constituencies, search_results, null);
};
clustermap.components.search.mount = function mount(app_state, elem_id, shared) {
  return om.core.root.call(null, app_state, shared, clustermap.components.search.search_component, document.getElementById(elem_id));
};
goog.provide("domina.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.object");
goog.require("goog.object");
goog.require("domina");
domina.events.Event = function() {
  var obj38112 = {};
  return obj38112;
}();
domina.events.prevent_default = function prevent_default(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$prevent_default$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$prevent_default$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.prevent_default[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.prevent_default["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.prevent-default", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.stop_propagation = function stop_propagation(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$stop_propagation$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$stop_propagation$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.stop_propagation[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.stop_propagation["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.stop-propagation", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.target = function target(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$target$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$target$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.target[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.target["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.current_target = function current_target(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$current_target$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$current_target$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.current_target[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.current_target["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.current-target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.event_type = function event_type(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$event_type$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$event_type$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.event_type[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.event_type["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.event-type", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.raw_event = function raw_event(evt) {
  if (function() {
    var and__3394__auto__ = evt;
    if (and__3394__auto__) {
      return evt.domina$events$Event$raw_event$arity$1;
    } else {
      return and__3394__auto__;
    }
  }()) {
    return evt.domina$events$Event$raw_event$arity$1(evt);
  } else {
    var x__4027__auto__ = evt == null ? null : evt;
    return function() {
      var or__3406__auto__ = domina.events.raw_event[goog.typeOf(x__4027__auto__)];
      if (or__3406__auto__) {
        return or__3406__auto__;
      } else {
        var or__3406__auto____$1 = domina.events.raw_event["_"];
        if (or__3406__auto____$1) {
          return or__3406__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.raw-event", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.root_element = window.document.documentElement;
domina.events.create_listener_function = function create_listener_function(f) {
  return function(evt) {
    f.call(null, function() {
      if (typeof domina.events.t38116 !== "undefined") {
      } else {
        domina.events.t38116 = function(evt, f, create_listener_function, meta38117) {
          this.evt = evt;
          this.f = f;
          this.create_listener_function = create_listener_function;
          this.meta38117 = meta38117;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393472;
        };
        domina.events.t38116.cljs$lang$type = true;
        domina.events.t38116.cljs$lang$ctorStr = "domina.events/t38116";
        domina.events.t38116.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
          return cljs.core._write.call(null, writer__3969__auto__, "domina.events/t38116");
        };
        domina.events.t38116.prototype.cljs$core$ILookup$_lookup$arity$2 = function(o, k) {
          var self__ = this;
          var o__$1 = this;
          var temp__4090__auto__ = self__.evt[k];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var val = temp__4090__auto__;
            return val;
          } else {
            return self__.evt[cljs.core.name.call(null, k)];
          }
        };
        domina.events.t38116.prototype.cljs$core$ILookup$_lookup$arity$3 = function(o, k, not_found) {
          var self__ = this;
          var o__$1 = this;
          var or__3406__auto__ = cljs.core._lookup.call(null, o__$1, k);
          if (cljs.core.truth_(or__3406__auto__)) {
            return or__3406__auto__;
          } else {
            return not_found;
          }
        };
        domina.events.t38116.prototype.domina$events$Event$ = true;
        domina.events.t38116.prototype.domina$events$Event$prevent_default$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.preventDefault();
        };
        domina.events.t38116.prototype.domina$events$Event$stop_propagation$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.stopPropagation();
        };
        domina.events.t38116.prototype.domina$events$Event$target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.target;
        };
        domina.events.t38116.prototype.domina$events$Event$current_target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.currentTarget;
        };
        domina.events.t38116.prototype.domina$events$Event$event_type$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.type;
        };
        domina.events.t38116.prototype.domina$events$Event$raw_event$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt;
        };
        domina.events.t38116.prototype.cljs$core$IMeta$_meta$arity$1 = function(_38118) {
          var self__ = this;
          var _38118__$1 = this;
          return self__.meta38117;
        };
        domina.events.t38116.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_38118, meta38117__$1) {
          var self__ = this;
          var _38118__$1 = this;
          return new domina.events.t38116(self__.evt, self__.f, self__.create_listener_function, meta38117__$1);
        };
        domina.events.__GT_t38116 = function __GT_t38116(evt__$1, f__$1, create_listener_function__$1, meta38117) {
          return new domina.events.t38116(evt__$1, f__$1, create_listener_function__$1, meta38117);
        };
      }
      return new domina.events.t38116(evt, f, create_listener_function, null);
    }());
    return true;
  };
};
domina.events.listen_internal_BANG_ = function listen_internal_BANG_(content, type, listener, capture, once) {
  var f = domina.events.create_listener_function.call(null, listener);
  var t = cljs.core.name.call(null, type);
  return cljs.core.doall.call(null, function() {
    var iter__4117__auto__ = function iter__38123(s__38124) {
      return new cljs.core.LazySeq(null, function() {
        var s__38124__$1 = s__38124;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__38124__$1);
          if (temp__4092__auto__) {
            var s__38124__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__38124__$2)) {
              var c__4115__auto__ = cljs.core.chunk_first.call(null, s__38124__$2);
              var size__4116__auto__ = cljs.core.count.call(null, c__4115__auto__);
              var b__38126 = cljs.core.chunk_buffer.call(null, size__4116__auto__);
              if (function() {
                var i__38125 = 0;
                while (true) {
                  if (i__38125 < size__4116__auto__) {
                    var node = cljs.core._nth.call(null, c__4115__auto__, i__38125);
                    cljs.core.chunk_append.call(null, b__38126, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture));
                    var G__38127 = i__38125 + 1;
                    i__38125 = G__38127;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38126), iter__38123.call(null, cljs.core.chunk_rest.call(null, s__38124__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38126), null);
              }
            } else {
              var node = cljs.core.first.call(null, s__38124__$2);
              return cljs.core.cons.call(null, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture), iter__38123.call(null, cljs.core.rest.call(null, s__38124__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4117__auto__.call(null, domina.nodes.call(null, content));
  }());
};
domina.events.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(type, listener) {
    return listen_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, false);
  };
  listen_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, content, type);
      case 3:
        return listen_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
domina.events.capture_BANG_ = function() {
  var capture_BANG_ = null;
  var capture_BANG___2 = function(type, listener) {
    return capture_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, false);
  };
  capture_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_BANG___2.call(this, content, type);
      case 3:
        return capture_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_BANG___2;
  capture_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_BANG___3;
  return capture_BANG_;
}();
domina.events.listen_once_BANG_ = function() {
  var listen_once_BANG_ = null;
  var listen_once_BANG___2 = function(type, listener) {
    return listen_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, true);
  };
  listen_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_once_BANG___2.call(this, content, type);
      case 3:
        return listen_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_once_BANG___2;
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_once_BANG___3;
  return listen_once_BANG_;
}();
domina.events.capture_once_BANG_ = function() {
  var capture_once_BANG_ = null;
  var capture_once_BANG___2 = function(type, listener) {
    return capture_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, true);
  };
  capture_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_once_BANG___2.call(this, content, type);
      case 3:
        return capture_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_once_BANG___2;
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_once_BANG___3;
  return capture_once_BANG_;
}();
domina.events.unlisten_BANG_ = function() {
  var unlisten_BANG_ = null;
  var unlisten_BANG___0 = function() {
    return unlisten_BANG_.call(null, domina.events.root_element);
  };
  var unlisten_BANG___1 = function(content) {
    var seq__38136 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__38137 = null;
    var count__38138 = 0;
    var i__38139 = 0;
    while (true) {
      if (i__38139 < count__38138) {
        var node = cljs.core._nth.call(null, chunk__38137, i__38139);
        goog.events.removeAll(node);
        var G__38144 = seq__38136;
        var G__38145 = chunk__38137;
        var G__38146 = count__38138;
        var G__38147 = i__38139 + 1;
        seq__38136 = G__38144;
        chunk__38137 = G__38145;
        count__38138 = G__38146;
        i__38139 = G__38147;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__38136);
        if (temp__4092__auto__) {
          var seq__38136__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38136__$1)) {
            var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__38136__$1);
            var G__38148 = cljs.core.chunk_rest.call(null, seq__38136__$1);
            var G__38149 = c__4148__auto__;
            var G__38150 = cljs.core.count.call(null, c__4148__auto__);
            var G__38151 = 0;
            seq__38136 = G__38148;
            chunk__38137 = G__38149;
            count__38138 = G__38150;
            i__38139 = G__38151;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__38136__$1);
            goog.events.removeAll(node);
            var G__38152 = cljs.core.next.call(null, seq__38136__$1);
            var G__38153 = null;
            var G__38154 = 0;
            var G__38155 = 0;
            seq__38136 = G__38152;
            chunk__38137 = G__38153;
            count__38138 = G__38154;
            i__38139 = G__38155;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var unlisten_BANG___2 = function(content, type) {
    var type__$1 = cljs.core.name.call(null, type);
    var seq__38140 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__38141 = null;
    var count__38142 = 0;
    var i__38143 = 0;
    while (true) {
      if (i__38143 < count__38142) {
        var node = cljs.core._nth.call(null, chunk__38141, i__38143);
        goog.events.removeAll(node, type__$1);
        var G__38156 = seq__38140;
        var G__38157 = chunk__38141;
        var G__38158 = count__38142;
        var G__38159 = i__38143 + 1;
        seq__38140 = G__38156;
        chunk__38141 = G__38157;
        count__38142 = G__38158;
        i__38143 = G__38159;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__38140);
        if (temp__4092__auto__) {
          var seq__38140__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38140__$1)) {
            var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__38140__$1);
            var G__38160 = cljs.core.chunk_rest.call(null, seq__38140__$1);
            var G__38161 = c__4148__auto__;
            var G__38162 = cljs.core.count.call(null, c__4148__auto__);
            var G__38163 = 0;
            seq__38140 = G__38160;
            chunk__38141 = G__38161;
            count__38142 = G__38162;
            i__38143 = G__38163;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__38140__$1);
            goog.events.removeAll(node, type__$1);
            var G__38164 = cljs.core.next.call(null, seq__38140__$1);
            var G__38165 = null;
            var G__38166 = 0;
            var G__38167 = 0;
            seq__38140 = G__38164;
            chunk__38141 = G__38165;
            count__38142 = G__38166;
            i__38143 = G__38167;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  unlisten_BANG_ = function(content, type) {
    switch(arguments.length) {
      case 0:
        return unlisten_BANG___0.call(this);
      case 1:
        return unlisten_BANG___1.call(this, content);
      case 2:
        return unlisten_BANG___2.call(this, content, type);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$0 = unlisten_BANG___0;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$1 = unlisten_BANG___1;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$2 = unlisten_BANG___2;
  return unlisten_BANG_;
}();
domina.events.ancestor_nodes = function() {
  var ancestor_nodes = null;
  var ancestor_nodes__1 = function(n) {
    return ancestor_nodes.call(null, n, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null));
  };
  var ancestor_nodes__2 = function(n, so_far) {
    while (true) {
      var temp__4090__auto__ = n.parentNode;
      if (cljs.core.truth_(temp__4090__auto__)) {
        var parent = temp__4090__auto__;
        var G__38168 = parent;
        var G__38169 = cljs.core.cons.call(null, parent, so_far);
        n = G__38168;
        so_far = G__38169;
        continue;
      } else {
        return so_far;
      }
      break;
    }
  };
  ancestor_nodes = function(n, so_far) {
    switch(arguments.length) {
      case 1:
        return ancestor_nodes__1.call(this, n);
      case 2:
        return ancestor_nodes__2.call(this, n, so_far);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestor_nodes.cljs$core$IFn$_invoke$arity$1 = ancestor_nodes__1;
  ancestor_nodes.cljs$core$IFn$_invoke$arity$2 = ancestor_nodes__2;
  return ancestor_nodes;
}();
domina.events.dispatch_browser_BANG_ = function dispatch_browser_BANG_(source, evt) {
  var ancestors = domina.events.ancestor_nodes.call(null, domina.single_node.call(null, source));
  var seq__38178_38186 = cljs.core.seq.call(null, ancestors);
  var chunk__38179_38187 = null;
  var count__38180_38188 = 0;
  var i__38181_38189 = 0;
  while (true) {
    if (i__38181_38189 < count__38180_38188) {
      var n_38190 = cljs.core._nth.call(null, chunk__38179_38187, i__38181_38189);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_38190;
        goog.events.fireListeners(n_38190, evt.type, true, evt);
      }
      var G__38191 = seq__38178_38186;
      var G__38192 = chunk__38179_38187;
      var G__38193 = count__38180_38188;
      var G__38194 = i__38181_38189 + 1;
      seq__38178_38186 = G__38191;
      chunk__38179_38187 = G__38192;
      count__38180_38188 = G__38193;
      i__38181_38189 = G__38194;
      continue;
    } else {
      var temp__4092__auto___38195 = cljs.core.seq.call(null, seq__38178_38186);
      if (temp__4092__auto___38195) {
        var seq__38178_38196__$1 = temp__4092__auto___38195;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38178_38196__$1)) {
          var c__4148__auto___38197 = cljs.core.chunk_first.call(null, seq__38178_38196__$1);
          var G__38198 = cljs.core.chunk_rest.call(null, seq__38178_38196__$1);
          var G__38199 = c__4148__auto___38197;
          var G__38200 = cljs.core.count.call(null, c__4148__auto___38197);
          var G__38201 = 0;
          seq__38178_38186 = G__38198;
          chunk__38179_38187 = G__38199;
          count__38180_38188 = G__38200;
          i__38181_38189 = G__38201;
          continue;
        } else {
          var n_38202 = cljs.core.first.call(null, seq__38178_38196__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_38202;
            goog.events.fireListeners(n_38202, evt.type, true, evt);
          }
          var G__38203 = cljs.core.next.call(null, seq__38178_38196__$1);
          var G__38204 = null;
          var G__38205 = 0;
          var G__38206 = 0;
          seq__38178_38186 = G__38203;
          chunk__38179_38187 = G__38204;
          count__38180_38188 = G__38205;
          i__38181_38189 = G__38206;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__38182_38207 = cljs.core.seq.call(null, cljs.core.reverse.call(null, ancestors));
  var chunk__38183_38208 = null;
  var count__38184_38209 = 0;
  var i__38185_38210 = 0;
  while (true) {
    if (i__38185_38210 < count__38184_38209) {
      var n_38211 = cljs.core._nth.call(null, chunk__38183_38208, i__38185_38210);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_38211;
        goog.events.fireListeners(n_38211, evt.type, false, evt);
      }
      var G__38212 = seq__38182_38207;
      var G__38213 = chunk__38183_38208;
      var G__38214 = count__38184_38209;
      var G__38215 = i__38185_38210 + 1;
      seq__38182_38207 = G__38212;
      chunk__38183_38208 = G__38213;
      count__38184_38209 = G__38214;
      i__38185_38210 = G__38215;
      continue;
    } else {
      var temp__4092__auto___38216 = cljs.core.seq.call(null, seq__38182_38207);
      if (temp__4092__auto___38216) {
        var seq__38182_38217__$1 = temp__4092__auto___38216;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38182_38217__$1)) {
          var c__4148__auto___38218 = cljs.core.chunk_first.call(null, seq__38182_38217__$1);
          var G__38219 = cljs.core.chunk_rest.call(null, seq__38182_38217__$1);
          var G__38220 = c__4148__auto___38218;
          var G__38221 = cljs.core.count.call(null, c__4148__auto___38218);
          var G__38222 = 0;
          seq__38182_38207 = G__38219;
          chunk__38183_38208 = G__38220;
          count__38184_38209 = G__38221;
          i__38185_38210 = G__38222;
          continue;
        } else {
          var n_38223 = cljs.core.first.call(null, seq__38182_38217__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_38223;
            goog.events.fireListeners(n_38223, evt.type, false, evt);
          }
          var G__38224 = cljs.core.next.call(null, seq__38182_38217__$1);
          var G__38225 = null;
          var G__38226 = 0;
          var G__38227 = 0;
          seq__38182_38207 = G__38224;
          chunk__38183_38208 = G__38225;
          count__38184_38209 = G__38226;
          i__38185_38210 = G__38227;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return evt.returnValue_;
};
domina.events.dispatch_event_target_BANG_ = function dispatch_event_target_BANG_(source, evt) {
  return goog.events.dispatchEvent(source, evt);
};
domina.events.is_event_target_QMARK_ = function is_event_target_QMARK_(o) {
  var and__3394__auto__ = o.getParentEventTarget;
  if (cljs.core.truth_(and__3394__auto__)) {
    return o.dispatchEvent;
  } else {
    return and__3394__auto__;
  }
};
domina.events.dispatch_BANG_ = function() {
  var dispatch_BANG_ = null;
  var dispatch_BANG___2 = function(type, evt_map) {
    return dispatch_BANG_.call(null, domina.events.root_element, type, evt_map);
  };
  var dispatch_BANG___3 = function(source, type, evt_map) {
    var evt = new goog.events.Event(cljs.core.name.call(null, type));
    var seq__38234_38240 = cljs.core.seq.call(null, evt_map);
    var chunk__38235_38241 = null;
    var count__38236_38242 = 0;
    var i__38237_38243 = 0;
    while (true) {
      if (i__38237_38243 < count__38236_38242) {
        var vec__38238_38244 = cljs.core._nth.call(null, chunk__38235_38241, i__38237_38243);
        var k_38245 = cljs.core.nth.call(null, vec__38238_38244, 0, null);
        var v_38246 = cljs.core.nth.call(null, vec__38238_38244, 1, null);
        evt[k_38245] = v_38246;
        var G__38247 = seq__38234_38240;
        var G__38248 = chunk__38235_38241;
        var G__38249 = count__38236_38242;
        var G__38250 = i__38237_38243 + 1;
        seq__38234_38240 = G__38247;
        chunk__38235_38241 = G__38248;
        count__38236_38242 = G__38249;
        i__38237_38243 = G__38250;
        continue;
      } else {
        var temp__4092__auto___38251 = cljs.core.seq.call(null, seq__38234_38240);
        if (temp__4092__auto___38251) {
          var seq__38234_38252__$1 = temp__4092__auto___38251;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__38234_38252__$1)) {
            var c__4148__auto___38253 = cljs.core.chunk_first.call(null, seq__38234_38252__$1);
            var G__38254 = cljs.core.chunk_rest.call(null, seq__38234_38252__$1);
            var G__38255 = c__4148__auto___38253;
            var G__38256 = cljs.core.count.call(null, c__4148__auto___38253);
            var G__38257 = 0;
            seq__38234_38240 = G__38254;
            chunk__38235_38241 = G__38255;
            count__38236_38242 = G__38256;
            i__38237_38243 = G__38257;
            continue;
          } else {
            var vec__38239_38258 = cljs.core.first.call(null, seq__38234_38252__$1);
            var k_38259 = cljs.core.nth.call(null, vec__38239_38258, 0, null);
            var v_38260 = cljs.core.nth.call(null, vec__38239_38258, 1, null);
            evt[k_38259] = v_38260;
            var G__38261 = cljs.core.next.call(null, seq__38234_38252__$1);
            var G__38262 = null;
            var G__38263 = 0;
            var G__38264 = 0;
            seq__38234_38240 = G__38261;
            chunk__38235_38241 = G__38262;
            count__38236_38242 = G__38263;
            i__38237_38243 = G__38264;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(domina.events.is_event_target_QMARK_.call(null, source))) {
      return domina.events.dispatch_event_target_BANG_.call(null, source, evt);
    } else {
      return domina.events.dispatch_browser_BANG_.call(null, source, evt);
    }
  };
  dispatch_BANG_ = function(source, type, evt_map) {
    switch(arguments.length) {
      case 2:
        return dispatch_BANG___2.call(this, source, type);
      case 3:
        return dispatch_BANG___3.call(this, source, type, evt_map);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$2 = dispatch_BANG___2;
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$3 = dispatch_BANG___3;
  return dispatch_BANG_;
}();
domina.events.unlisten_by_key_BANG_ = function unlisten_by_key_BANG_(key) {
  return goog.events.unlistenByKey(key);
};
domina.events.get_listeners = function get_listeners(content, type) {
  var type__$1 = cljs.core.name.call(null, type);
  return cljs.core.mapcat.call(null, function(p1__38265_SHARP_) {
    return goog.events.getListeners(p1__38265_SHARP_, type__$1, false);
  }, domina.nodes.call(null, content));
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
/*
 Portions of this code are from the Dojo Toolkit, received by
 The Closure Library Authors under the BSD license. All other code is
 Copyright 2005-2009 The Closure Library Authors. All Rights Reserved.

The "New" BSD License:

Copyright (c) 2005-2009, The Dojo Foundation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 Neither the name of the Dojo Foundation nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
goog.provide("goog.dom.query");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.functions");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.query = function() {
  var cssCaseBug = goog.userAgent.WEBKIT && goog.dom.getDocument().compatMode == "BackCompat";
  var childNodesName = !!goog.dom.getDocument().firstChild["children"] ? "children" : "childNodes";
  var specials = "\x3e~+";
  var caseSensitive = false;
  var getQueryParts = function(query) {
    if (specials.indexOf(query.slice(-1)) >= 0) {
      query += " * ";
    } else {
      query += " ";
    }
    var ts = function(s, e) {
      return goog.string.trim(query.slice(s, e));
    };
    var queryParts = [];
    var inBrackets = -1, inParens = -1, inMatchFor = -1, inPseudo = -1, inClass = -1, inId = -1, inTag = -1, lc = "", cc = "", pStart;
    var x = 0, ql = query.length, currentPart = null, cp = null;
    var endTag = function() {
      if (inTag >= 0) {
        var tv = inTag == x ? null : ts(inTag, x);
        if (specials.indexOf(tv) < 0) {
          currentPart.tag = tv;
        } else {
          currentPart.oper = tv;
        }
        inTag = -1;
      }
    };
    var endId = function() {
      if (inId >= 0) {
        currentPart.id = ts(inId, x).replace(/\\/g, "");
        inId = -1;
      }
    };
    var endClass = function() {
      if (inClass >= 0) {
        currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
        inClass = -1;
      }
    };
    var endAll = function() {
      endId();
      endTag();
      endClass();
    };
    var endPart = function() {
      endAll();
      if (inPseudo >= 0) {
        currentPart.pseudos.push({name:ts(inPseudo + 1, x)});
      }
      currentPart.loops = currentPart.pseudos.length || (currentPart.attrs.length || currentPart.classes.length);
      currentPart.oquery = currentPart.query = ts(pStart, x);
      currentPart.otag = currentPart.tag = currentPart.oper ? null : currentPart.tag || "*";
      if (currentPart.tag) {
        currentPart.tag = currentPart.tag.toUpperCase();
      }
      if (queryParts.length && queryParts[queryParts.length - 1].oper) {
        currentPart.infixOper = queryParts.pop();
        currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
      }
      queryParts.push(currentPart);
      currentPart = null;
    };
    for (;lc = cc, cc = query.charAt(x), x < ql;x++) {
      if (lc == "\\") {
        continue;
      }
      if (!currentPart) {
        pStart = x;
        currentPart = {query:null, pseudos:[], attrs:[], classes:[], tag:null, oper:null, id:null, getTag:function() {
          return caseSensitive ? this.otag : this.tag;
        }};
        inTag = x;
      }
      if (inBrackets >= 0) {
        if (cc == "]") {
          if (!cp.attr) {
            cp.attr = ts(inBrackets + 1, x);
          } else {
            cp.matchFor = ts(inMatchFor || inBrackets + 1, x);
          }
          var cmf = cp.matchFor;
          if (cmf) {
            if (cmf.charAt(0) == '"' || cmf.charAt(0) == "'") {
              cp.matchFor = cmf.slice(1, -1);
            }
          }
          currentPart.attrs.push(cp);
          cp = null;
          inBrackets = inMatchFor = -1;
        } else {
          if (cc == "\x3d") {
            var addToCc = "|~^$*".indexOf(lc) >= 0 ? lc : "";
            cp.type = addToCc + cc;
            cp.attr = ts(inBrackets + 1, x - addToCc.length);
            inMatchFor = x + 1;
          }
        }
      } else {
        if (inParens >= 0) {
          if (cc == ")") {
            if (inPseudo >= 0) {
              cp.value = ts(inParens + 1, x);
            }
            inPseudo = inParens = -1;
          }
        } else {
          if (cc == "#") {
            endAll();
            inId = x + 1;
          } else {
            if (cc == ".") {
              endAll();
              inClass = x;
            } else {
              if (cc == ":") {
                endAll();
                inPseudo = x;
              } else {
                if (cc == "[") {
                  endAll();
                  inBrackets = x;
                  cp = {};
                } else {
                  if (cc == "(") {
                    if (inPseudo >= 0) {
                      cp = {name:ts(inPseudo + 1, x), value:null};
                      currentPart.pseudos.push(cp);
                    }
                    inParens = x;
                  } else {
                    if (cc == " " && lc != cc) {
                      endPart();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return queryParts;
  };
  var agree = function(first, second) {
    if (!first) {
      return second;
    }
    if (!second) {
      return first;
    }
    return function() {
      return first.apply(window, arguments) && second.apply(window, arguments);
    };
  };
  function getArr(i, opt_arr) {
    var r = opt_arr || [];
    if (i) {
      r.push(i);
    }
    return r;
  }
  var isElement = function(n) {
    return 1 == n.nodeType;
  };
  var blank = "";
  var getAttr = function(elem, attr) {
    if (!elem) {
      return blank;
    }
    if (attr == "class") {
      return elem.className || blank;
    }
    if (attr == "for") {
      return elem.htmlFor || blank;
    }
    if (attr == "style") {
      return elem.style.cssText || blank;
    }
    return(caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
  };
  var attrs = {"*\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) >= 0;
    };
  }, "^\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) == 0;
    };
  }, "$\x3d":function(attr, value) {
    var tval = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea.lastIndexOf(value) == ea.length - value.length;
    };
  }, "~\x3d":function(attr, value) {
    var tval = " " + value + " ";
    return function(elem) {
      var ea = " " + getAttr(elem, attr) + " ";
      return ea.indexOf(tval) >= 0;
    };
  }, "|\x3d":function(attr, value) {
    value = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea == value || ea.indexOf(value + "-") == 0;
    };
  }, "\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr) == value;
    };
  }};
  var noNextElementSibling = typeof goog.dom.getDocument().firstChild.nextElementSibling == "undefined";
  var nSibling = !noNextElementSibling ? "nextElementSibling" : "nextSibling";
  var pSibling = !noNextElementSibling ? "previousElementSibling" : "previousSibling";
  var simpleNodeTest = noNextElementSibling ? isElement : goog.functions.TRUE;
  var _lookLeft = function(node) {
    while (node = node[pSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var _lookRight = function(node) {
    while (node = node[nSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var getNodeIndex = function(node) {
    var root = node.parentNode;
    var i = 0, tret = root[childNodesName], ci = node["_i"] || -1, cl = root["_l"] || -1;
    if (!tret) {
      return-1;
    }
    var l = tret.length;
    if (cl == l && (ci >= 0 && cl >= 0)) {
      return ci;
    }
    root["_l"] = l;
    ci = -1;
    var te = root["firstElementChild"] || root["firstChild"];
    for (;te;te = te[nSibling]) {
      if (simpleNodeTest(te)) {
        te["_i"] = ++i;
        if (node === te) {
          ci = i;
        }
      }
    }
    return ci;
  };
  var isEven = function(elem) {
    return!(getNodeIndex(elem) % 2);
  };
  var isOdd = function(elem) {
    return getNodeIndex(elem) % 2;
  };
  var pseudos = {"checked":function(name, condition) {
    return function(elem) {
      return elem.checked || elem.attributes["checked"];
    };
  }, "first-child":function() {
    return _lookLeft;
  }, "last-child":function() {
    return _lookRight;
  }, "only-child":function(name, condition) {
    return function(node) {
      if (!_lookLeft(node)) {
        return false;
      }
      if (!_lookRight(node)) {
        return false;
      }
      return true;
    };
  }, "empty":function(name, condition) {
    return function(elem) {
      var cn = elem.childNodes;
      var cnl = elem.childNodes.length;
      for (var x = cnl - 1;x >= 0;x--) {
        var nt = cn[x].nodeType;
        if (nt === 1 || nt == 3) {
          return false;
        }
      }
      return true;
    };
  }, "contains":function(name, condition) {
    var cz = condition.charAt(0);
    if (cz == '"' || cz == "'") {
      condition = condition.slice(1, -1);
    }
    return function(elem) {
      return elem.innerHTML.indexOf(condition) >= 0;
    };
  }, "not":function(name, condition) {
    var p = getQueryParts(condition)[0];
    var ignores = {el:1};
    if (p.tag != "*") {
      ignores.tag = 1;
    }
    if (!p.classes.length) {
      ignores.classes = 1;
    }
    var ntf = getSimpleFilterFunc(p, ignores);
    return function(elem) {
      return!ntf(elem);
    };
  }, "nth-child":function(name, condition) {
    function pi(n) {
      return parseInt(n, 10);
    }
    if (condition == "odd") {
      return isOdd;
    } else {
      if (condition == "even") {
        return isEven;
      }
    }
    if (condition.indexOf("n") != -1) {
      var tparts = condition.split("n", 2);
      var pred = tparts[0] ? tparts[0] == "-" ? -1 : pi(tparts[0]) : 1;
      var idx = tparts[1] ? pi(tparts[1]) : 0;
      var lb = 0, ub = -1;
      if (pred > 0) {
        if (idx < 0) {
          idx = idx % pred && pred + idx % pred;
        } else {
          if (idx > 0) {
            if (idx >= pred) {
              lb = idx - idx % pred;
            }
            idx = idx % pred;
          }
        }
      } else {
        if (pred < 0) {
          pred *= -1;
          if (idx > 0) {
            ub = idx;
            idx = idx % pred;
          }
        }
      }
      if (pred > 0) {
        return function(elem) {
          var i = getNodeIndex(elem);
          return i >= lb && ((ub < 0 || i <= ub) && i % pred == idx);
        };
      } else {
        condition = idx;
      }
    }
    var ncount = pi(condition);
    return function(elem) {
      return getNodeIndex(elem) == ncount;
    };
  }};
  var defaultGetter = goog.userAgent.IE ? function(cond) {
    var clc = cond.toLowerCase();
    if (clc == "class") {
      cond = "className";
    }
    return function(elem) {
      return caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc];
    };
  } : function(cond) {
    return function(elem) {
      return elem && (elem.getAttribute && elem.hasAttribute(cond));
    };
  };
  var getSimpleFilterFunc = function(query, ignores) {
    if (!query) {
      return goog.functions.TRUE;
    }
    ignores = ignores || {};
    var ff = null;
    if (!ignores.el) {
      ff = agree(ff, isElement);
    }
    if (!ignores.tag) {
      if (query.tag != "*") {
        ff = agree(ff, function(elem) {
          return elem && elem.tagName == query.getTag();
        });
      }
    }
    if (!ignores.classes) {
      goog.array.forEach(query.classes, function(cname, idx, arr) {
        var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
        ff = agree(ff, function(elem) {
          return re.test(elem.className);
        });
        ff.count = idx;
      });
    }
    if (!ignores.pseudos) {
      goog.array.forEach(query.pseudos, function(pseudo) {
        var pn = pseudo.name;
        if (pseudos[pn]) {
          ff = agree(ff, pseudos[pn](pn, pseudo.value));
        }
      });
    }
    if (!ignores.attrs) {
      goog.array.forEach(query.attrs, function(attr) {
        var matcher;
        var a = attr.attr;
        if (attr.type && attrs[attr.type]) {
          matcher = attrs[attr.type](a, attr.matchFor);
        } else {
          if (a.length) {
            matcher = defaultGetter(a);
          }
        }
        if (matcher) {
          ff = agree(ff, matcher);
        }
      });
    }
    if (!ignores.id) {
      if (query.id) {
        ff = agree(ff, function(elem) {
          return!!elem && elem.id == query.id;
        });
      }
    }
    if (!ff) {
      if (!("default" in ignores)) {
        ff = goog.functions.TRUE;
      }
    }
    return ff;
  };
  var nextSiblingIterator = function(filterFunc) {
    return function(node, ret, bag) {
      while (node = node[nSibling]) {
        if (noNextElementSibling && !isElement(node)) {
          continue;
        }
        if ((!bag || _isUnique(node, bag)) && filterFunc(node)) {
          ret.push(node);
        }
        break;
      }
      return ret;
    };
  };
  var nextSiblingsIterator = function(filterFunc) {
    return function(root, ret, bag) {
      var te = root[nSibling];
      while (te) {
        if (simpleNodeTest(te)) {
          if (bag && !_isUnique(te, bag)) {
            break;
          }
          if (filterFunc(te)) {
            ret.push(te);
          }
        }
        te = te[nSibling];
      }
      return ret;
    };
  };
  var _childElements = function(filterFunc) {
    filterFunc = filterFunc || goog.functions.TRUE;
    return function(root, ret, bag) {
      var te, x = 0, tret = root[childNodesName];
      while (te = tret[x++]) {
        if (simpleNodeTest(te) && ((!bag || _isUnique(te, bag)) && filterFunc(te, x))) {
          ret.push(te);
        }
      }
      return ret;
    };
  };
  var _isDescendant = function(node, root) {
    var pn = node.parentNode;
    while (pn) {
      if (pn == root) {
        break;
      }
      pn = pn.parentNode;
    }
    return!!pn;
  };
  var _getElementsFuncCache = {};
  var getElementsFunc = function(query) {
    var retFunc = _getElementsFuncCache[query.query];
    if (retFunc) {
      return retFunc;
    }
    var io = query.infixOper;
    var oper = io ? io.oper : "";
    var filterFunc = getSimpleFilterFunc(query, {el:1});
    var qt = query.tag;
    var wildcardTag = "*" == qt;
    var ecs = goog.dom.getDocument()["getElementsByClassName"];
    if (!oper) {
      if (query.id) {
        filterFunc = !query.loops && wildcardTag ? goog.functions.TRUE : getSimpleFilterFunc(query, {el:1, id:1});
        retFunc = function(root, arr) {
          var te = goog.dom.getDomHelper(root).getElement(query.id);
          if (!te || !filterFunc(te)) {
            return;
          }
          if (9 == root.nodeType) {
            return getArr(te, arr);
          } else {
            if (_isDescendant(te, root)) {
              return getArr(te, arr);
            }
          }
        };
      } else {
        if (ecs && (/\{\s*\[native code\]\s*\}/.test(String(ecs)) && (query.classes.length && !cssCaseBug))) {
          filterFunc = getSimpleFilterFunc(query, {el:1, classes:1, id:1});
          var classesString = query.classes.join(" ");
          retFunc = function(root, arr) {
            var ret = getArr(0, arr), te, x = 0;
            var tret = root.getElementsByClassName(classesString);
            while (te = tret[x++]) {
              if (filterFunc(te, root)) {
                ret.push(te);
              }
            }
            return ret;
          };
        } else {
          if (!wildcardTag && !query.loops) {
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                ret.push(te);
              }
              return ret;
            };
          } else {
            filterFunc = getSimpleFilterFunc(query, {el:1, tag:1, id:1});
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                if (filterFunc(te, root)) {
                  ret.push(te);
                }
              }
              return ret;
            };
          }
        }
      }
    } else {
      var skipFilters = {el:1};
      if (wildcardTag) {
        skipFilters.tag = 1;
      }
      filterFunc = getSimpleFilterFunc(query, skipFilters);
      if ("+" == oper) {
        retFunc = nextSiblingIterator(filterFunc);
      } else {
        if ("~" == oper) {
          retFunc = nextSiblingsIterator(filterFunc);
        } else {
          if ("\x3e" == oper) {
            retFunc = _childElements(filterFunc);
          }
        }
      }
    }
    return _getElementsFuncCache[query.query] = retFunc;
  };
  var filterDown = function(root, queryParts) {
    var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;
    for (var i = 0;i < qpl;i++) {
      ret = [];
      qp = queryParts[i];
      x = candidates.length - 1;
      if (x > 0) {
        bag = {};
        ret.nozip = true;
      }
      var gef = getElementsFunc(qp);
      for (var j = 0;te = candidates[j];j++) {
        gef(te, ret, bag);
      }
      if (!ret.length) {
        break;
      }
      candidates = ret;
    }
    return ret;
  };
  var _queryFuncCacheDOM = {}, _queryFuncCacheQSA = {};
  var getStepQueryFunc = function(query) {
    var qparts = getQueryParts(goog.string.trim(query));
    if (qparts.length == 1) {
      var tef = getElementsFunc(qparts[0]);
      return function(root) {
        var r = tef(root, []);
        if (r) {
          r.nozip = true;
        }
        return r;
      };
    }
    return function(root) {
      return filterDown(root, qparts);
    };
  };
  var qsa = "querySelectorAll";
  var qsaAvail = !!goog.dom.getDocument()[qsa] && (!goog.userAgent.WEBKIT || goog.userAgent.isVersion("526"));
  var getQueryFunc = function(query, opt_forceDOM) {
    if (qsaAvail) {
      var qsaCached = _queryFuncCacheQSA[query];
      if (qsaCached && !opt_forceDOM) {
        return qsaCached;
      }
    }
    var domCached = _queryFuncCacheDOM[query];
    if (domCached) {
      return domCached;
    }
    var qcz = query.charAt(0);
    var nospace = -1 == query.indexOf(" ");
    if (query.indexOf("#") >= 0 && nospace) {
      opt_forceDOM = true;
    }
    var useQSA = qsaAvail && (!opt_forceDOM && (specials.indexOf(qcz) == -1 && ((!goog.userAgent.IE || query.indexOf(":") == -1) && (!(cssCaseBug && query.indexOf(".") >= 0) && (query.indexOf(":contains") == -1 && query.indexOf("|\x3d") == -1)))));
    if (useQSA) {
      var tq = specials.indexOf(query.charAt(query.length - 1)) >= 0 ? query + " *" : query;
      return _queryFuncCacheQSA[query] = function(root) {
        try {
          if (!(9 == root.nodeType || nospace)) {
            throw "";
          }
          var r = root[qsa](tq);
          if (goog.userAgent.IE) {
            r.commentStrip = true;
          } else {
            r.nozip = true;
          }
          return r;
        } catch (e) {
          return getQueryFunc(query, true)(root);
        }
      };
    } else {
      var parts = query.split(/\s*,\s*/);
      return _queryFuncCacheDOM[query] = parts.length < 2 ? getStepQueryFunc(query) : function(root) {
        var pindex = 0, ret = [], tp;
        while (tp = parts[pindex++]) {
          ret = ret.concat(getStepQueryFunc(tp)(root));
        }
        return ret;
      };
    }
  };
  var _zipIdx = 0;
  var _nodeUID = goog.userAgent.IE ? function(node) {
    if (caseSensitive) {
      return node.getAttribute("_uid") || (node.setAttribute("_uid", ++_zipIdx) || _zipIdx);
    } else {
      return node.uniqueID;
    }
  } : function(node) {
    return node["_uid"] || (node["_uid"] = ++_zipIdx);
  };
  var _isUnique = function(node, bag) {
    if (!bag) {
      return 1;
    }
    var id = _nodeUID(node);
    if (!bag[id]) {
      return bag[id] = 1;
    }
    return 0;
  };
  var _zipIdxName = "_zipIdx";
  var _zip = function(arr) {
    if (arr && arr.nozip) {
      return arr;
    }
    var ret = [];
    if (!arr || !arr.length) {
      return ret;
    }
    if (arr[0]) {
      ret.push(arr[0]);
    }
    if (arr.length < 2) {
      return ret;
    }
    _zipIdx++;
    if (goog.userAgent.IE && caseSensitive) {
      var szidx = _zipIdx + "";
      arr[0].setAttribute(_zipIdxName, szidx);
      for (var x = 1, te;te = arr[x];x++) {
        if (arr[x].getAttribute(_zipIdxName) != szidx) {
          ret.push(te);
        }
        te.setAttribute(_zipIdxName, szidx);
      }
    } else {
      if (goog.userAgent.IE && arr.commentStrip) {
        try {
          for (var x = 1, te;te = arr[x];x++) {
            if (isElement(te)) {
              ret.push(te);
            }
          }
        } catch (e) {
        }
      } else {
        if (arr[0]) {
          arr[0][_zipIdxName] = _zipIdx;
        }
        for (var x = 1, te;te = arr[x];x++) {
          if (arr[x][_zipIdxName] != _zipIdx) {
            ret.push(te);
          }
          te[_zipIdxName] = _zipIdx;
        }
      }
    }
    return ret;
  };
  var query = function(query, root) {
    if (!query) {
      return[];
    }
    if (query.constructor == Array) {
      return(query);
    }
    if (!goog.isString(query)) {
      return[query];
    }
    if (goog.isString(root)) {
      root = goog.dom.getElement(root);
      if (!root) {
        return[];
      }
    }
    root = root || goog.dom.getDocument();
    var od = root.ownerDocument || root.documentElement;
    caseSensitive = root.contentType && root.contentType == "application/xml" || (goog.userAgent.OPERA && (root.doctype || od.toString() == "[object XMLDocument]") || !!od && (goog.userAgent.IE ? od.xml : root.xmlVersion || od.xmlVersion));
    var r = getQueryFunc(query)(root);
    if (r && r.nozip) {
      return r;
    }
    return _zip(r);
  };
  query.pseudos = pseudos;
  return query;
}();
goog.exportSymbol("goog.dom.query", goog.dom.query);
goog.exportSymbol("goog.dom.query.pseudos", goog.dom.query.pseudos);
goog.provide("domina.css");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("domina");
domina.css.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.css.sel = function() {
  var sel = null;
  var sel__1 = function(expr) {
    return sel.call(null, domina.css.root_element.call(null), expr);
  };
  var sel__2 = function(base, expr) {
    if (typeof domina.css.t38759 !== "undefined") {
    } else {
      domina.css.t38759 = function(expr, base, sel, meta38760) {
        this.expr = expr;
        this.base = base;
        this.sel = sel;
        this.meta38760 = meta38760;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.css.t38759.cljs$lang$type = true;
      domina.css.t38759.cljs$lang$ctorStr = "domina.css/t38759";
      domina.css.t38759.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
        return cljs.core._write.call(null, writer__3969__auto__, "domina.css/t38759");
      };
      domina.css.t38759.prototype.domina$DomContent$ = true;
      domina.css.t38759.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, function(p1__38754_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__38754_SHARP_));
        }, domina.nodes.call(null, self__.base));
      };
      domina.css.t38759.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.mapcat.call(null, function(p1__38755_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__38755_SHARP_));
        }, domina.nodes.call(null, self__.base))));
      };
      domina.css.t38759.prototype.cljs$core$IMeta$_meta$arity$1 = function(_38761) {
        var self__ = this;
        var _38761__$1 = this;
        return self__.meta38760;
      };
      domina.css.t38759.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_38761, meta38760__$1) {
        var self__ = this;
        var _38761__$1 = this;
        return new domina.css.t38759(self__.expr, self__.base, self__.sel, meta38760__$1);
      };
      domina.css.__GT_t38759 = function __GT_t38759(expr__$1, base__$1, sel__$1, meta38760) {
        return new domina.css.t38759(expr__$1, base__$1, sel__$1, meta38760);
      };
    }
    return new domina.css.t38759(expr, base, sel, null);
  };
  sel = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return sel__1.call(this, base);
      case 2:
        return sel__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sel.cljs$core$IFn$_invoke$arity$1 = sel__1;
  sel.cljs$core$IFn$_invoke$arity$2 = sel__2;
  return sel;
}();
goog.provide("clustermap.nav");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("jayq.core");
goog.require("domina.events");
goog.require("domina.events");
goog.require("domina");
goog.require("domina.xpath");
goog.require("jayq.core");
goog.require("domina");
goog.require("domina.css");
goog.require("cljs.core.async");
goog.require("domina.css");
goog.require("domina.xpath");
goog.require("jayq.core");
clustermap.nav.init_bootstrap_tooltips = function init_bootstrap_tooltips() {
  return jayq.core.$.call(null, "[data-toggle\x3d'tooltip']").tooltip();
};
clustermap.nav.handle_toggle_nav_search = function handle_toggle_nav_search() {
  return domina.events.listen_BANG_.call(null, domina.css.sel.call(null, "#nav .search \x3e a"), new cljs.core.Keyword(null, "click", "click", 1108654330), function(e) {
    var target = domina.events.target.call(null, e);
    var parent = domina.xpath.xpath.call(null, target, "..");
    domina.events.prevent_default.call(null, e);
    domina.toggle_class_BANG_.call(null, parent, "open");
    return jayq.core.$.call(null, cljs.core.first.call(null, domina.nodes.call(null, domina.css.sel.call(null, "#search")))).toggle();
  });
};
clustermap.nav.handle_hide_show_map_report = function handle_hide_show_map_report() {
  return domina.events.listen_BANG_.call(null, domina.css.sel.call(null, "#map-report \x3e a"), new cljs.core.Keyword(null, "click", "click", 1108654330), function(e) {
    var target = domina.events.target.call(null, e);
    var mr = domina.css.sel.call(null, "#map-report");
    domina.events.prevent_default.call(null, e);
    if (cljs.core.truth_(domina.has_class_QMARK_.call(null, mr, "open"))) {
      domina.remove_class_BANG_.call(null, mr, "open");
      return jayq.core.anim.call(null, jayq.core.$.call(null, cljs.core.first.call(null, domina.nodes.call(null, mr))), new cljs.core.PersistentArrayMap(null, 1, ["right", "-270px"], null), 400);
    } else {
      if (true) {
        domina.add_class_BANG_.call(null, mr, "open");
        return jayq.core.anim.call(null, jayq.core.$.call(null, cljs.core.first.call(null, domina.nodes.call(null, mr))), new cljs.core.PersistentArrayMap(null, 1, ["right", "0px"], null), 400);
      } else {
        return null;
      }
    }
  });
};
clustermap.nav.body_view_classes = new cljs.core.PersistentArrayMap(null, 2, ["map", "view-map", "lists", "view-lists"], null);
clustermap.nav.change_view = function change_view(view) {
  if (cljs.core.truth_(cljs.core.get.call(null, clustermap.nav.body_view_classes, view))) {
  } else {
    throw new Error([cljs.core.str("unknown view: "), cljs.core.str(view)].join(""));
  }
  var body = domina.css.sel.call(null, "body");
  var target_selector = [cljs.core.str("#nav ."), cljs.core.str(view)].join("");
  var target_li = domina.css.sel.call(null, target_selector);
  var ul = domina.xpath.xpath.call(null, target_li, "..");
  var active_li = domina.css.sel.call(null, ul, "\x3e .active");
  domina.remove_class_BANG_.call(null, active_li, "active");
  domina.add_class_BANG_.call(null, target_li, "active");
  var seq__33743_33749 = cljs.core.seq.call(null, clustermap.nav.body_view_classes);
  var chunk__33744_33750 = null;
  var count__33745_33751 = 0;
  var i__33746_33752 = 0;
  while (true) {
    if (i__33746_33752 < count__33745_33751) {
      var vec__33747_33753 = cljs.core._nth.call(null, chunk__33744_33750, i__33746_33752);
      var v_33754 = cljs.core.nth.call(null, vec__33747_33753, 0, null);
      var body_class_33755 = cljs.core.nth.call(null, vec__33747_33753, 1, null);
      if (cljs.core._EQ_.call(null, v_33754, view)) {
        domina.add_class_BANG_.call(null, body, body_class_33755);
      } else {
        domina.remove_class_BANG_.call(null, body, body_class_33755);
      }
      var G__33756 = seq__33743_33749;
      var G__33757 = chunk__33744_33750;
      var G__33758 = count__33745_33751;
      var G__33759 = i__33746_33752 + 1;
      seq__33743_33749 = G__33756;
      chunk__33744_33750 = G__33757;
      count__33745_33751 = G__33758;
      i__33746_33752 = G__33759;
      continue;
    } else {
      var temp__4092__auto___33760 = cljs.core.seq.call(null, seq__33743_33749);
      if (temp__4092__auto___33760) {
        var seq__33743_33761__$1 = temp__4092__auto___33760;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__33743_33761__$1)) {
          var c__4148__auto___33762 = cljs.core.chunk_first.call(null, seq__33743_33761__$1);
          var G__33763 = cljs.core.chunk_rest.call(null, seq__33743_33761__$1);
          var G__33764 = c__4148__auto___33762;
          var G__33765 = cljs.core.count.call(null, c__4148__auto___33762);
          var G__33766 = 0;
          seq__33743_33749 = G__33763;
          chunk__33744_33750 = G__33764;
          count__33745_33751 = G__33765;
          i__33746_33752 = G__33766;
          continue;
        } else {
          var vec__33748_33767 = cljs.core.first.call(null, seq__33743_33761__$1);
          var v_33768 = cljs.core.nth.call(null, vec__33748_33767, 0, null);
          var body_class_33769 = cljs.core.nth.call(null, vec__33748_33767, 1, null);
          if (cljs.core._EQ_.call(null, v_33768, view)) {
            domina.add_class_BANG_.call(null, body, body_class_33769);
          } else {
            domina.remove_class_BANG_.call(null, body, body_class_33769);
          }
          var G__33770 = cljs.core.next.call(null, seq__33743_33761__$1);
          var G__33771 = null;
          var G__33772 = 0;
          var G__33773 = 0;
          seq__33743_33749 = G__33770;
          chunk__33744_33750 = G__33771;
          count__33745_33751 = G__33772;
          i__33746_33752 = G__33773;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return jayq.core.$.call(null, document).trigger("clustermap-change-view");
};
clustermap.nav.handle_view_switches = function handle_view_switches(comm) {
  var seq__33780 = cljs.core.seq.call(null, clustermap.nav.body_view_classes);
  var chunk__33781 = null;
  var count__33782 = 0;
  var i__33783 = 0;
  while (true) {
    if (i__33783 < count__33782) {
      var vec__33784 = cljs.core._nth.call(null, chunk__33781, i__33783);
      var v = cljs.core.nth.call(null, vec__33784, 0, null);
      var _ = cljs.core.nth.call(null, vec__33784, 1, null);
      domina.events.listen_BANG_.call(null, domina.css.sel.call(null, [cljs.core.str("#nav ."), cljs.core.str(v), cljs.core.str(" \x3e a")].join("")), new cljs.core.Keyword(null, "click", "click", 1108654330), function(seq__33780, chunk__33781, count__33782, i__33783, vec__33784, v, _) {
        return function(e) {
          domina.events.prevent_default.call(null, e);
          return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "change-view", "change-view", 3608283668), v], null));
        };
      }(seq__33780, chunk__33781, count__33782, i__33783, vec__33784, v, _));
      var G__33786 = seq__33780;
      var G__33787 = chunk__33781;
      var G__33788 = count__33782;
      var G__33789 = i__33783 + 1;
      seq__33780 = G__33786;
      chunk__33781 = G__33787;
      count__33782 = G__33788;
      i__33783 = G__33789;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__33780);
      if (temp__4092__auto__) {
        var seq__33780__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__33780__$1)) {
          var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__33780__$1);
          var G__33790 = cljs.core.chunk_rest.call(null, seq__33780__$1);
          var G__33791 = c__4148__auto__;
          var G__33792 = cljs.core.count.call(null, c__4148__auto__);
          var G__33793 = 0;
          seq__33780 = G__33790;
          chunk__33781 = G__33791;
          count__33782 = G__33792;
          i__33783 = G__33793;
          continue;
        } else {
          var vec__33785 = cljs.core.first.call(null, seq__33780__$1);
          var v = cljs.core.nth.call(null, vec__33785, 0, null);
          var _ = cljs.core.nth.call(null, vec__33785, 1, null);
          domina.events.listen_BANG_.call(null, domina.css.sel.call(null, [cljs.core.str("#nav ."), cljs.core.str(v), cljs.core.str(" \x3e a")].join("")), new cljs.core.Keyword(null, "click", "click", 1108654330), function(seq__33780, chunk__33781, count__33782, i__33783, vec__33785, v, _, seq__33780__$1, temp__4092__auto__) {
            return function(e) {
              domina.events.prevent_default.call(null, e);
              return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "change-view", "change-view", 3608283668), v], null));
            };
          }(seq__33780, chunk__33781, count__33782, i__33783, vec__33785, v, _, seq__33780__$1, temp__4092__auto__));
          var G__33794 = cljs.core.next.call(null, seq__33780__$1);
          var G__33795 = null;
          var G__33796 = 0;
          var G__33797 = 0;
          seq__33780 = G__33794;
          chunk__33781 = G__33795;
          count__33782 = G__33796;
          i__33783 = G__33797;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
clustermap.nav.init = function init(comm) {
  clustermap.nav.init_bootstrap_tooltips.call(null);
  clustermap.nav.handle_toggle_nav_search.call(null);
  clustermap.nav.handle_hide_show_map_report.call(null);
  return clustermap.nav.handle_view_switches.call(null, comm);
};
goog.provide("clustermap.formats.string");
goog.require("cljs.core");
clustermap.formats.string.pluralize = function() {
  var pluralize__delegate = function(n, word, p__33725) {
    var vec__33727 = p__33725;
    var irreg = cljs.core.nth.call(null, vec__33727, 0, null);
    if (n === 1) {
      return word;
    } else {
      var or__3406__auto__ = irreg;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return[cljs.core.str(word), cljs.core.str("s")].join("");
      }
    }
  };
  var pluralize = function(n, word, var_args) {
    var p__33725 = null;
    if (arguments.length > 2) {
      p__33725 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return pluralize__delegate.call(this, n, word, p__33725);
  };
  pluralize.cljs$lang$maxFixedArity = 2;
  pluralize.cljs$lang$applyTo = function(arglist__33728) {
    var n = cljs.core.first(arglist__33728);
    arglist__33728 = cljs.core.next(arglist__33728);
    var word = cljs.core.first(arglist__33728);
    var p__33725 = cljs.core.rest(arglist__33728);
    return pluralize__delegate(n, word, p__33725);
  };
  pluralize.cljs$core$IFn$_invoke$arity$variadic = pluralize__delegate;
  return pluralize;
}();
goog.provide("clustermap.components.map_report");
goog.require("cljs.core");
goog.require("clustermap.formats.string");
goog.require("clustermap.formats.number");
goog.require("sablono.core");
goog.require("cljs.core.async");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("domina.events");
goog.require("clustermap.formats.money");
goog.require("sablono.core");
goog.require("domina.events");
goog.require("om.dom");
goog.require("om.core");
goog.require("clustermap.formats.string");
goog.require("om.core");
goog.require("clustermap.formats.money");
goog.require("clustermap.formats.number");
goog.require("om.dom");
goog.require("cljs.core.async");
goog.require("clustermap.formats.string");
goog.require("clustermap.formats.number");
clustermap.components.map_report.full_report_button = function full_report_button(comm) {
  return React.DOM.button({"className":"btn", "type":"button", "onClick":function(e) {
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "change-view", "change-view", 3608283668), "lists"], null));
  }}, React.DOM.i({"className":"icon-lists-sm"}), "Full report");
};
clustermap.components.map_report.type_counts = function type_counts(site_stats) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "pc-count", "pc-count", 1986847783), function() {
    var G__33304 = site_stats;
    var G__33304__$1 = G__33304 == null ? null : (new cljs.core.Keyword(null, "portfolio_company_count", "portfolio_company_count", 1780206472)).cljs$core$IFn$_invoke$arity$1(G__33304);
    return G__33304__$1;
  }(), new cljs.core.Keyword(null, "ic-count", "ic-count", 2672077326), function() {
    var G__33305 = site_stats;
    var G__33305__$1 = G__33305 == null ? null : (new cljs.core.Keyword(null, "investor_company_count", "investor_company_count", 2333064920)).cljs$core$IFn$_invoke$arity$1(G__33305);
    return G__33305__$1;
  }(), new cljs.core.Keyword(null, "const-count", "const-count", 1728788887), function() {
    var G__33306 = site_stats;
    var G__33306__$1 = G__33306 == null ? null : (new cljs.core.Keyword(null, "constituency_count", "constituency_count", 621528264)).cljs$core$IFn$_invoke$arity$1(G__33306);
    return G__33306__$1;
  }()], null);
};
clustermap.components.map_report.all_portfolio_companies_summary_report = function all_portfolio_companies_summary_report(site_stats, comm) {
  var map__33338 = clustermap.components.map_report.type_counts.call(null, site_stats);
  var map__33338__$1 = cljs.core.seq_QMARK_.call(null, map__33338) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33338) : map__33338;
  var const_count = cljs.core.get.call(null, map__33338__$1, new cljs.core.Keyword(null, "const-count", "const-count", 1728788887));
  var ic_count = cljs.core.get.call(null, map__33338__$1, new cljs.core.Keyword(null, "ic-count", "ic-count", 2672077326));
  var pc_count = cljs.core.get.call(null, map__33338__$1, new cljs.core.Keyword(null, "pc-count", "pc-count", 1986847783));
  if (typeof clustermap.components.map_report.t33339 !== "undefined") {
  } else {
    clustermap.components.map_report.t33339 = function(pc_count, ic_count, const_count, map__33338, comm, site_stats, all_portfolio_companies_summary_report, meta33340) {
      this.pc_count = pc_count;
      this.ic_count = ic_count;
      this.const_count = const_count;
      this.map__33338 = map__33338;
      this.comm = comm;
      this.site_stats = site_stats;
      this.all_portfolio_companies_summary_report = all_portfolio_companies_summary_report;
      this.meta33340 = meta33340;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.map_report.t33339.cljs$lang$type = true;
    clustermap.components.map_report.t33339.cljs$lang$ctorStr = "clustermap.components.map-report/t33339";
    clustermap.components.map_report.t33339.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.map-report/t33339");
    };
    clustermap.components.map_report.t33339.prototype.om$core$IRender$ = true;
    clustermap.components.map_report.t33339.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div(null, React.DOM.header({"className":"secondary"}, React.DOM.h2(null, "All portfolio companies"), React.DOM.h3(null, "UK wide")), React.DOM.ul(null, function() {
        var attrs33344 = clustermap.formats.number.fnum.call(null, self__.pc_count, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33344)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33344), React.DOM.small(null, "Portfolio Companies listed"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33344), React.DOM.small(null, "Portfolio Companies listed"));
        }
      }(), function() {
        var attrs33349 = clustermap.formats.number.fnum.call(null, self__.ic_count, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33349)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33349), React.DOM.small(null, "Investors listed"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33349), React.DOM.small(null, "Investors listed"));
        }
      }(), function() {
        var attrs33354 = clustermap.formats.number.fnum.call(null, self__.const_count, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33354)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33354), function() {
            var attrs33355 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33355)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33355), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33355));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33354), function() {
            var attrs33356 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33356)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33356), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33356));
            }
          }());
        }
      }(), function() {
        var attrs33357 = clustermap.formats.money.fmoney.call(null, function() {
          var G__33367 = self__.site_stats;
          var G__33367__$1 = G__33367 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33367);
          var G__33367__$2 = G__33367__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33367__$1);
          return G__33367__$2;
        }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33357)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33357), React.DOM.small(null, "Portfolio Company Turnover"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33357), React.DOM.small(null, "Portfolio Company Turnover"));
        }
      }(), function() {
        var attrs33362 = clustermap.formats.number.fnum.call(null, function() {
          var G__33368 = self__.site_stats;
          var G__33368__$1 = G__33368 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33368);
          var G__33368__$2 = G__33368__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33368__$1);
          return G__33368__$2;
        }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33362)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33362), React.DOM.small(null, "Portfolio Company Employees"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33362), React.DOM.small(null, "Portfolio Company Employees"));
        }
      }()), sablono.interpreter.interpret.call(null, clustermap.components.map_report.full_report_button.call(null, self__.comm)));
    };
    clustermap.components.map_report.t33339.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33341) {
      var self__ = this;
      var _33341__$1 = this;
      return self__.meta33340;
    };
    clustermap.components.map_report.t33339.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33341, meta33340__$1) {
      var self__ = this;
      var _33341__$1 = this;
      return new clustermap.components.map_report.t33339(self__.pc_count, self__.ic_count, self__.const_count, self__.map__33338, self__.comm, self__.site_stats, self__.all_portfolio_companies_summary_report, meta33340__$1);
    };
    clustermap.components.map_report.__GT_t33339 = function __GT_t33339(pc_count__$1, ic_count__$1, const_count__$1, map__33338__$2, comm__$1, site_stats__$1, all_portfolio_companies_summary_report__$1, meta33340) {
      return new clustermap.components.map_report.t33339(pc_count__$1, ic_count__$1, const_count__$1, map__33338__$2, comm__$1, site_stats__$1, all_portfolio_companies_summary_report__$1, meta33340);
    };
  }
  return new clustermap.components.map_report.t33339(pc_count, ic_count, const_count, map__33338__$1, comm, site_stats, all_portfolio_companies_summary_report, null);
};
clustermap.components.map_report.portfolio_company_report = function portfolio_company_report(portfolio_company, site_stats, comm) {
  var map__33394 = clustermap.components.map_report.type_counts.call(null, site_stats);
  var map__33394__$1 = cljs.core.seq_QMARK_.call(null, map__33394) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33394) : map__33394;
  var const_count = cljs.core.get.call(null, map__33394__$1, new cljs.core.Keyword(null, "const-count", "const-count", 1728788887));
  var ic_count = cljs.core.get.call(null, map__33394__$1, new cljs.core.Keyword(null, "ic-count", "ic-count", 2672077326));
  var pc_count = cljs.core.get.call(null, map__33394__$1, new cljs.core.Keyword(null, "pc-count", "pc-count", 1986847783));
  if (typeof clustermap.components.map_report.t33395 !== "undefined") {
  } else {
    clustermap.components.map_report.t33395 = function(pc_count, ic_count, const_count, map__33394, comm, site_stats, portfolio_company, portfolio_company_report, meta33396) {
      this.pc_count = pc_count;
      this.ic_count = ic_count;
      this.const_count = const_count;
      this.map__33394 = map__33394;
      this.comm = comm;
      this.site_stats = site_stats;
      this.portfolio_company = portfolio_company;
      this.portfolio_company_report = portfolio_company_report;
      this.meta33396 = meta33396;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.map_report.t33395.cljs$lang$type = true;
    clustermap.components.map_report.t33395.cljs$lang$ctorStr = "clustermap.components.map-report/t33395";
    clustermap.components.map_report.t33395.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.map-report/t33395");
    };
    clustermap.components.map_report.t33395.prototype.om$core$IRender$ = true;
    clustermap.components.map_report.t33395.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div(null, React.DOM.header({"className":"secondary"}, React.DOM.h2(null, "Portfolio Company"), function() {
        var attrs33400 = (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(self__.portfolio_company);
        if (cljs.core.map_QMARK_.call(null, attrs33400)) {
          return React.DOM.h3(sablono.interpreter.attributes.call(null, attrs33400), null);
        } else {
          return React.DOM.h3(null, sablono.interpreter.interpret.call(null, attrs33400));
        }
      }()), React.DOM.ul(null, function() {
        var attrs33401 = clustermap.formats.number.fnum.call(null, self__.ic_count);
        if (cljs.core.map_QMARK_.call(null, attrs33401)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33401), function() {
            var attrs33402 = clustermap.formats.string.pluralize.call(null, self__.ic_count, "Investor");
            if (cljs.core.map_QMARK_.call(null, attrs33402)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33402), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33402));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33401), function() {
            var attrs33403 = clustermap.formats.string.pluralize.call(null, self__.ic_count, "Investor");
            if (cljs.core.map_QMARK_.call(null, attrs33403)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33403), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33403));
            }
          }());
        }
      }(), function() {
        var attrs33404 = clustermap.formats.number.fnum.call(null, self__.const_count);
        if (cljs.core.map_QMARK_.call(null, attrs33404)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33404), function() {
            var attrs33405 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33405)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33405), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33405));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33404), function() {
            var attrs33406 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33406)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33406), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33406));
            }
          }());
        }
      }(), function() {
        var attrs33407 = clustermap.formats.money.fmoney.call(null, function() {
          var G__33417 = self__.site_stats;
          var G__33417__$1 = G__33417 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33417);
          var G__33417__$2 = G__33417__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33417__$1);
          return G__33417__$2;
        }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33407)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33407), React.DOM.small(null, "Portfolio Company Turnover"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33407), React.DOM.small(null, "Portfolio Company Turnover"));
        }
      }(), function() {
        var attrs33412 = clustermap.formats.number.fnum.call(null, function() {
          var G__33418 = self__.site_stats;
          var G__33418__$1 = G__33418 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33418);
          var G__33418__$2 = G__33418__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33418__$1);
          return G__33418__$2;
        }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33412)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33412), React.DOM.small(null, "Portfolio Company Employees"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33412), React.DOM.small(null, "Portfolio Company Employees"));
        }
      }()), sablono.interpreter.interpret.call(null, clustermap.components.map_report.full_report_button.call(null, self__.comm)));
    };
    clustermap.components.map_report.t33395.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33397) {
      var self__ = this;
      var _33397__$1 = this;
      return self__.meta33396;
    };
    clustermap.components.map_report.t33395.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33397, meta33396__$1) {
      var self__ = this;
      var _33397__$1 = this;
      return new clustermap.components.map_report.t33395(self__.pc_count, self__.ic_count, self__.const_count, self__.map__33394, self__.comm, self__.site_stats, self__.portfolio_company, self__.portfolio_company_report, meta33396__$1);
    };
    clustermap.components.map_report.__GT_t33395 = function __GT_t33395(pc_count__$1, ic_count__$1, const_count__$1, map__33394__$2, comm__$1, site_stats__$1, portfolio_company__$1, portfolio_company_report__$1, meta33396) {
      return new clustermap.components.map_report.t33395(pc_count__$1, ic_count__$1, const_count__$1, map__33394__$2, comm__$1, site_stats__$1, portfolio_company__$1, portfolio_company_report__$1, meta33396);
    };
  }
  return new clustermap.components.map_report.t33395(pc_count, ic_count, const_count, map__33394__$1, comm, site_stats, portfolio_company, portfolio_company_report, null);
};
clustermap.components.map_report.investor_company_report = function investor_company_report(investor_company, site_stats, comm) {
  var map__33444 = clustermap.components.map_report.type_counts.call(null, site_stats);
  var map__33444__$1 = cljs.core.seq_QMARK_.call(null, map__33444) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33444) : map__33444;
  var const_count = cljs.core.get.call(null, map__33444__$1, new cljs.core.Keyword(null, "const-count", "const-count", 1728788887));
  var ic_count = cljs.core.get.call(null, map__33444__$1, new cljs.core.Keyword(null, "ic-count", "ic-count", 2672077326));
  var pc_count = cljs.core.get.call(null, map__33444__$1, new cljs.core.Keyword(null, "pc-count", "pc-count", 1986847783));
  if (typeof clustermap.components.map_report.t33445 !== "undefined") {
  } else {
    clustermap.components.map_report.t33445 = function(pc_count, ic_count, const_count, map__33444, comm, site_stats, investor_company, investor_company_report, meta33446) {
      this.pc_count = pc_count;
      this.ic_count = ic_count;
      this.const_count = const_count;
      this.map__33444 = map__33444;
      this.comm = comm;
      this.site_stats = site_stats;
      this.investor_company = investor_company;
      this.investor_company_report = investor_company_report;
      this.meta33446 = meta33446;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.map_report.t33445.cljs$lang$type = true;
    clustermap.components.map_report.t33445.cljs$lang$ctorStr = "clustermap.components.map-report/t33445";
    clustermap.components.map_report.t33445.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.map-report/t33445");
    };
    clustermap.components.map_report.t33445.prototype.om$core$IRender$ = true;
    clustermap.components.map_report.t33445.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div(null, React.DOM.header({"className":"secondary"}, React.DOM.h2(null, "Investor"), function() {
        var attrs33450 = (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(self__.investor_company);
        if (cljs.core.map_QMARK_.call(null, attrs33450)) {
          return React.DOM.h3(sablono.interpreter.attributes.call(null, attrs33450), null);
        } else {
          return React.DOM.h3(null, sablono.interpreter.interpret.call(null, attrs33450));
        }
      }()), React.DOM.ul(null, function() {
        var attrs33451 = clustermap.formats.number.fnum.call(null, self__.pc_count);
        if (cljs.core.map_QMARK_.call(null, attrs33451)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33451), function() {
            var attrs33452 = clustermap.formats.string.pluralize.call(null, self__.pc_count, "Portfolio Company", "Portfolio Companies");
            if (cljs.core.map_QMARK_.call(null, attrs33452)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33452), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33452));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33451), function() {
            var attrs33453 = clustermap.formats.string.pluralize.call(null, self__.pc_count, "Portfolio Company", "Portfolio Companies");
            if (cljs.core.map_QMARK_.call(null, attrs33453)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33453), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33453));
            }
          }());
        }
      }(), function() {
        var attrs33454 = clustermap.formats.number.fnum.call(null, self__.const_count);
        if (cljs.core.map_QMARK_.call(null, attrs33454)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33454), function() {
            var attrs33455 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33455)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33455), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33455));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33454), function() {
            var attrs33456 = clustermap.formats.string.pluralize.call(null, self__.const_count, "Constituency", "Constituencies");
            if (cljs.core.map_QMARK_.call(null, attrs33456)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33456), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33456));
            }
          }());
        }
      }(), function() {
        var attrs33457 = clustermap.formats.money.fmoney.call(null, function() {
          var G__33467 = self__.site_stats;
          var G__33467__$1 = G__33467 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33467);
          var G__33467__$2 = G__33467__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33467__$1);
          return G__33467__$2;
        }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33457)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33457), React.DOM.small(null, "Portfolio Company Turnover"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33457), React.DOM.small(null, "Portfolio Company Turnover"));
        }
      }(), function() {
        var attrs33462 = clustermap.formats.number.fnum.call(null, function() {
          var G__33468 = self__.site_stats;
          var G__33468__$1 = G__33468 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33468);
          var G__33468__$2 = G__33468__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33468__$1);
          return G__33468__$2;
        }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33462)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33462), React.DOM.small(null, "Portfolio Company Employees"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33462), React.DOM.small(null, "Portfolio Company Employees"));
        }
      }()), sablono.interpreter.interpret.call(null, clustermap.components.map_report.full_report_button.call(null, self__.comm)));
    };
    clustermap.components.map_report.t33445.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33447) {
      var self__ = this;
      var _33447__$1 = this;
      return self__.meta33446;
    };
    clustermap.components.map_report.t33445.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33447, meta33446__$1) {
      var self__ = this;
      var _33447__$1 = this;
      return new clustermap.components.map_report.t33445(self__.pc_count, self__.ic_count, self__.const_count, self__.map__33444, self__.comm, self__.site_stats, self__.investor_company, self__.investor_company_report, meta33446__$1);
    };
    clustermap.components.map_report.__GT_t33445 = function __GT_t33445(pc_count__$1, ic_count__$1, const_count__$1, map__33444__$2, comm__$1, site_stats__$1, investor_company__$1, investor_company_report__$1, meta33446) {
      return new clustermap.components.map_report.t33445(pc_count__$1, ic_count__$1, const_count__$1, map__33444__$2, comm__$1, site_stats__$1, investor_company__$1, investor_company_report__$1, meta33446);
    };
  }
  return new clustermap.components.map_report.t33445(pc_count, ic_count, const_count, map__33444__$1, comm, site_stats, investor_company, investor_company_report, null);
};
clustermap.components.map_report.constituency_report = function constituency_report(constituency, site_stats, comm) {
  var map__33498 = clustermap.components.map_report.type_counts.call(null, site_stats);
  var map__33498__$1 = cljs.core.seq_QMARK_.call(null, map__33498) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33498) : map__33498;
  var const_count = cljs.core.get.call(null, map__33498__$1, new cljs.core.Keyword(null, "const-count", "const-count", 1728788887));
  var ic_count = cljs.core.get.call(null, map__33498__$1, new cljs.core.Keyword(null, "ic-count", "ic-count", 2672077326));
  var pc_count = cljs.core.get.call(null, map__33498__$1, new cljs.core.Keyword(null, "pc-count", "pc-count", 1986847783));
  if (typeof clustermap.components.map_report.t33499 !== "undefined") {
  } else {
    clustermap.components.map_report.t33499 = function(pc_count, ic_count, const_count, map__33498, comm, site_stats, constituency, constituency_report, meta33500) {
      this.pc_count = pc_count;
      this.ic_count = ic_count;
      this.const_count = const_count;
      this.map__33498 = map__33498;
      this.comm = comm;
      this.site_stats = site_stats;
      this.constituency = constituency;
      this.constituency_report = constituency_report;
      this.meta33500 = meta33500;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.map_report.t33499.cljs$lang$type = true;
    clustermap.components.map_report.t33499.cljs$lang$ctorStr = "clustermap.components.map-report/t33499";
    clustermap.components.map_report.t33499.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.map-report/t33499");
    };
    clustermap.components.map_report.t33499.prototype.om$core$IRender$ = true;
    clustermap.components.map_report.t33499.prototype.om$core$IRender$render$arity$1 = function(this__9212__auto__) {
      var self__ = this;
      var this__9212__auto____$1 = this;
      return React.DOM.div(null, React.DOM.header({"className":"secondary"}, React.DOM.h2(null, "Constituency"), function() {
        var attrs33504 = (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(self__.constituency);
        if (cljs.core.map_QMARK_.call(null, attrs33504)) {
          return React.DOM.h3(sablono.interpreter.attributes.call(null, attrs33504), React.DOM.br(null), cljs.core.truth_(function() {
            var or__3406__auto__ = (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.constituency);
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return(new cljs.core.Keyword(null, "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.constituency);
            }
          }()) ? React.DOM.small(null, "(", sablono.interpreter.interpret.call(null, (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.constituency)), ", ", sablono.interpreter.interpret.call(null, (new cljs.core.Keyword(null, "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.constituency)), ")") : null);
        } else {
          return React.DOM.h3(null, sablono.interpreter.interpret.call(null, attrs33504), React.DOM.br(null), cljs.core.truth_(function() {
            var or__3406__auto__ = (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.constituency);
            if (cljs.core.truth_(or__3406__auto__)) {
              return or__3406__auto__;
            } else {
              return(new cljs.core.Keyword(null, "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.constituency);
            }
          }()) ? React.DOM.small(null, "(", sablono.interpreter.interpret.call(null, (new cljs.core.Keyword(null, "mp", "mp", 1013907733)).cljs$core$IFn$_invoke$arity$1(self__.constituency)), ", ", sablono.interpreter.interpret.call(null, (new cljs.core.Keyword(null, "political_party", "political_party", 2564439702)).cljs$core$IFn$_invoke$arity$1(self__.constituency)), ")") : null);
        }
      }()), React.DOM.ul(null, function() {
        var attrs33509 = clustermap.formats.number.fnum.call(null, self__.pc_count);
        if (cljs.core.map_QMARK_.call(null, attrs33509)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33509), function() {
            var attrs33510 = clustermap.formats.string.pluralize.call(null, self__.pc_count, "Portfolio Company", "Portfolio Companies");
            if (cljs.core.map_QMARK_.call(null, attrs33510)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33510), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33510));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33509), function() {
            var attrs33511 = clustermap.formats.string.pluralize.call(null, self__.pc_count, "Portfolio Company", "Portfolio Companies");
            if (cljs.core.map_QMARK_.call(null, attrs33511)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33511), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33511));
            }
          }());
        }
      }(), function() {
        var attrs33512 = clustermap.formats.number.fnum.call(null, self__.ic_count);
        if (cljs.core.map_QMARK_.call(null, attrs33512)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33512), function() {
            var attrs33513 = clustermap.formats.string.pluralize.call(null, self__.ic_count, "Investor");
            if (cljs.core.map_QMARK_.call(null, attrs33513)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33513), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33513));
            }
          }());
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33512), function() {
            var attrs33514 = clustermap.formats.string.pluralize.call(null, self__.ic_count, "Investor");
            if (cljs.core.map_QMARK_.call(null, attrs33514)) {
              return React.DOM.small(sablono.interpreter.attributes.call(null, attrs33514), null);
            } else {
              return React.DOM.small(null, sablono.interpreter.interpret.call(null, attrs33514));
            }
          }());
        }
      }(), function() {
        var attrs33515 = clustermap.formats.money.fmoney.call(null, function() {
          var G__33525 = self__.site_stats;
          var G__33525__$1 = G__33525 == null ? null : (new cljs.core.Keyword(null, "turnover", "turnover", 1148922435)).cljs$core$IFn$_invoke$arity$1(G__33525);
          var G__33525__$2 = G__33525__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33525__$1);
          return G__33525__$2;
        }(), new cljs.core.Keyword(null, "sf", "sf", 1013907909), 2, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33515)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33515), React.DOM.small(null, "Portfolio Company Turnover"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33515), React.DOM.small(null, "Portfolio Company Turnover"));
        }
      }(), function() {
        var attrs33520 = clustermap.formats.number.fnum.call(null, function() {
          var G__33526 = self__.site_stats;
          var G__33526__$1 = G__33526 == null ? null : (new cljs.core.Keyword(null, "employee_count", "employee_count", 2542621616)).cljs$core$IFn$_invoke$arity$1(G__33526);
          var G__33526__$2 = G__33526__$1 == null ? null : (new cljs.core.Keyword(null, "total", "total", 1124454070)).cljs$core$IFn$_invoke$arity$1(G__33526__$1);
          return G__33526__$2;
        }(), new cljs.core.Keyword(null, "dec", "dec", 1014003572), 0, new cljs.core.Keyword(null, "default", "default", 2558708147), "-");
        if (cljs.core.map_QMARK_.call(null, attrs33520)) {
          return React.DOM.li(sablono.interpreter.attributes.call(null, attrs33520), React.DOM.small(null, "Portfolio Company Employees"));
        } else {
          return React.DOM.li(null, sablono.interpreter.interpret.call(null, attrs33520), React.DOM.small(null, "Portfolio Company Employees"));
        }
      }()), sablono.interpreter.interpret.call(null, clustermap.components.map_report.full_report_button.call(null, self__.comm)));
    };
    clustermap.components.map_report.t33499.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33501) {
      var self__ = this;
      var _33501__$1 = this;
      return self__.meta33500;
    };
    clustermap.components.map_report.t33499.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33501, meta33500__$1) {
      var self__ = this;
      var _33501__$1 = this;
      return new clustermap.components.map_report.t33499(self__.pc_count, self__.ic_count, self__.const_count, self__.map__33498, self__.comm, self__.site_stats, self__.constituency, self__.constituency_report, meta33500__$1);
    };
    clustermap.components.map_report.__GT_t33499 = function __GT_t33499(pc_count__$1, ic_count__$1, const_count__$1, map__33498__$2, comm__$1, site_stats__$1, constituency__$1, constituency_report__$1, meta33500) {
      return new clustermap.components.map_report.t33499(pc_count__$1, ic_count__$1, const_count__$1, map__33498__$2, comm__$1, site_stats__$1, constituency__$1, constituency_report__$1, meta33500);
    };
  }
  return new clustermap.components.map_report.t33499(pc_count, ic_count, const_count, map__33498__$1, comm, site_stats, constituency, constituency_report, null);
};
clustermap.components.map_report.map_report_component = function map_report_component(data, owner) {
  var comm = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
  var type = cljs.core.get_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.Keyword(null, "type", "type", 1017479852)], null));
  var value = cljs.core.get_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.Keyword(null, "value", "value", 1125876963)], null));
  var site_stats = (new cljs.core.Keyword(null, "selection-investment-stats", "selection-investment-stats", 4568560312)).cljs$core$IFn$_invoke$arity$1(data);
  var pred__33530 = cljs.core._EQ__EQ_;
  var expr__33531 = type;
  if (cljs.core.truth_(pred__33530.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), expr__33531))) {
    return clustermap.components.map_report.portfolio_company_report.call(null, value, site_stats, comm);
  } else {
    if (cljs.core.truth_(pred__33530.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), expr__33531))) {
      return clustermap.components.map_report.investor_company_report.call(null, value, site_stats, comm);
    } else {
      if (cljs.core.truth_(pred__33530.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), expr__33531))) {
        return clustermap.components.map_report.constituency_report.call(null, value, site_stats, comm);
      } else {
        return clustermap.components.map_report.all_portfolio_companies_summary_report.call(null, site_stats, comm);
      }
    }
  }
};
clustermap.components.map_report.mount = function mount(app_state, elem_id, shared) {
  return om.core.root.call(null, app_state, shared, clustermap.components.map_report.map_report_component, document.getElementById(elem_id));
};
goog.provide("clustermap.components.map");
goog.require("cljs.core");
goog.require("sablono.core");
goog.require("cljs.core.async");
goog.require("jayq.core");
goog.require("clustermap.boundarylines");
goog.require("clustermap.boundarylines");
goog.require("sablono.core");
goog.require("sablono.core");
goog.require("om.dom");
goog.require("om.core");
goog.require("clustermap.rtree");
goog.require("om.core");
goog.require("clustermap.rtree");
goog.require("hiccups.runtime");
goog.require("hiccups.runtime");
goog.require("clojure.set");
goog.require("om.dom");
goog.require("clojure.set");
goog.require("cljs.core.async");
goog.require("jayq.core");
clustermap.components.map.initial_bounds = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [59.54, 2.3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [49.29, -11.29], null)], null);
clustermap.components.map.locate_map = function locate_map(m) {
  return m.fitBounds(cljs.core.clj__GT_js.call(null, clustermap.components.map.initial_bounds), cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, ["paddingTopLeft", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0], null), "paddingBottomRight", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0], null)], null)));
};
clustermap.components.map.api_key = function() {
  var or__3406__auto__ = function() {
    var G__33169 = config;
    var G__33169__$1 = G__33169 == null ? null : G__33169.components;
    var G__33169__$2 = G__33169__$1 == null ? null : G__33169__$1.map;
    var G__33169__$3 = G__33169__$2 == null ? null : G__33169__$2.api_key;
    return G__33169__$3;
  }();
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return "mccraigmccraig.h4f921b9";
  }
}();
clustermap.components.map.create_map = function create_map(id_or_el) {
  var m = L.map.call(null, id_or_el, {"zoomControl":false});
  var tiles = L.mapbox.tileLayer.call(null, clustermap.components.map.api_key, {"detectRetina":cljs.core.not.call(null, config.repl)});
  var zoom = L.control.zoom.call(null, {"position":"bottomright"});
  m.addLayer(tiles);
  m.addControl(zoom);
  clustermap.components.map.locate_map.call(null, m);
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "leaflet-map", "leaflet-map", 4353500414), m, new cljs.core.Keyword(null, "markers", "markers", 1853155051), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "paths", "paths", 1120343136), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "path-selections", "path-selections", 512369281), cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY)], 
  null);
};
clustermap.components.map.geojson_point_bounds = function geojson_point_bounds(longlats) {
  var s = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, cljs.core.last, longlats));
  var w = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, cljs.core.first, longlats));
  var n = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, cljs.core.last, longlats));
  var e = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, cljs.core.first, longlats));
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = s;
    if (cljs.core.truth_(and__3394__auto__)) {
      var and__3394__auto____$1 = w;
      if (cljs.core.truth_(and__3394__auto____$1)) {
        var and__3394__auto____$2 = n;
        if (cljs.core.truth_(and__3394__auto____$2)) {
          return e;
        } else {
          return and__3394__auto____$2;
        }
      } else {
        return and__3394__auto____$1;
      }
    } else {
      return and__3394__auto__;
    }
  }())) {
    return L.latLngBounds(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, w], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [n, e], null)], null)));
  } else {
    return null;
  }
};
clustermap.components.map.pan_to_show = function() {
  var pan_to_show__delegate = function(m, all_bounds) {
    if (cljs.core.truth_(cljs.core.not_empty.call(null, all_bounds))) {
      var fb = cljs.core.first.call(null, all_bounds);
      var fb_copy = new L.LatLngBounds(fb.getSouthWest(), fb.getNorthEast());
      var super_bounds = cljs.core.reduce.call(null, function(fb, fb_copy) {
        return function(sb, bounds) {
          return sb.extend(bounds);
        };
      }(fb, fb_copy), fb_copy, cljs.core.rest.call(null, all_bounds));
      return m.fitBounds(super_bounds);
    } else {
      return null;
    }
  };
  var pan_to_show = function(m, var_args) {
    var all_bounds = null;
    if (arguments.length > 1) {
      all_bounds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pan_to_show__delegate.call(this, m, all_bounds);
  };
  pan_to_show.cljs$lang$maxFixedArity = 1;
  pan_to_show.cljs$lang$applyTo = function(arglist__33170) {
    var m = cljs.core.first(arglist__33170);
    var all_bounds = cljs.core.rest(arglist__33170);
    return pan_to_show__delegate(m, all_bounds);
  };
  pan_to_show.cljs$core$IFn$_invoke$arity$variadic = pan_to_show__delegate;
  return pan_to_show;
}();
clustermap.components.map.display_site = function display_site(m, site) {
  var location = cljs.core.clj__GT_js.call(null, cljs.core.reverse.call(null, site["location"]));
  var options = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "title", "title", 1124275658), [cljs.core.str(site["name"]), cljs.core.str(", "), cljs.core.str(site["postcode"]), cljs.core.str(", "), cljs.core.str(site["company_no"])].join("")], null));
  var marker = L.marker(location, options);
  return marker.addTo(m);
};
clustermap.components.map.display_sites = function display_sites(m, sites) {
  return function(c) {
    return casync.dorun_async.call(null, c, new cljs.core.Keyword(null, "delay", "delay", 1109372149), null);
  }.call(null, casync.map_async.call(null, cljs.core.partial.call(null, clustermap.components.map.display_site, m), sites));
};
clustermap.components.map.marker_popup_content = function marker_popup_content(path_fn, location_sites) {
  return[cljs.core.str(function() {
    var attrs33172 = cljs.core.map.call(null, function(site) {
      return[cljs.core.str("\x3cli"), cljs.core.str(""), cljs.core.str("\x3e"), cljs.core.str("\x3ca"), cljs.core.str(hiccups.runtime.render_attr_map.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "href", "href", 1017115293), path_fn.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), site), new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "class", "class", 1108647146), null], null))), 
      cljs.core.str("\x3e"), cljs.core.str(hiccups.runtime.render_html.call(null, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(site))), cljs.core.str("\x3c/a\x3e"), cljs.core.str("\x3c/li\x3e")].join("");
    }, location_sites);
    if (cljs.core.map_QMARK_.call(null, attrs33172)) {
      return[cljs.core.str("\x3cul"), cljs.core.str(hiccups.runtime.render_attr_map.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "class", "class", 1108647146), "map-marker-popup-location-list"], null), attrs33172))), cljs.core.str("\x3e"), cljs.core.str("\x3c/ul\x3e")].join("");
    } else {
      return[cljs.core.str('\x3cul class\x3d"map-marker-popup-location-list"\x3e'), cljs.core.str(hiccups.runtime.render_html.call(null, attrs33172)), cljs.core.str("\x3c/ul\x3e")].join("");
    }
  }())].join("");
};
clustermap.components.map.create_marker = function create_marker(path_fn, leaflet_map, location_sites) {
  var temp__4090__auto__ = function() {
    var G__33175 = location_sites;
    var G__33175__$1 = G__33175 == null ? null : cljs.core.first.call(null, G__33175);
    var G__33175__$2 = G__33175__$1 == null ? null : (new cljs.core.Keyword(null, "location", "location", 2914947879)).cljs$core$IFn$_invoke$arity$1(G__33175__$1);
    var G__33175__$3 = G__33175__$2 == null ? null : cljs.core.reverse.call(null, G__33175__$2);
    var G__33175__$4 = G__33175__$3 == null ? null : cljs.core.clj__GT_js.call(null, G__33175__$3);
    return G__33175__$4;
  }();
  if (cljs.core.truth_(temp__4090__auto__)) {
    var latlong = temp__4090__auto__;
    var icon = L.divIcon(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "map-marker", new cljs.core.Keyword(null, "iconSize", "iconSize", 4570914700), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [24, 28], null), new cljs.core.Keyword(null, "iconAnchor", "iconAnchor", 4290568192), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [12, 
    14], null), new cljs.core.Keyword(null, "popupAnchor", "popupAnchor", 1041293811), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, -8], null)], null)));
    var marker = L.marker(latlong, cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "icon", "icon", 1017130987), icon], null)));
    var popup_content = clustermap.components.map.marker_popup_content.call(null, path_fn, location_sites);
    marker.bindPopup(popup_content);
    marker.addTo(leaflet_map);
    return marker;
  } else {
    return console.log([cljs.core.str("missing location: "), cljs.core.str(function() {
      var sb__4298__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_33176_33177 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(x__4299__auto__) {
          return sb__4298__auto__.append(x__4299__auto__);
        };
        cljs.core.pr.call(null, location_sites);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_33176_33177;
      }
      return[cljs.core.str(sb__4298__auto__)].join("");
    }())].join(""));
  }
};
clustermap.components.map.update_marker = function update_marker(path_fn, leaflet_map, marker, location) {
  marker.setPopupContent(clustermap.components.map.marker_popup_content.call(null, path_fn, location));
  return marker;
};
clustermap.components.map.remove_marker = function remove_marker(leaflet_map, marker) {
  return leaflet_map.removeLayer(marker);
};
clustermap.components.map.update_markers = function update_markers(path_fn, leaflet_map, markers_atom, new_locations) {
  var markers = cljs.core.deref.call(null, markers_atom);
  var marker_keys = cljs.core.set.call(null, cljs.core.keys.call(null, markers));
  var location_keys = cljs.core.set.call(null, cljs.core.keys.call(null, new_locations));
  var update_marker_keys = clojure.set.intersection.call(null, marker_keys, location_keys);
  var new_marker_keys = clojure.set.difference.call(null, location_keys, marker_keys);
  var remove_marker_keys = clojure.set.difference.call(null, marker_keys, location_keys);
  var new_markers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(markers, marker_keys, location_keys, update_marker_keys, new_marker_keys, remove_marker_keys) {
    return function(k) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, clustermap.components.map.create_marker.call(null, path_fn, leaflet_map, cljs.core.get.call(null, new_locations, k))], null);
    };
  }(markers, marker_keys, location_keys, update_marker_keys, new_marker_keys, remove_marker_keys), new_marker_keys));
  var updated_markers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(markers, marker_keys, location_keys, update_marker_keys, new_marker_keys, remove_marker_keys, new_markers) {
    return function(k) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, clustermap.components.map.update_marker.call(null, path_fn, leaflet_map, cljs.core.get.call(null, markers, k), cljs.core.get.call(null, new_locations, k))], null);
    };
  }(markers, marker_keys, location_keys, update_marker_keys, new_marker_keys, remove_marker_keys, new_markers), update_marker_keys));
  var _ = function() {
    var seq__33182 = cljs.core.seq.call(null, remove_marker_keys);
    var chunk__33183 = null;
    var count__33184 = 0;
    var i__33185 = 0;
    while (true) {
      if (i__33185 < count__33184) {
        var k = cljs.core._nth.call(null, chunk__33183, i__33185);
        clustermap.components.map.remove_marker.call(null, leaflet_map, cljs.core.get.call(null, markers, k));
        var G__33186 = seq__33182;
        var G__33187 = chunk__33183;
        var G__33188 = count__33184;
        var G__33189 = i__33185 + 1;
        seq__33182 = G__33186;
        chunk__33183 = G__33187;
        count__33184 = G__33188;
        i__33185 = G__33189;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__33182);
        if (temp__4092__auto__) {
          var seq__33182__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__33182__$1)) {
            var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__33182__$1);
            var G__33190 = cljs.core.chunk_rest.call(null, seq__33182__$1);
            var G__33191 = c__4148__auto__;
            var G__33192 = cljs.core.count.call(null, c__4148__auto__);
            var G__33193 = 0;
            seq__33182 = G__33190;
            chunk__33183 = G__33191;
            count__33184 = G__33192;
            i__33185 = G__33193;
            continue;
          } else {
            var k = cljs.core.first.call(null, seq__33182__$1);
            clustermap.components.map.remove_marker.call(null, leaflet_map, cljs.core.get.call(null, markers, k));
            var G__33194 = cljs.core.next.call(null, seq__33182__$1);
            var G__33195 = null;
            var G__33196 = 0;
            var G__33197 = 0;
            seq__33182 = G__33194;
            chunk__33183 = G__33195;
            count__33184 = G__33196;
            i__33185 = G__33197;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  return cljs.core.reset_BANG_.call(null, markers_atom, cljs.core.merge.call(null, updated_markers, new_markers));
};
clustermap.components.map.postgis_envelope__GT_latlngbounds = function postgis_envelope__GT_latlngbounds(envelope) {
  var map__33206 = cljs.core.js__GT_clj.call(null, envelope);
  var map__33206__$1 = cljs.core.seq_QMARK_.call(null, map__33206) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33206) : map__33206;
  var clj_envelope = map__33206__$1;
  var vec__33207 = cljs.core.get.call(null, map__33206__$1, "coordinates");
  var vec__33208 = cljs.core.nth.call(null, vec__33207, 0, null);
  var vec__33209 = cljs.core.nth.call(null, vec__33208, 0, null);
  var miny0 = cljs.core.nth.call(null, vec__33209, 0, null);
  var minx0 = cljs.core.nth.call(null, vec__33209, 1, null);
  var vec__33210 = cljs.core.nth.call(null, vec__33208, 1, null);
  var maxy1 = cljs.core.nth.call(null, vec__33210, 0, null);
  var minx1 = cljs.core.nth.call(null, vec__33210, 1, null);
  var vec__33211 = cljs.core.nth.call(null, vec__33208, 2, null);
  var maxy2 = cljs.core.nth.call(null, vec__33211, 0, null);
  var maxx2 = cljs.core.nth.call(null, vec__33211, 1, null);
  var vec__33212 = cljs.core.nth.call(null, vec__33208, 3, null);
  var miny3 = cljs.core.nth.call(null, vec__33212, 0, null);
  var maxx3 = cljs.core.nth.call(null, vec__33212, 1, null);
  var vec__33213 = cljs.core.nth.call(null, vec__33208, 4, null);
  var miny4 = cljs.core.nth.call(null, vec__33213, 0, null);
  var minx4 = cljs.core.nth.call(null, vec__33213, 1, null);
  var inner = vec__33208;
  var coords = vec__33207;
  return L.latLngBounds(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minx0, miny0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [maxx2, maxy2], null)], null)));
};
clustermap.components.map.tolerance_boundaryline = function tolerance_boundaryline(fetch_boundaryline_fn, index, boundaryline_id, zoom) {
  var default_bl = cljs.core.truth_(index) ? index[boundaryline_id] : null;
  var default_tolerance = cljs.core.truth_(default_bl) ? default_bl["tolerance"] : null;
  var default$ = cljs.core.truth_(default_bl) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default_tolerance, default_bl], null) : null;
  var or__3406__auto__ = fetch_boundaryline_fn.call(null, boundaryline_id, zoom, new cljs.core.Keyword(null, "min-zoom", "min-zoom", 3894785504), 7);
  if (cljs.core.truth_(or__3406__auto__)) {
    return or__3406__auto__;
  } else {
    return default$;
  }
};
clustermap.components.map.style_leaflet_path = function style_leaflet_path(leaflet_path, p__33214) {
  var map__33216 = p__33214;
  var map__33216__$1 = cljs.core.seq_QMARK_.call(null, map__33216) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33216) : map__33216;
  var highlighted = cljs.core.get.call(null, map__33216__$1, new cljs.core.Keyword(null, "highlighted", "highlighted", 3500421061));
  var selected = cljs.core.get.call(null, map__33216__$1, new cljs.core.Keyword(null, "selected", "selected", 2205476365));
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = selected;
    if (cljs.core.truth_(and__3394__auto__)) {
      return highlighted;
    } else {
      return and__3394__auto__;
    }
  }())) {
    return leaflet_path.setStyle(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "color", "color", 1108746965), "#0000aa", new cljs.core.Keyword(null, "weight", "weight", 4517279210), 2, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1, new cljs.core.Keyword(null, "fill", "fill", 1017047285), true, new cljs.core.Keyword(null, "fillOpacity", "fillOpacity", 960226426), 0.2], null)));
  } else {
    if (cljs.core.truth_(selected)) {
      return leaflet_path.setStyle(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "color", "color", 1108746965), "#0000aa", new cljs.core.Keyword(null, "weight", "weight", 4517279210), 2, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1, new cljs.core.Keyword(null, "fill", "fill", 1017047285), true, new cljs.core.Keyword(null, "fillOpacity", "fillOpacity", 960226426), 0.2], null)));
    } else {
      if (cljs.core.truth_(highlighted)) {
        return leaflet_path.setStyle(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "color", "color", 1108746965), "#000000", new cljs.core.Keyword(null, "weight", "weight", 4517279210), 2, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1, new cljs.core.Keyword(null, "fill", "fill", 1017047285), false], null)));
      } else {
        if (true) {
          return leaflet_path.setStyle(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "color", "color", 1108746965), "#ff0000", new cljs.core.Keyword(null, "weight", "weight", 4517279210), 2, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 0, new cljs.core.Keyword(null, "fill", "fill", 1017047285), false, new cljs.core.Keyword(null, "fillOpacity", "fillOpacity", 960226426), 0], null)));
        } else {
          return null;
        }
      }
    }
  }
};
clustermap.components.map.create_path = function create_path(comm, leaflet_map, boundaryline_id, js_boundaryline, p__33217) {
  var map__33219 = p__33217;
  var map__33219__$1 = cljs.core.seq_QMARK_.call(null, map__33219) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33219) : map__33219;
  var path_attrs = map__33219__$1;
  var selected = cljs.core.get.call(null, map__33219__$1, new cljs.core.Keyword(null, "selected", "selected", 2205476365));
  var tolerance = js_boundaryline["tolerance"];
  var bounds = clustermap.components.map.postgis_envelope__GT_latlngbounds.call(null, js_boundaryline["envelope"]);
  var leaflet_path = L.geoJson(js_boundaryline["geojson"]);
  clustermap.components.map.style_leaflet_path.call(null, leaflet_path, path_attrs);
  leaflet_path.addTo(leaflet_map);
  leaflet_path.on("click", function(e) {
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 4402849902), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), boundaryline_id], null)], null));
  });
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "id", "id", 1013907597), boundaryline_id, new cljs.core.Keyword(null, "tolerance", "tolerance", 2046976895), tolerance, new cljs.core.Keyword(null, "selected", "selected", 2205476365), selected, new cljs.core.Keyword(null, "leaflet-path", "leaflet-path", 1462260071), leaflet_path, new cljs.core.Keyword(null, "bounds", "bounds", 3925666343), bounds], null);
};
clustermap.components.map.fetch_create_path = function fetch_create_path(comm, fetch_boundaryline_fn, js_boundaryline_index, leaflet_map, boundaryline_id, path_attrs) {
  var temp__4090__auto__ = clustermap.components.map.tolerance_boundaryline.call(null, fetch_boundaryline_fn, js_boundaryline_index, boundaryline_id, leaflet_map.getZoom());
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__33221 = temp__4090__auto__;
    var tolerance = cljs.core.nth.call(null, vec__33221, 0, null);
    var js_boundaryline = cljs.core.nth.call(null, vec__33221, 1, null);
    return clustermap.components.map.create_path.call(null, comm, leaflet_map, boundaryline_id, js_boundaryline, path_attrs);
  } else {
    return null;
  }
};
clustermap.components.map.replace_path = function replace_path(comm, leaflet_map, boundaryline_id, old_path, js_boundaryline, path_attrs) {
  leaflet_map.removeLayer((new cljs.core.Keyword(null, "leaflet-path", "leaflet-path", 1462260071)).cljs$core$IFn$_invoke$arity$1(old_path));
  return clustermap.components.map.create_path.call(null, comm, leaflet_map, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(old_path), js_boundaryline, path_attrs);
};
clustermap.components.map.update_path = function update_path(comm, fetch_boundaryline_fn, js_boundaryline_index, leaflet_map, p__33222, path_attrs) {
  var map__33225 = p__33222;
  var map__33225__$1 = cljs.core.seq_QMARK_.call(null, map__33225) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33225) : map__33225;
  var path = map__33225__$1;
  var boundaryline_id = cljs.core.get.call(null, map__33225__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var temp__4090__auto__ = clustermap.components.map.tolerance_boundaryline.call(null, fetch_boundaryline_fn, js_boundaryline_index, boundaryline_id, leaflet_map.getZoom());
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__33226 = temp__4090__auto__;
    var tolerance = cljs.core.nth.call(null, vec__33226, 0, null);
    var js_boundaryline = cljs.core.nth.call(null, vec__33226, 1, null);
    if (cljs.core.not_EQ_.call(null, tolerance, (new cljs.core.Keyword(null, "tolerance", "tolerance", 2046976895)).cljs$core$IFn$_invoke$arity$1(path))) {
      return clustermap.components.map.replace_path.call(null, comm, leaflet_map, boundaryline_id, path, js_boundaryline, path_attrs);
    } else {
      clustermap.components.map.style_leaflet_path.call(null, (new cljs.core.Keyword(null, "leaflet-path", "leaflet-path", 1462260071)).cljs$core$IFn$_invoke$arity$1(path), path_attrs);
      return path;
    }
  } else {
    return path;
  }
};
clustermap.components.map.delete_path = function delete_path(leaflet_map, path) {
  return leaflet_map.removeLayer((new cljs.core.Keyword(null, "leaflet-path", "leaflet-path", 1462260071)).cljs$core$IFn$_invoke$arity$1(path));
};
clustermap.components.map.update_paths = function update_paths(comm, fetch_boundaryline_fn, js_boundaryline_index, leaflet_map, paths_atom, path_selections_atom, new_path_highlights, new_selection_locations) {
  if (cljs.core.truth_(js_boundaryline_index)) {
    var paths = cljs.core.deref.call(null, paths_atom);
    var path_keys = cljs.core.set.call(null, cljs.core.keys.call(null, paths));
    var old_selection_path_keys = cljs.core.deref.call(null, path_selections_atom);
    var new_selection_path_keys = cljs.core.set.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "uk_constituencies", "uk_constituencies", 575411487), new cljs.core.Keyword(null, "boundarylinecolls", "boundarylinecolls", 2038297115)), cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, new_selection_locations)))));
    var live_path_keys = clojure.set.union.call(null, new_selection_path_keys, new_path_highlights);
    var create_path_keys = clojure.set.difference.call(null, live_path_keys, path_keys);
    var delete_path_keys = clojure.set.difference.call(null, path_keys, live_path_keys);
    var update_path_keys = clojure.set.intersection.call(null, path_keys, live_path_keys);
    var created_paths = cljs.core.map.call(null, function(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys) {
      return function(k) {
        return clustermap.components.map.fetch_create_path.call(null, comm, fetch_boundaryline_fn, js_boundaryline_index, leaflet_map, k, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core.contains_QMARK_.call(null, new_selection_path_keys, k), new cljs.core.Keyword(null, "highlighted", "highlighted", 3500421061), cljs.core.contains_QMARK_.call(null, new_path_highlights, k)], null));
      };
    }(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys), create_path_keys);
    var updated_paths = cljs.core.map.call(null, function(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys, created_paths) {
      return function(k) {
        return clustermap.components.map.update_path.call(null, comm, fetch_boundaryline_fn, js_boundaryline_index, leaflet_map, cljs.core.get.call(null, paths, k), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core.contains_QMARK_.call(null, new_selection_path_keys, k), new cljs.core.Keyword(null, "highlighted", "highlighted", 3500421061), cljs.core.contains_QMARK_.call(null, new_path_highlights, k)], null));
      };
    }(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys, created_paths), update_path_keys);
    var _ = function() {
      var seq__33233 = cljs.core.seq.call(null, delete_path_keys);
      var chunk__33234 = null;
      var count__33235 = 0;
      var i__33236 = 0;
      while (true) {
        if (i__33236 < count__33235) {
          var k = cljs.core._nth.call(null, chunk__33234, i__33236);
          var temp__4090__auto___33239 = cljs.core.get.call(null, paths, k);
          if (cljs.core.truth_(temp__4090__auto___33239)) {
            var path_33240 = temp__4090__auto___33239;
            clustermap.components.map.delete_path.call(null, leaflet_map, path_33240);
          } else {
          }
          var G__33241 = seq__33233;
          var G__33242 = chunk__33234;
          var G__33243 = count__33235;
          var G__33244 = i__33236 + 1;
          seq__33233 = G__33241;
          chunk__33234 = G__33242;
          count__33235 = G__33243;
          i__33236 = G__33244;
          continue;
        } else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__33233);
          if (temp__4092__auto__) {
            var seq__33233__$1 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__33233__$1)) {
              var c__4148__auto__ = cljs.core.chunk_first.call(null, seq__33233__$1);
              var G__33245 = cljs.core.chunk_rest.call(null, seq__33233__$1);
              var G__33246 = c__4148__auto__;
              var G__33247 = cljs.core.count.call(null, c__4148__auto__);
              var G__33248 = 0;
              seq__33233 = G__33245;
              chunk__33234 = G__33246;
              count__33235 = G__33247;
              i__33236 = G__33248;
              continue;
            } else {
              var k = cljs.core.first.call(null, seq__33233__$1);
              var temp__4090__auto___33249 = cljs.core.get.call(null, paths, k);
              if (cljs.core.truth_(temp__4090__auto___33249)) {
                var path_33250 = temp__4090__auto___33249;
                clustermap.components.map.delete_path.call(null, leaflet_map, path_33250);
              } else {
              }
              var G__33251 = cljs.core.next.call(null, seq__33233__$1);
              var G__33252 = null;
              var G__33253 = 0;
              var G__33254 = 0;
              seq__33233 = G__33251;
              chunk__33234 = G__33252;
              count__33235 = G__33253;
              i__33236 = G__33254;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }();
    var new_paths = cljs.core.reduce.call(null, function(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys, created_paths, updated_paths, _) {
      return function(m, p__33237) {
        var map__33238 = p__33237;
        var map__33238__$1 = cljs.core.seq_QMARK_.call(null, map__33238) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33238) : map__33238;
        var path = map__33238__$1;
        var id = cljs.core.get.call(null, map__33238__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
        return cljs.core.assoc.call(null, m, id, path);
      };
    }(paths, path_keys, old_selection_path_keys, new_selection_path_keys, live_path_keys, create_path_keys, delete_path_keys, update_path_keys, created_paths, updated_paths, _), cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, cljs.core.identity, cljs.core.concat.call(null, created_paths, updated_paths)));
    cljs.core.reset_BANG_.call(null, path_selections_atom, new_selection_path_keys);
    return cljs.core.reset_BANG_.call(null, paths_atom, new_paths);
  } else {
    return null;
  }
};
clustermap.components.map.pan_to_selection = function pan_to_selection(owner, leaflet_map, paths_atom, path_selections_atom) {
  var paths = cljs.core.deref.call(null, paths_atom);
  var path_selections = cljs.core.deref.call(null, path_selections_atom);
  if (cljs.core.empty_QMARK_.call(null, paths)) {
    clustermap.components.map.locate_map.call(null, leaflet_map);
    return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "pan-pending", "pan-pending", 3214812121), true);
  } else {
    om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "pan-pending", "pan-pending", 3214812121), false);
    var temp__4090__auto__ = function() {
      var G__33256 = cljs.core.select_keys.call(null, paths, path_selections);
      var G__33256__$1 = G__33256 == null ? null : cljs.core.vals.call(null, G__33256);
      var G__33256__$2 = G__33256__$1 == null ? null : cljs.core.map.call(null, new cljs.core.Keyword(null, "bounds", "bounds", 3925666343), G__33256__$1);
      return G__33256__$2;
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var bounds = temp__4090__auto__;
      return cljs.core.apply.call(null, clustermap.components.map.pan_to_show, leaflet_map, bounds);
    } else {
      return clustermap.components.map.pan_to_show.call(null, clustermap.components.map.initial_bounds);
    }
  }
};
clustermap.components.map.map_component = function map_component(p__33257, owner) {
  var map__33277 = p__33257;
  var map__33277__$1 = cljs.core.seq_QMARK_.call(null, map__33277) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33277) : map__33277;
  var app_state = map__33277__$1;
  var selection = cljs.core.get.call(null, map__33277__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
  if (typeof clustermap.components.map.t33278 !== "undefined") {
  } else {
    clustermap.components.map.t33278 = function(selection, app_state, map__33277, owner, p__33257, map_component, meta33279) {
      this.selection = selection;
      this.app_state = app_state;
      this.map__33277 = map__33277;
      this.owner = owner;
      this.p__33257 = p__33257;
      this.map_component = map_component;
      this.meta33279 = meta33279;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    clustermap.components.map.t33278.cljs$lang$type = true;
    clustermap.components.map.t33278.cljs$lang$ctorStr = "clustermap.components.map/t33278";
    clustermap.components.map.t33278.cljs$lang$ctorPrWriter = function(this__3968__auto__, writer__3969__auto__, opt__3970__auto__) {
      return cljs.core._write.call(null, writer__3969__auto__, "clustermap.components.map/t33278");
    };
    clustermap.components.map.t33278.prototype.om$core$IWillUpdate$ = true;
    clustermap.components.map.t33278.prototype.om$core$IWillUpdate$will_update$arity$3 = function(this$, p__33281, p__33282) {
      var self__ = this;
      var map__33283 = p__33281;
      var map__33283__$1 = cljs.core.seq_QMARK_.call(null, map__33283) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33283) : map__33283;
      var next_selection = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "selection", "selection", 3592905982));
      var next_locations = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "selection-portfolio-company-locations", "selection-portfolio-company-locations", 1821239162));
      var next_uk_constituencies = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "uk-constituencies", "uk-constituencies", 2507232365));
      var next_uk_constituencies_rtree = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "uk-constituencies-rtree", "uk-constituencies-rtree", 3542903600));
      var next_boundarylines = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "boundarylines", "boundarylines", 2397299847));
      var next_zoom = cljs.core.get.call(null, map__33283__$1, new cljs.core.Keyword(null, "zoom", "zoom", 1017648965));
      var map__33284 = p__33282;
      var map__33284__$1 = cljs.core.seq_QMARK_.call(null, map__33284) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33284) : map__33284;
      var next_path_highlights = cljs.core.get.call(null, map__33284__$1, new cljs.core.Keyword(null, "path-highlights", "path-highlights", 2524998745));
      var this$__$1 = this;
      var map__33285 = om.core.get_props.call(null, self__.owner);
      var map__33285__$1 = cljs.core.seq_QMARK_.call(null, map__33285) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33285) : map__33285;
      var uk_constituencies_rtree = cljs.core.get.call(null, map__33285__$1, new cljs.core.Keyword(null, "uk-constituencies-rtree", "uk-constituencies-rtree", 3542903600));
      var map__33286 = om.core.get_shared.call(null, self__.owner);
      var map__33286__$1 = cljs.core.seq_QMARK_.call(null, map__33286) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33286) : map__33286;
      var path_fn = cljs.core.get.call(null, map__33286__$1, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570));
      var link_fn = cljs.core.get.call(null, map__33286__$1, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301));
      var fetch_boundaryline_fn = cljs.core.get.call(null, map__33286__$1, new cljs.core.Keyword(null, "fetch-boundaryline-fn", "fetch-boundaryline-fn", 3464186934));
      var comm = cljs.core.get.call(null, map__33286__$1, new cljs.core.Keyword(null, "comm", "comm", 1016963710));
      var map__33287 = om.core.get_state.call(null, self__.owner);
      var map__33287__$1 = cljs.core.seq_QMARK_.call(null, map__33287) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33287) : map__33287;
      var map__33288 = cljs.core.get.call(null, map__33287__$1, new cljs.core.Keyword(null, "map", "map", 1014012110));
      var map__33288__$1 = cljs.core.seq_QMARK_.call(null, map__33288) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33288) : map__33288;
      var path_selections = cljs.core.get.call(null, map__33288__$1, new cljs.core.Keyword(null, "path-selections", "path-selections", 512369281));
      var paths = cljs.core.get.call(null, map__33288__$1, new cljs.core.Keyword(null, "paths", "paths", 1120343136));
      var markers = cljs.core.get.call(null, map__33288__$1, new cljs.core.Keyword(null, "markers", "markers", 1853155051));
      var leaflet_map = cljs.core.get.call(null, map__33288__$1, new cljs.core.Keyword(null, "leaflet-map", "leaflet-map", 4353500414));
      var pan_pending = cljs.core.get.call(null, map__33287__$1, new cljs.core.Keyword(null, "pan-pending", "pan-pending", 3214812121));
      var path_highlights = cljs.core.get.call(null, map__33287__$1, new cljs.core.Keyword(null, "path-highlights", "path-highlights", 2524998745));
      clustermap.components.map.update_markers.call(null, path_fn, leaflet_map, markers, next_locations);
      if (cljs.core.not_EQ_.call(null, next_uk_constituencies_rtree, uk_constituencies_rtree)) {
        leaflet_map.on("mousemove", function(e) {
          var lat = e.latlng.lat;
          var lng = e.latlng.lng;
          var hits = clustermap.rtree.point_in_polygons.call(null, next_uk_constituencies_rtree, lng, lat);
          var hit_path_ids = cljs.core.map.call(null, function(lat, lng, hits) {
            return function(hit) {
              return hit.properties.id;
            };
          }(lat, lng, hits), hits);
          var highlight_hit = cljs.core.first.call(null, hits);
          var highlight_path_ids = cljs.core.set.call(null, cljs.core.take.call(null, 1, hit_path_ids));
          var old_path_highlights = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "path-highlights", "path-highlights", 2524998745));
          if (cljs.core.truth_(function() {
            var and__3394__auto__ = highlight_hit;
            if (cljs.core.truth_(and__3394__auto__)) {
              return cljs.core.not_EQ_.call(null, old_path_highlights, highlight_path_ids);
            } else {
              return and__3394__auto__;
            }
          }())) {
            var G__33289_33296 = L.popup();
            G__33289_33296.setLatLng(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lat, lng], null)));
            G__33289_33296.setContent([cljs.core.str("\x3cp\x3e"), cljs.core.str(function() {
              var G__33290 = highlight_hit;
              var G__33290__$1 = G__33290 == null ? null : G__33290.properties;
              var G__33290__$2 = G__33290__$1 == null ? null : G__33290__$1.compact_name;
              return G__33290__$2;
            }()), cljs.core.str("\x3c/p\x3e")].join(""));
            G__33289_33296.openOn(leaflet_map);
          } else {
          }
          return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "path-highlights", "path-highlights", 2524998745), highlight_path_ids);
        });
        leaflet_map.on("click", function(e) {
          var hits = clustermap.rtree.point_in_polygons.call(null, next_uk_constituencies_rtree, e.latlng.lng, e.latlng.lat);
          var hit_path_ids = cljs.core.map.call(null, function(hits) {
            return function(hit) {
              return hit.properties.id;
            };
          }(hits), hits);
          return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 4402849902), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), cljs.core.first.call(null, hit_path_ids)], null)], null));
        });
      } else {
      }
      if (cljs.core.truth_(next_uk_constituencies)) {
        clustermap.components.map.update_paths.call(null, comm, fetch_boundaryline_fn, next_uk_constituencies, leaflet_map, paths, path_selections, next_path_highlights, next_locations);
      } else {
      }
      if (cljs.core.truth_(function() {
        var or__3406__auto__ = pan_pending;
        if (cljs.core.truth_(or__3406__auto__)) {
          return or__3406__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, next_selection, self__.selection);
        }
      }())) {
        return clustermap.components.map.pan_to_selection.call(null, self__.owner, leaflet_map, paths, path_selections);
      } else {
        return null;
      }
    };
    clustermap.components.map.t33278.prototype.om$core$IDidMount$ = true;
    clustermap.components.map.t33278.prototype.om$core$IDidMount$did_mount$arity$2 = function(this$, node) {
      var self__ = this;
      var this$__$1 = this;
      var map__33291 = clustermap.components.map.create_map.call(null, node);
      var map__33291__$1 = cljs.core.seq_QMARK_.call(null, map__33291) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33291) : map__33291;
      var map = map__33291__$1;
      var path = cljs.core.get.call(null, map__33291__$1, new cljs.core.Keyword(null, "path", "path", 1017337751));
      var markers = cljs.core.get.call(null, map__33291__$1, new cljs.core.Keyword(null, "markers", "markers", 1853155051));
      var leaflet_map = cljs.core.get.call(null, map__33291__$1, new cljs.core.Keyword(null, "leaflet-map", "leaflet-map", 4353500414));
      om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "map", "map", 1014012110), map);
      om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "path-highlights", "path-highlights", 2524998745), cljs.core.PersistentHashSet.EMPTY);
      leaflet_map.on("zoomend", function(e) {
        return cljs.core.swap_BANG_.call(null, om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "app-state", "app-state", 1424976215)), cljs.core.assoc, new cljs.core.Keyword(null, "zoom", "zoom", 1017648965), leaflet_map.getZoom());
      });
      jayq.core.$.call(null, document).on("clustermap-change-view", function(e) {
        console.log("change-view");
        var map__33292 = om.core.get_state.call(null, self__.owner);
        var map__33292__$1 = cljs.core.seq_QMARK_.call(null, map__33292) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33292) : map__33292;
        var map__33293 = cljs.core.get.call(null, map__33292__$1, new cljs.core.Keyword(null, "map", "map", 1014012110));
        var map__33293__$1 = cljs.core.seq_QMARK_.call(null, map__33293) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33293) : map__33293;
        var path_selections = cljs.core.get.call(null, map__33293__$1, new cljs.core.Keyword(null, "path-selections", "path-selections", 512369281));
        var paths = cljs.core.get.call(null, map__33293__$1, new cljs.core.Keyword(null, "paths", "paths", 1120343136));
        leaflet_map.invalidateSize();
        return clustermap.components.map.pan_to_selection.call(null, self__.owner, leaflet_map, paths, path_selections);
      });
      return om.core.update_BANG_.call(null, self__.app_state, cljs.core.assoc, new cljs.core.Keyword(null, "zoom", "zoom", 1017648965), leaflet_map.getZoom());
    };
    clustermap.components.map.t33278.prototype.om$core$IRender$ = true;
    clustermap.components.map.t33278.prototype.om$core$IRender$render$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return React.DOM.div({"className":"map", "ref":"map"});
    };
    clustermap.components.map.t33278.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33280) {
      var self__ = this;
      var _33280__$1 = this;
      return self__.meta33279;
    };
    clustermap.components.map.t33278.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33280, meta33279__$1) {
      var self__ = this;
      var _33280__$1 = this;
      return new clustermap.components.map.t33278(self__.selection, self__.app_state, self__.map__33277, self__.owner, self__.p__33257, self__.map_component, meta33279__$1);
    };
    clustermap.components.map.__GT_t33278 = function __GT_t33278(selection__$1, app_state__$1, map__33277__$2, owner__$1, p__33257__$1, map_component__$1, meta33279) {
      return new clustermap.components.map.t33278(selection__$1, app_state__$1, map__33277__$2, owner__$1, p__33257__$1, map_component__$1, meta33279);
    };
  }
  return new clustermap.components.map.t33278(selection, app_state, map__33277__$1, owner, p__33257, map_component, null);
};
clustermap.components.map.mount = function mount(app_state, elem_id, shared) {
  return om.core.root.call(null, app_state, cljs.core.merge.call(null, shared, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "app-state", "app-state", 1424976215), app_state, new cljs.core.Keyword(null, "fetch-boundaryline-fn", "fetch-boundaryline-fn", 3464186934), cljs.core.partial.call(null, clustermap.boundarylines.get_or_fetch_best_boundaryline, app_state, new cljs.core.Keyword(null, "boundarylines", "boundarylines", 2397299847))], null)), clustermap.components.map.map_component, 
  document.getElementById(elem_id));
};
goog.provide("clustermap.app");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clustermap.routes");
goog.require("clustermap.boundarylines");
goog.require("clustermap.boundarylines");
goog.require("goog.History");
goog.require("clustermap.nav");
goog.require("clustermap.api");
goog.require("clustermap.components.page_title");
goog.require("clustermap.components.full_report");
goog.require("clustermap.api");
goog.require("clustermap.components.page_title");
goog.require("goog.events");
goog.require("clustermap.routes");
goog.require("secretary.core");
goog.require("clustermap.components.search");
goog.require("om.dom");
goog.require("om.core");
goog.require("clustermap.components.map");
goog.require("clustermap.rtree");
goog.require("om.core");
goog.require("clustermap.rtree");
goog.require("clustermap.components.map_report");
goog.require("clustermap.components.search");
goog.require("om.dom");
goog.require("clustermap.components.full_report");
goog.require("clustermap.nav");
goog.require("goog.history.EventType");
goog.require("cljs.core.async");
goog.require("clustermap.components.map_report");
goog.require("clustermap.components.map");
goog.require("goog.events");
goog.require("secretary.core");
clustermap.app.state = cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "view", "view", 1017523735), new cljs.core.Keyword(null, "boundarylines", "boundarylines", 2397299847), new cljs.core.Keyword(null, "uk-constituencies", "uk-constituencies", 2507232365), new cljs.core.Keyword(null, "selection-investment-stats", "selection-investment-stats", 4568560312), new cljs.core.Keyword(null, "selector", "selector", 2205476689), new cljs.core.Keyword(null, "selection-investment-aggs", 
"selection-investment-aggs", 989474685), new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.Keyword(null, "selection-portfolio-company-locations", "selection-portfolio-company-locations", 1821239162), new cljs.core.Keyword(null, "uk-constituencies-rtree", "uk-constituencies-rtree", 3542903600), new cljs.core.Keyword(null, "selection-investment-account-timelines", "selection-investment-account-timelines", 1845704779), new cljs.core.Keyword(null, "selection-investments", 
"selection-investments", 2385751217), new cljs.core.Keyword(null, "all-investment-stats", "all-investment-stats", 2486056771), new cljs.core.Keyword(null, "search-results", "search-results", 1025331267), new cljs.core.Keyword(null, "all-portfolio-company-site-stats", "all-portfolio-company-site-stats", 1130880684), new cljs.core.Keyword(null, "zoom", "zoom", 1017648965)], [new cljs.core.Keyword(null, "map", "map", 1014012110), null, null, null, null, null, null, null, null, null, null, null, cljs.core.PersistentArrayMap.EMPTY, 
null, null]));
clustermap.app.new_state = function new_state(state, path_values) {
  return cljs.core.reduce.call(null, function(s, p__32576) {
    var vec__32577 = p__32576;
    var key_or_path = cljs.core.nth.call(null, vec__32577, 0, null);
    var value_or_fn = cljs.core.nth.call(null, vec__32577, 1, null);
    var path = cljs.core.sequential_QMARK_.call(null, key_or_path) ? key_or_path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_path], null);
    return cljs.core.update_in.call(null, s, path, cljs.core.fn_QMARK_.call(null, value_or_fn) ? value_or_fn : function(ov) {
      return value_or_fn;
    });
  }, state, path_values);
};
clustermap.app.set_state = function() {
  var set_state__delegate = function(p__32578) {
    var map__32580 = p__32578;
    var map__32580__$1 = cljs.core.seq_QMARK_.call(null, map__32580) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32580) : map__32580;
    var path_values = map__32580__$1;
    return cljs.core.swap_BANG_.call(null, clustermap.app.state, clustermap.app.new_state, path_values);
  };
  var set_state = function(var_args) {
    var p__32578 = null;
    if (arguments.length > 0) {
      p__32578 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return set_state__delegate.call(this, p__32578);
  };
  set_state.cljs$lang$maxFixedArity = 0;
  set_state.cljs$lang$applyTo = function(arglist__32581) {
    var p__32578 = cljs.core.seq(arglist__32581);
    return set_state__delegate(p__32578);
  };
  set_state.cljs$core$IFn$_invoke$arity$variadic = set_state__delegate;
  return set_state;
}();
clustermap.app.load_uk_constituencies = function load_uk_constituencies() {
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_32603) {
        var state_val_32604 = state_32603[1];
        if (state_val_32604 === 2) {
          var inst_32599 = state_32603[2];
          var inst_32600 = clustermap.rtree.rtree_index.call(null, inst_32599);
          var inst_32601 = clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "uk-constituencies", "uk-constituencies", 2507232365), inst_32599, new cljs.core.Keyword(null, "uk-constituencies-rtree", "uk-constituencies-rtree", 3542903600), inst_32600);
          var state_32603__$1 = state_32603;
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_32603__$1, inst_32601);
        } else {
          if (state_val_32604 === 1) {
            var inst_32597 = clustermap.api.boundaryline_collection_index.call(null, "uk_constituencies", new cljs.core.Keyword(null, "raw", "raw", 1014016922), true);
            var state_32603__$1 = state_32603;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32603__$1, 2, inst_32597);
          } else {
            return null;
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_32608 = [null, null, null, null, null, null, null];
            statearr_32608[0] = state_machine__5507__auto__;
            statearr_32608[1] = 1;
            return statearr_32608;
          };
          var state_machine__5507__auto____1 = function(state_32603) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_32603);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e32609) {
                  if (e32609 instanceof Object) {
                    var ex__5510__auto__ = e32609;
                    var statearr_32610_32612 = state_32603;
                    statearr_32610_32612[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_32603);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e32609;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__32613 = state_32603;
                state_32603 = G__32613;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_32603) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_32603);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_32611 = f__5522__auto__.call(null);
      statearr_32611[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_32611;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
clustermap.app.load_all_investment_stats = function load_all_investment_stats() {
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_32633) {
        var state_val_32634 = state_32633[1];
        if (state_val_32634 === 2) {
          var inst_32630 = state_32633[2];
          var inst_32631 = clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "all-investment-stats", "all-investment-stats", 2486056771), inst_32630);
          var state_32633__$1 = state_32633;
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_32633__$1, inst_32631);
        } else {
          if (state_val_32634 === 1) {
            var inst_32628 = clustermap.api.investment_stats.call(null);
            var state_32633__$1 = state_32633;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32633__$1, 2, inst_32628);
          } else {
            return null;
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_32638 = [null, null, null, null, null, null, null];
            statearr_32638[0] = state_machine__5507__auto__;
            statearr_32638[1] = 1;
            return statearr_32638;
          };
          var state_machine__5507__auto____1 = function(state_32633) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_32633);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e32639) {
                  if (e32639 instanceof Object) {
                    var ex__5510__auto__ = e32639;
                    var statearr_32640_32642 = state_32633;
                    statearr_32640_32642[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_32633);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e32639;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__32643 = state_32633;
                state_32633 = G__32643;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_32633) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_32633);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_32641 = f__5522__auto__.call(null);
      statearr_32641[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_32641;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
clustermap.app.process_search_results = function process_search_results(results) {
  return clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "search-results", "search-results", 1025331267), cljs.core.js__GT_clj.call(null, results));
};
clustermap.app.process_selection = function process_selection(p__32644, type) {
  var vec__32646 = p__32644;
  var selection = cljs.core.nth.call(null, vec__32646, 0, null);
  var selection_investment_stats = cljs.core.nth.call(null, vec__32646, 1, null);
  var selection_investment_account_timelines = cljs.core.nth.call(null, vec__32646, 2, null);
  var selection_investment_aggs = cljs.core.nth.call(null, vec__32646, 3, null);
  var selection_investments = cljs.core.nth.call(null, vec__32646, 4, null);
  var selection_portfolio_company_locations = cljs.core.nth.call(null, vec__32646, 5, null);
  return clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "selection", "selection", 3592905982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), type, new cljs.core.Keyword(null, "value", "value", 1125876963), selection], null), new cljs.core.Keyword(null, "selection-investment-stats", "selection-investment-stats", 4568560312), selection_investment_stats, new cljs.core.Keyword(null, "selection-investment-account-timelines", "selection-investment-account-timelines", 
  1845704779), selection_investment_account_timelines, new cljs.core.Keyword(null, "selection-investment-aggs", "selection-investment-aggs", 989474685), selection_investment_aggs, new cljs.core.Keyword(null, "selection-investments", "selection-investments", 2385751217), selection_investments, new cljs.core.Keyword(null, "selection-portfolio-company-locations", "selection-portfolio-company-locations", 1821239162), selection_portfolio_company_locations);
};
clustermap.app.make_selection = function make_selection(p__32647) {
  var vec__32652 = p__32647;
  var type = cljs.core.nth.call(null, vec__32652, 0, null);
  var id = cljs.core.nth.call(null, vec__32652, 1, null);
  var selector = cljs.core.truth_(type) ? new cljs.core.PersistentArrayMap.fromArray([type, id], true, false) : cljs.core.PersistentArrayMap.EMPTY;
  var old_selector = (new cljs.core.Keyword(null, "selector", "selector", 2205476689)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, clustermap.app.state));
  if (cljs.core.not_EQ_.call(null, selector, old_selector)) {
    clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "selector", "selector", 2205476689), selector);
    var pred__32653 = cljs.core._EQ_;
    var expr__32654 = type;
    if (cljs.core.truth_(pred__32653.call(null, new cljs.core.Keyword(null, "portfolio-company", "portfolio-company", 3606204522), expr__32654))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [clustermap.api.portfolio_company.call(null, id), clustermap.api.investment_stats.call(null, selector), clustermap.api.investment_account_timelines.call(null, selector), clustermap.api.investment_aggs.call(null, selector), clustermap.api.investments.call(null, selector), clustermap.api.portfolio_company_locations.call(null, 
      selector)], null), type], null);
    } else {
      if (cljs.core.truth_(pred__32653.call(null, new cljs.core.Keyword(null, "investor-company", "investor-company", 3983736762), expr__32654))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [clustermap.api.investor_company.call(null, id), clustermap.api.investment_stats.call(null, selector), clustermap.api.investment_account_timelines.call(null, selector), clustermap.api.investment_aggs.call(null, selector), clustermap.api.investments.call(null, selector), clustermap.api.portfolio_company_locations.call(null, 
        selector)], null), type], null);
      } else {
        if (cljs.core.truth_(pred__32653.call(null, new cljs.core.Keyword(null, "constituency", "constituency", 3902864696), expr__32654))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [clustermap.api.constituency.call(null, id), clustermap.api.investment_stats.call(null, selector), clustermap.api.investment_account_timelines.call(null, selector), clustermap.api.investment_aggs.call(null, selector), clustermap.api.investments.call(null, selector), clustermap.api.portfolio_company_locations.call(null, 
          selector)], null), type], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, clustermap.api.investment_stats.call(null, selector), clustermap.api.investment_account_timelines.call(null, selector), clustermap.api.investment_aggs.call(null, selector), clustermap.api.investments.call(null, selector), null], null), type], null);
        }
      }
    }
  } else {
    return null;
  }
};
clustermap.app.change_view = function change_view(view) {
  var view__$1 = cljs.core.keyword.call(null, view);
  if (cljs.core.not_EQ_.call(null, view__$1, (new cljs.core.Keyword(null, "view", "view", 1017523735)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, clustermap.app.state)))) {
    clustermap.app.set_state.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735), view__$1);
    return clustermap.nav.change_view.call(null, cljs.core.name.call(null, view__$1));
  } else {
    return null;
  }
};
clustermap.app.history = new goog.History;
clustermap.app.set_route = function set_route(view, type, id) {
  if (cljs.core.truth_(function() {
    var and__3394__auto__ = type;
    if (cljs.core.truth_(and__3394__auto__)) {
      return id;
    } else {
      return and__3394__auto__;
    }
  }())) {
    return clustermap.app.history.setToken([cljs.core.str("/"), cljs.core.str(cljs.core.name.call(null, function() {
      var or__3406__auto__ = view;
      if (cljs.core.truth_(or__3406__auto__)) {
        return or__3406__auto__;
      } else {
        return "map";
      }
    }())), cljs.core.str("/"), cljs.core.str(cljs.core.name.call(null, type)), cljs.core.str("/"), cljs.core.str(cljs.core.name.call(null, id))].join(""));
  } else {
    if (cljs.core.truth_(view)) {
      return clustermap.app.history.setToken([cljs.core.str("/"), cljs.core.str(cljs.core.name.call(null, view))].join(""));
    } else {
      if (true) {
        return clustermap.app.history.setToken([cljs.core.str("")].join(""));
      } else {
        return null;
      }
    }
  }
};
clustermap.app.parse_route = function parse_route() {
  var fragment = clustermap.app.history.getToken();
  var vec__32657 = cljs.core.re_matches.call(null, /\/([^\/]+)(?:\/([^\/]+)\/(.+))?$/, fragment);
  var _ = cljs.core.nth.call(null, vec__32657, 0, null);
  var view = cljs.core.nth.call(null, vec__32657, 1, null);
  var type = cljs.core.nth.call(null, vec__32657, 2, null);
  var id = cljs.core.nth.call(null, vec__32657, 3, null);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "view", "view", 1017523735), view, new cljs.core.Keyword(null, "type", "type", 1017479852), type, new cljs.core.Keyword(null, "id", "id", 1013907597), id], null);
};
clustermap.app.set_selection_route = function set_selection_route(p__32658) {
  var vec__32661 = p__32658;
  var type = cljs.core.nth.call(null, vec__32661, 0, null);
  var id = cljs.core.nth.call(null, vec__32661, 1, null);
  var map__32662 = clustermap.app.parse_route.call(null);
  var map__32662__$1 = cljs.core.seq_QMARK_.call(null, map__32662) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32662) : map__32662;
  var view = cljs.core.get.call(null, map__32662__$1, new cljs.core.Keyword(null, "view", "view", 1017523735));
  return clustermap.app.set_route.call(null, view, type, id);
};
clustermap.app.set_view_route = function set_view_route(view) {
  var map__32664 = clustermap.app.parse_route.call(null);
  var map__32664__$1 = cljs.core.seq_QMARK_.call(null, map__32664) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32664) : map__32664;
  var id = cljs.core.get.call(null, map__32664__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var type = cljs.core.get.call(null, map__32664__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  return clustermap.app.set_route.call(null, view, type, id);
};
clustermap.app.event_handlers = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "search", "search", 4402534682), clustermap.api.ordered_api.call(null, clustermap.api.search, clustermap.app.process_search_results), new cljs.core.Keyword(null, "select", "select", 4402849902), clustermap.app.set_selection_route, new cljs.core.Keyword(null, "route-select", "route-select", 529886322), clustermap.api.ordered_api.call(null, clustermap.app.make_selection, clustermap.app.process_selection), 
new cljs.core.Keyword(null, "change-view", "change-view", 3608283668), clustermap.app.set_view_route, new cljs.core.Keyword(null, "route-change-view", "route-change-view", 1856546960), clustermap.app.change_view], null);
clustermap.app.handle_event = function handle_event(type, val) {
  var handler = cljs.core.get.call(null, clustermap.app.event_handlers, type);
  if (cljs.core.not.call(null, handler)) {
    throw new Error([cljs.core.str("no handler for event-type: "), cljs.core.str(type)].join(""));
  } else {
  }
  return handler.call(null, val);
};
clustermap.app.init_routes = function init_routes(comm) {
  cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.assoc, "/", function(params__9259__auto__) {
    var map__32668 = params__9259__auto__;
    var map__32668__$1 = cljs.core.seq_QMARK_.call(null, map__32668) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32668) : map__32668;
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "route-select", "route-select", 529886322), null], null));
  });
  cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.assoc, "/:view", function(params__9259__auto__) {
    var map__32669 = params__9259__auto__;
    var map__32669__$1 = cljs.core.seq_QMARK_.call(null, map__32669) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32669) : map__32669;
    var view = cljs.core.get.call(null, map__32669__$1, new cljs.core.Keyword(null, "view", "view", 1017523735));
    cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "route-change-view", "route-change-view", 1856546960), view], null));
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "route-select", "route-select", 529886322), null], null));
  });
  cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.assoc, "/:view/:type/:id", function(params__9259__auto__) {
    var map__32670 = params__9259__auto__;
    var map__32670__$1 = cljs.core.seq_QMARK_.call(null, map__32670) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32670) : map__32670;
    var id = cljs.core.get.call(null, map__32670__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
    var type = cljs.core.get.call(null, map__32670__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
    var view = cljs.core.get.call(null, map__32670__$1, new cljs.core.Keyword(null, "view", "view", 1017523735));
    cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "route-change-view", "route-change-view", 1856546960), view], null));
    return cljs.core.async.put_BANG_.call(null, comm, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "route-select", "route-select", 529886322), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, type), id], null)], null));
  });
  goog.events.listen(clustermap.app.history, goog.history.EventType.NAVIGATE, function(e) {
    return secretary.core.dispatch_BANG_.call(null, e.token);
  });
  return clustermap.app.history.setEnabled(true);
};
clustermap.app.init = function init() {
  var comm = cljs.core.async.chan.call(null);
  var path_fn = cljs.core.partial.call(null, clustermap.routes.path_for, clustermap.app.state);
  var link_fn = cljs.core.partial.call(null, clustermap.routes.link_for, clustermap.app.state);
  var shared = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "comm", "comm", 1016963710), comm, new cljs.core.Keyword(null, "path-fn", "path-fn", 4517369570), path_fn, new cljs.core.Keyword(null, "link-fn", "link-fn", 1190936301), link_fn], null);
  clustermap.nav.init.call(null, comm);
  clustermap.app.init_routes.call(null, comm);
  clustermap.app.load_uk_constituencies.call(null);
  clustermap.app.load_all_investment_stats.call(null);
  clustermap.components.map.mount.call(null, clustermap.app.state, "map-component", shared);
  clustermap.components.search.mount.call(null, clustermap.app.state, "search-component", shared);
  clustermap.components.map_report.mount.call(null, clustermap.app.state, "map-report-component", shared);
  clustermap.components.page_title.mount.call(null, clustermap.app.state, "page-title-component", shared);
  clustermap.components.full_report.mount.call(null, clustermap.app.state, "full-report-component", shared);
  var c__5521__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5522__auto__ = function() {
      var switch__5506__auto__ = function(state_32717) {
        var state_val_32718 = state_32717[1];
        if (state_val_32718 === 7) {
          var inst_32706 = state_32717[2];
          var inst_32707 = cljs.core.nth.call(null, inst_32706, 0, null);
          var inst_32708 = cljs.core.nth.call(null, inst_32706, 1, null);
          var inst_32709 = clustermap.app.handle_event.call(null, inst_32707, inst_32708);
          var state_32717__$1 = function() {
            var statearr_32719 = state_32717;
            statearr_32719[7] = inst_32709;
            return statearr_32719;
          }();
          var statearr_32720_32733 = state_32717__$1;
          statearr_32720_32733[2] = null;
          statearr_32720_32733[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_32718 === 6) {
            var inst_32713 = state_32717[2];
            var state_32717__$1 = state_32717;
            var statearr_32721_32734 = state_32717__$1;
            statearr_32721_32734[2] = inst_32713;
            statearr_32721_32734[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_32718 === 5) {
              var state_32717__$1 = state_32717;
              var statearr_32722_32735 = state_32717__$1;
              statearr_32722_32735[2] = null;
              statearr_32722_32735[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_32718 === 4) {
                var state_32717__$1 = state_32717;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32717__$1, 7, comm);
              } else {
                if (state_val_32718 === 3) {
                  var inst_32715 = state_32717[2];
                  var state_32717__$1 = state_32717;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_32717__$1, inst_32715);
                } else {
                  if (state_val_32718 === 2) {
                    var state_32717__$1 = state_32717;
                    if (true) {
                      var statearr_32723_32736 = state_32717__$1;
                      statearr_32723_32736[1] = 4;
                    } else {
                      var statearr_32724_32737 = state_32717__$1;
                      statearr_32724_32737[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_32718 === 1) {
                      var state_32717__$1 = state_32717;
                      var statearr_32725_32738 = state_32717__$1;
                      statearr_32725_32738[2] = null;
                      statearr_32725_32738[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5506__auto__) {
        return function() {
          var state_machine__5507__auto__ = null;
          var state_machine__5507__auto____0 = function() {
            var statearr_32729 = [null, null, null, null, null, null, null, null];
            statearr_32729[0] = state_machine__5507__auto__;
            statearr_32729[1] = 1;
            return statearr_32729;
          };
          var state_machine__5507__auto____1 = function(state_32717) {
            while (true) {
              var ret_value__5508__auto__ = function() {
                try {
                  while (true) {
                    var result__5509__auto__ = switch__5506__auto__.call(null, state_32717);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5509__auto__;
                    }
                    break;
                  }
                } catch (e32730) {
                  if (e32730 instanceof Object) {
                    var ex__5510__auto__ = e32730;
                    var statearr_32731_32739 = state_32717;
                    statearr_32731_32739[5] = ex__5510__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_32717);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e32730;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__32740 = state_32717;
                state_32717 = G__32740;
                continue;
              } else {
                return ret_value__5508__auto__;
              }
              break;
            }
          };
          state_machine__5507__auto__ = function(state_32717) {
            switch(arguments.length) {
              case 0:
                return state_machine__5507__auto____0.call(this);
              case 1:
                return state_machine__5507__auto____1.call(this, state_32717);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
          state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
          return state_machine__5507__auto__;
        }();
      }(switch__5506__auto__);
    }();
    var state__5523__auto__ = function() {
      var statearr_32732 = f__5522__auto__.call(null);
      statearr_32732[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto__;
      return statearr_32732;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
  });
  return c__5521__auto__;
};
goog.provide("clustermap.core");
goog.require("cljs.core");
goog.require("clustermap.app");
goog.require("clustermap.app");
goog.require("clojure.browser.repl");
clustermap.core.init = function init() {
  return clustermap.app.init.call(null);
};
if (cljs.core.truth_(config.repl)) {
  setTimeout(clustermap.core.init, 2E3);
} else {
  if (true) {
    clustermap.core.init.call(null);
  } else {
  }
}
;goog.provide("clustermap.async");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
clustermap.async.map_async = function() {
  var map_async__delegate = function(f, colls) {
    var coll_chs = cljs.core.map.call(null, function(coll) {
      var ch = cljs.core.async.chan.call(null);
      cljs.core.async.onto_chan.call(null, ch, coll);
      return ch;
    }, colls);
    return cljs.core.async.map.call(null, f, coll_chs);
  };
  var map_async = function(f, var_args) {
    var colls = null;
    if (arguments.length > 1) {
      colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map_async__delegate.call(this, f, colls);
  };
  map_async.cljs$lang$maxFixedArity = 1;
  map_async.cljs$lang$applyTo = function(arglist__32741) {
    var f = cljs.core.first(arglist__32741);
    var colls = cljs.core.rest(arglist__32741);
    return map_async__delegate(f, colls);
  };
  map_async.cljs$core$IFn$_invoke$arity$variadic = map_async__delegate;
  return map_async;
}();
clustermap.async.dorun_async = function() {
  var dorun_async__delegate = function(ch, p__32742) {
    var map__32802 = p__32742;
    var map__32802__$1 = cljs.core.seq_QMARK_.call(null, map__32802) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32802) : map__32802;
    var delay = cljs.core.get.call(null, map__32802__$1, new cljs.core.Keyword(null, "delay", "delay", 1109372149));
    var log = cljs.core.get.call(null, map__32802__$1, new cljs.core.Keyword(null, "log", "log", 1014011574));
    var c__5521__auto___32861 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5522__auto__ = function() {
        var switch__5506__auto__ = function(state_32831) {
          var state_val_32832 = state_32831[1];
          if (state_val_32832 === 1) {
            var state_32831__$1 = state_32831;
            var statearr_32833_32862 = state_32831__$1;
            statearr_32833_32862[2] = null;
            statearr_32833_32862[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_32832 === 2) {
              var state_32831__$1 = state_32831;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32831__$1, 4, ch);
            } else {
              if (state_val_32832 === 3) {
                var inst_32829 = state_32831[2];
                var state_32831__$1 = state_32831;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_32831__$1, inst_32829);
              } else {
                if (state_val_32832 === 4) {
                  var inst_32805 = state_32831[7];
                  var inst_32805__$1 = state_32831[2];
                  var state_32831__$1 = function() {
                    var statearr_32834 = state_32831;
                    statearr_32834[7] = inst_32805__$1;
                    return statearr_32834;
                  }();
                  if (cljs.core.truth_(inst_32805__$1)) {
                    var statearr_32835_32863 = state_32831__$1;
                    statearr_32835_32863[1] = 5;
                  } else {
                    var statearr_32836_32864 = state_32831__$1;
                    statearr_32836_32864[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_32832 === 5) {
                    var state_32831__$1 = state_32831;
                    if (cljs.core.truth_(delay)) {
                      var statearr_32837_32865 = state_32831__$1;
                      statearr_32837_32865[1] = 8;
                    } else {
                      var statearr_32838_32866 = state_32831__$1;
                      statearr_32838_32866[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_32832 === 6) {
                      var state_32831__$1 = state_32831;
                      var statearr_32839_32867 = state_32831__$1;
                      statearr_32839_32867[2] = null;
                      statearr_32839_32867[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_32832 === 7) {
                        var inst_32822 = state_32831[2];
                        var state_32831__$1 = state_32831;
                        if (cljs.core.truth_(inst_32822)) {
                          var statearr_32840_32868 = state_32831__$1;
                          statearr_32840_32868[1] = 15;
                        } else {
                          var statearr_32841_32869 = state_32831__$1;
                          statearr_32841_32869[1] = 16;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_32832 === 8) {
                          var inst_32808 = cljs.core.async.timeout.call(null, delay);
                          var state_32831__$1 = state_32831;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_32831__$1, 11, inst_32808);
                        } else {
                          if (state_val_32832 === 9) {
                            var state_32831__$1 = state_32831;
                            var statearr_32842_32870 = state_32831__$1;
                            statearr_32842_32870[2] = null;
                            statearr_32842_32870[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_32832 === 10) {
                              var inst_32813 = state_32831[2];
                              var state_32831__$1 = function() {
                                var statearr_32843 = state_32831;
                                statearr_32843[8] = inst_32813;
                                return statearr_32843;
                              }();
                              if (cljs.core.truth_(log)) {
                                var statearr_32844_32871 = state_32831__$1;
                                statearr_32844_32871[1] = 12;
                              } else {
                                var statearr_32845_32872 = state_32831__$1;
                                statearr_32845_32872[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_32832 === 11) {
                                var inst_32810 = state_32831[2];
                                var state_32831__$1 = state_32831;
                                var statearr_32846_32873 = state_32831__$1;
                                statearr_32846_32873[2] = inst_32810;
                                statearr_32846_32873[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_32832 === 12) {
                                  var inst_32805 = state_32831[7];
                                  var inst_32815 = cljs.core.clj__GT_js.call(null, inst_32805);
                                  var inst_32816 = console.log(inst_32815);
                                  var state_32831__$1 = state_32831;
                                  var statearr_32847_32874 = state_32831__$1;
                                  statearr_32847_32874[2] = inst_32816;
                                  statearr_32847_32874[1] = 14;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_32832 === 13) {
                                    var state_32831__$1 = state_32831;
                                    var statearr_32848_32875 = state_32831__$1;
                                    statearr_32848_32875[2] = null;
                                    statearr_32848_32875[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_32832 === 14) {
                                      var inst_32805 = state_32831[7];
                                      var inst_32819 = state_32831[2];
                                      var state_32831__$1 = function() {
                                        var statearr_32849 = state_32831;
                                        statearr_32849[9] = inst_32819;
                                        return statearr_32849;
                                      }();
                                      var statearr_32850_32876 = state_32831__$1;
                                      statearr_32850_32876[2] = inst_32805;
                                      statearr_32850_32876[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_32832 === 15) {
                                        var state_32831__$1 = state_32831;
                                        var statearr_32851_32877 = state_32831__$1;
                                        statearr_32851_32877[2] = null;
                                        statearr_32851_32877[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_32832 === 16) {
                                          var state_32831__$1 = state_32831;
                                          var statearr_32852_32878 = state_32831__$1;
                                          statearr_32852_32878[2] = null;
                                          statearr_32852_32878[1] = 17;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_32832 === 17) {
                                            var inst_32827 = state_32831[2];
                                            var state_32831__$1 = state_32831;
                                            var statearr_32853_32879 = state_32831__$1;
                                            statearr_32853_32879[2] = inst_32827;
                                            statearr_32853_32879[1] = 3;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5506__auto__) {
          return function() {
            var state_machine__5507__auto__ = null;
            var state_machine__5507__auto____0 = function() {
              var statearr_32857 = [null, null, null, null, null, null, null, null, null, null];
              statearr_32857[0] = state_machine__5507__auto__;
              statearr_32857[1] = 1;
              return statearr_32857;
            };
            var state_machine__5507__auto____1 = function(state_32831) {
              while (true) {
                var ret_value__5508__auto__ = function() {
                  try {
                    while (true) {
                      var result__5509__auto__ = switch__5506__auto__.call(null, state_32831);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5509__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__5509__auto__;
                      }
                      break;
                    }
                  } catch (e32858) {
                    if (e32858 instanceof Object) {
                      var ex__5510__auto__ = e32858;
                      var statearr_32859_32880 = state_32831;
                      statearr_32859_32880[5] = ex__5510__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_32831);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e32858;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5508__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__32881 = state_32831;
                  state_32831 = G__32881;
                  continue;
                } else {
                  return ret_value__5508__auto__;
                }
                break;
              }
            };
            state_machine__5507__auto__ = function(state_32831) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5507__auto____0.call(this);
                case 1:
                  return state_machine__5507__auto____1.call(this, state_32831);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5507__auto____0;
            state_machine__5507__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5507__auto____1;
            return state_machine__5507__auto__;
          }();
        }(switch__5506__auto__);
      }();
      var state__5523__auto__ = function() {
        var statearr_32860 = f__5522__auto__.call(null);
        statearr_32860[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5521__auto___32861;
        return statearr_32860;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5523__auto__);
    });
    return null;
  };
  var dorun_async = function(ch, var_args) {
    var p__32742 = null;
    if (arguments.length > 1) {
      p__32742 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dorun_async__delegate.call(this, ch, p__32742);
  };
  dorun_async.cljs$lang$maxFixedArity = 1;
  dorun_async.cljs$lang$applyTo = function(arglist__32882) {
    var ch = cljs.core.first(arglist__32882);
    var p__32742 = cljs.core.rest(arglist__32882);
    return dorun_async__delegate(ch, p__32742);
  };
  dorun_async.cljs$core$IFn$_invoke$arity$variadic = dorun_async__delegate;
  return dorun_async;
}();

//# sourceMappingURL=clustermap.js.map