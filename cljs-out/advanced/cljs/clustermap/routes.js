// Compiled by ClojureScript 0.0-2138
goog.provide('clustermap.routes');
goog.require('cljs.core');
goog.require('sablono.core');
goog.require('sablono.core');
goog.require('sablono.core');
clustermap.routes.type_name_keys = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$280,cljs.core.constant$keyword$257,cljs.core.constant$keyword$281,cljs.core.constant$keyword$257,cljs.core.constant$keyword$282,cljs.core.constant$keyword$354], null);
clustermap.routes.name_for = (function name_for(type,obj){return cljs.core.get.cljs$core$IFn$_invoke$arity$2(obj,cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_name_keys,type));
});
clustermap.routes.portfolio_company_path = (function portfolio_company_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22353 = app_state;var G__22353__$1 = (((G__22353 == null))?null:cljs.core.deref(G__22353));var G__22353__$2 = (((G__22353__$1 == null))?null:cljs.core.constant$keyword$355.cljs$core$IFn$_invoke$arity$1(G__22353__$1));var G__22353__$3 = (((G__22353__$2 == null))?null:cljs.core.name(G__22353__$2));return G__22353__$3;
})()),cljs.core.str("/portfolio-company/"),cljs.core.str(cljs.core.constant$keyword$356.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.investor_company_path = (function investor_company_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22355 = app_state;var G__22355__$1 = (((G__22355 == null))?null:cljs.core.deref(G__22355));var G__22355__$2 = (((G__22355__$1 == null))?null:cljs.core.constant$keyword$355.cljs$core$IFn$_invoke$arity$1(G__22355__$1));var G__22355__$3 = (((G__22355__$2 == null))?null:cljs.core.name(G__22355__$2));return G__22355__$3;
})()),cljs.core.str("/investor-company/"),cljs.core.str(cljs.core.constant$keyword$357.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.constituency_path = (function constituency_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22357 = app_state;var G__22357__$1 = (((G__22357 == null))?null:cljs.core.deref(G__22357));var G__22357__$2 = (((G__22357__$1 == null))?null:cljs.core.constant$keyword$355.cljs$core$IFn$_invoke$arity$1(G__22357__$1));var G__22357__$3 = (((G__22357__$2 == null))?null:cljs.core.name(G__22357__$2));return G__22357__$3;
})()),cljs.core.str("/constituency/"),cljs.core.str(cljs.core.constant$keyword$358.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.type_paths = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$280,clustermap.routes.portfolio_company_path,cljs.core.constant$keyword$281,clustermap.routes.investor_company_path,cljs.core.constant$keyword$282,clustermap.routes.constituency_path], null);
clustermap.routes.path_for = (function path_for(app_state,type,obj){return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_paths,type),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [app_state,obj], null));
});
clustermap.routes.link_for = (function link_for(app_state,type,obj){return React.DOM.a({"href": clustermap.routes.path_for(app_state,type,obj)},sablono.interpreter.interpret(clustermap.routes.name_for(type,obj)));
});
