// Compiled by ClojureScript 0.0-2138
goog.provide('clustermap.routes');
goog.require('cljs.core');
goog.require('sablono.core');
goog.require('sablono.core');
goog.require('sablono.core');
clustermap.routes.type_name_keys = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$292,cljs.core.constant$keyword$269,cljs.core.constant$keyword$293,cljs.core.constant$keyword$269,cljs.core.constant$keyword$294,cljs.core.constant$keyword$376], null);
clustermap.routes.name_for = (function name_for(type,obj){return cljs.core.get.cljs$core$IFn$_invoke$arity$2(obj,cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_name_keys,type));
});
clustermap.routes.portfolio_company_path = (function portfolio_company_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22889 = app_state;var G__22889__$1 = (((G__22889 == null))?null:cljs.core.deref(G__22889));var G__22889__$2 = (((G__22889__$1 == null))?null:cljs.core.constant$keyword$377.cljs$core$IFn$_invoke$arity$1(G__22889__$1));var G__22889__$3 = (((G__22889__$2 == null))?null:cljs.core.name(G__22889__$2));return G__22889__$3;
})()),cljs.core.str("/portfolio-company/"),cljs.core.str(cljs.core.constant$keyword$378.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.investor_company_path = (function investor_company_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22891 = app_state;var G__22891__$1 = (((G__22891 == null))?null:cljs.core.deref(G__22891));var G__22891__$2 = (((G__22891__$1 == null))?null:cljs.core.constant$keyword$377.cljs$core$IFn$_invoke$arity$1(G__22891__$1));var G__22891__$3 = (((G__22891__$2 == null))?null:cljs.core.name(G__22891__$2));return G__22891__$3;
})()),cljs.core.str("/investor-company/"),cljs.core.str(cljs.core.constant$keyword$379.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.constituency_path = (function constituency_path(app_state,obj){return [cljs.core.str("#/"),cljs.core.str((function (){var G__22893 = app_state;var G__22893__$1 = (((G__22893 == null))?null:cljs.core.deref(G__22893));var G__22893__$2 = (((G__22893__$1 == null))?null:cljs.core.constant$keyword$377.cljs$core$IFn$_invoke$arity$1(G__22893__$1));var G__22893__$3 = (((G__22893__$2 == null))?null:cljs.core.name(G__22893__$2));return G__22893__$3;
})()),cljs.core.str("/constituency/"),cljs.core.str(cljs.core.constant$keyword$380.cljs$core$IFn$_invoke$arity$1(obj))].join('');
});
clustermap.routes.type_paths = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.constant$keyword$292,clustermap.routes.portfolio_company_path,cljs.core.constant$keyword$293,clustermap.routes.investor_company_path,cljs.core.constant$keyword$294,clustermap.routes.constituency_path], null);
clustermap.routes.path_for = (function path_for(app_state,type,obj){return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(clustermap.routes.type_paths,type),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [app_state,obj], null));
});
clustermap.routes.link_for = (function link_for(app_state,type,obj){return React.DOM.a({"href": clustermap.routes.path_for(app_state,type,obj)},sablono.interpreter.interpret(clustermap.routes.name_for(type,obj)));
});
